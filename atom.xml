<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aoki&#39;s Blog</title>
  
  <subtitle>“惟将终夜长开眼，报答平生未展眉”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wanqbin.xyz/"/>
  <updated>2019-11-30T08:27:54.784Z</updated>
  <id>https://wanqbin.xyz/</id>
  
  <author>
    <name>Aoki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell脚本的for和select循环</title>
    <link href="https://wanqbin.xyz/2019/shell%E8%84%9A%E6%9C%AC%E7%9A%84for%E5%92%8Cselect%E5%BE%AA%E7%8E%AF/"/>
    <id>https://wanqbin.xyz/2019/shell脚本的for和select循环/</id>
    <published>2019-11-30T08:13:00.000Z</published>
    <updated>2019-11-30T08:27:54.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、for循环"><a href="#一、for循环" class="headerlink" title="一、for循环"></a>一、for循环</h2><ol><li><h3 id="for循环语句为变量取值型"><a href="#for循环语句为变量取值型" class="headerlink" title="for循环语句为变量取值型"></a>for循环语句为变量取值型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量名 in 变量取值列表</span><br><span class="line">do</span><br><span class="line">指令</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><h3 id="for循环语句为C语言型for循环语句"><a href="#for循环语句为C语言型for循环语句" class="headerlink" title="for循环语句为C语言型for循环语句"></a>for循环语句为C语言型for循环语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((exp1; exp2; exp3))</span><br><span class="line">do</span><br><span class="line">指令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>如果希望程序持续运行，则多用while，包括守护进程</li><li>如果是有限次循环，则多用for</li></ul></li><li><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><ul><li><p>获取目录下所有文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash </span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /root/myShell/obShell/ </span><br><span class="line">for filename in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $filename</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的for和select循环/%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%90%8D.PNG" alt="执行结果"></p></li><li><p>for循环批量修改文件扩展名</p><p><img src="/2019/shell脚本的for和select循环/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E4%B9%8B%E5%89%8D.PNG" alt="批量修改文件名前"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /root/myShell/obShell/test/ </span><br><span class="line"></span><br><span class="line">for filename in `ls *.txt`</span><br><span class="line">do</span><br><span class="line">    mv $filename  `echo $filename|sed 's/test/modify/'`</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的for和select循环/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D.PNG" alt="执行结果"></p></li><li><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash </span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">COLOR='\033[47;30m'</span><br><span class="line"></span><br><span class="line">RES='\033[0m'</span><br><span class="line"></span><br><span class="line">for num1 in `seq 9`</span><br><span class="line">do</span><br><span class="line">    for num2 in `seq 9`</span><br><span class="line">    do</span><br><span class="line">        if [ $num1 -ge $num2 ];then</span><br><span class="line">            if ((($num1*num2)&gt;9));then </span><br><span class="line">                echo -en "$&#123;COLOR&#125;$&#123;num1&#125;x$&#123;num2&#125;=$((num1*num2)) $RES "</span><br><span class="line">            else</span><br><span class="line">                echo -en "$&#123;COLOR&#125;$&#123;num1&#125;x$&#123;num2&#125;=$((num1*num2)) $RES  "</span><br><span class="line">            fi</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">echo " "</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的for和select循环/99%E4%B9%98%E6%B3%95%E8%A1%A8.PNG" alt="执行结果"></p></li><li><h3 id="批量创建10个系统账号，并设置密码（密码是随机数，要求是字符和数字的混合）"><a href="#批量创建10个系统账号，并设置密码（密码是随机数，要求是字符和数字的混合）" class="headerlink" title="批量创建10个系统账号，并设置密码（密码是随机数，要求是字符和数字的混合）"></a>批量创建10个系统账号，并设置密码（密码是随机数，要求是字符和数字的混合）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions </span><br><span class="line"></span><br><span class="line">user="Aoki"</span><br><span class="line">passfile="/tmp/user.log"</span><br><span class="line"></span><br><span class="line">for num in `seq -w 10`</span><br><span class="line">do</span><br><span class="line">    pass="`echo "test$RANDOM"|md5sum|cut -c3-11`"</span><br><span class="line">    useradd $user$num &amp;&gt;/dev/null &amp;&amp;\</span><br><span class="line">    echo "$pass"|passwd --stdin $user$num &amp;&gt;/dev/null &amp;&amp;\</span><br><span class="line">    echo -e "user:$user$num\tpasswd:$pass"&gt;&gt;$passfile </span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">        action "$user$num is ok." /bin/true </span><br><span class="line">    else</span><br><span class="line">        action "$user$num is fail." /bin/false</span><br><span class="line">    fi</span><br><span class="line">done </span><br><span class="line">echo -e "\033[35m------------------------------------\033[0m"</span><br><span class="line">cat $passfile &amp;&amp; &gt;$passfile</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的for和select循环/%E5%88%9B%E5%BB%BA10%E4%B8%AA%E7%94%A8%E6%88%B7.PNG" alt="执行结果"></p></li><li><h3 id="Linux系统产生随机数的6种方法"><a href="#Linux系统产生随机数的6种方法" class="headerlink" title="Linux系统产生随机数的6种方法"></a>Linux系统产生随机数的6种方法</h3><ol><li><h4 id="通过系统环境变量-RANDOM-实现"><a href="#通过系统环境变量-RANDOM-实现" class="headerlink" title="通过系统环境变量($RANDOM)实现"></a>通过系统环境变量($RANDOM)实现</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# echo $RANDOM</span><br><span class="line">19399</span><br><span class="line">[root@aoki obShell]# echo $RANDOM</span><br><span class="line">11031</span><br></pre></td></tr></table></figure><p>RANDOM的随机数访问是0~32767，因此，加密行不是很好可以通过在输出和的随机数后增加加密字符串的方式解决。</p></li><li><h4 id="通过openssl产生随机数"><a href="#通过openssl产生随机数" class="headerlink" title="通过openssl产生随机数"></a>通过openssl产生随机数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# openssl rand -base64 8</span><br><span class="line">2Iyj6sBwXk4=</span><br><span class="line">[root@aoki obShell]# openssl rand -base64 80</span><br><span class="line">kPqCshGOuXlFVDsh0VS6Ugyd56u9W0rx2uvAmh/5KGveTjPMig7Zo0k53BHgMuJv</span><br><span class="line">nxEDk3zU3ifKOKAgD+tek0o9yYQ/3ckwtAgQdRez7gs=</span><br></pre></td></tr></table></figure></li><li><h4 id="通过时间-date-获得随机数"><a href="#通过时间-date-获得随机数" class="headerlink" title="通过时间(date)获得随机数"></a>通过时间(date)获得随机数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# date +%Y%s</span><br><span class="line">20191575123335</span><br></pre></td></tr></table></figure></li><li><h4 id="通过-dev-urandom配合chksum生成随机数"><a href="#通过-dev-urandom配合chksum生成随机数" class="headerlink" title="通过/dev/urandom配合chksum生成随机数"></a>通过/dev/urandom配合chksum生成随机数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# head /dev/urandom |cksum</span><br><span class="line">1624783990 3098</span><br><span class="line">[root@aoki obShell]# head /dev/urandom |cksum</span><br><span class="line">3074370908 2834</span><br></pre></td></tr></table></figure></li><li><h4 id="通过UUID生成随机数"><a href="#通过UUID生成随机数" class="headerlink" title="通过UUID生成随机数"></a>通过UUID生成随机数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# cat /proc/sys/kernel/random/uuid</span><br><span class="line">e46b5c56-d41b-4cf8-9582-07d924bd0eee</span><br><span class="line">[root@aoki obShell]# cat /proc/sys/kernel/random/uuid</span><br><span class="line">c1cf6394-fa0d-4935-a8ca-d34b7f341573</span><br></pre></td></tr></table></figure><p>UUID码全称是通用唯一识别码，它是一个软件建构的标准。UUID的目的是让分布式系统中的所有元素都能有唯一的辨识信息，而不需要通过中央控制端奶做辨识信息的指定。</p></li></ol></li></ul></li></ol><h2 id="二、select循环语句"><a href="#二、select循环语句" class="headerlink" title="二、select循环语句"></a>二、select循环语句</h2><p>&emsp;&emsp;select循环语句的主要作用可能就是创建菜单，在执行带select循环语句的脚本时，输出会按照数字顺序的列表显示一个菜单项，并显示提示符（默认是#？），同时等待用户输入数字进行选择。</p><ol><li><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 变量名 [ in 菜单取值列表 ]</span><br><span class="line">do</span><br><span class="line">指令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在这种select循环语句的语法中，在执行脚本后，select关键字后面会有一个”变量名“，变量名依次获取in关键字后面的列表内容（以空格分隔），每次仅取一个，然后进入循环内，执行循环内的所有指令，当执行到done时结束返回，之后，”变量名“再继续取变量列表的下一个变量值，继续执行循环内的素有指令，当执行到done时结束返回，以此类推，直到取完最后一个变量列表里的值并进入循环执行到done结束为止。</p></li><li><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo "Please input your choice:"</span><br><span class="line">select var in Aoki Borgia </span><br><span class="line">do</span><br><span class="line">    echo -e "\033[32m You selected $var \033[0m"</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol><p>   <img src="/2019/shell脚本的for和select循环/select%E5%BE%AA%E7%8E%AF.PNG" alt="select循环"></p><h2 id="三、break、continue、exit、return的区别和对比"><a href="#三、break、continue、exit、return的区别和对比" class="headerlink" title="三、break、continue、exit、return的区别和对比"></a>三、break、continue、exit、return的区别和对比</h2><p>&emsp;&emsp;在上面的命令中，break、continue在条件语句及循环语句中用于控制程序的走向；而exit则用于终止所有语句并退出当前脚本，除此之外，exit还可以返回上一次程序或命令执行状态值给当前Shell；return类似exit，只不过return仅用于在函数内部返回函数执行的状态值。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>break n</td><td>如果省略n，则表示跳出整个循环，n表示跳出循环的次数</td></tr><tr><td>continue n</td><td>如果省略n，则表示跳过本次循环，忽略本次循环的剩余代码，进入循环的下一次循环，n表示可退到第n层继续执行</td></tr><tr><td>exit n</td><td>退出当前shell程序，n为上一次程序执行的状态返回值。n可以省略，在下一个Shell里可通过$?接收exit的n值</td></tr><tr><td>return n</td><td>用于在函数里作为函数的返回值，以判断函数执行是否正确。在下一个Shell里可通过$?接收exit n的n值</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ];then</span><br><span class="line">    echo $"USAGE:$0 &#123;break|contine|exit|return&#125;"</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">function test()</span><br><span class="line">&#123;</span><br><span class="line">    for ((i=0;i&lt;=5;i++))</span><br><span class="line">    do </span><br><span class="line">        if [ $i -eq 3 ];then</span><br><span class="line">            $*;</span><br><span class="line">        fi</span><br><span class="line">        echo $i</span><br><span class="line">    done</span><br><span class="line">    echo "This is a func"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test $*   #传参到函数</span><br><span class="line"></span><br><span class="line">func_ret=$?   #接收函数的返回值</span><br><span class="line"></span><br><span class="line">if [ `echo $*|grep return|wc -l` -eq 1 ];then</span><br><span class="line">    echo "return's exit status:$func_ret"</span><br><span class="line">fi</span><br><span class="line">echo "ok"</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的for和select循环/break%E7%9B%B8%E5%85%B3%E8%AF%AD%E5%8F%A5.PNG" alt="执行结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、for循环&quot;&gt;&lt;a href=&quot;#一、for循环&quot; class=&quot;headerlink&quot; title=&quot;一、for循环&quot;&gt;&lt;/a&gt;一、for循环&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;for循环语句为变量取值型&quot;&gt;&lt;a href=&quot;#for循环语句为变量取
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell脚本for循环" scheme="https://wanqbin.xyz/tags/Shell%E8%84%9A%E6%9C%ACfor%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="Shell脚本select循环" scheme="https://wanqbin.xyz/tags/Shell%E8%84%9A%E6%9C%ACselect%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>Shell数组</title>
    <link href="https://wanqbin.xyz/2019/shell%E6%95%B0%E7%BB%84/"/>
    <id>https://wanqbin.xyz/2019/shell数组/</id>
    <published>2019-11-30T08:13:00.000Z</published>
    <updated>2019-11-30T08:30:27.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Shell数组"><a href="#一、Shell数组" class="headerlink" title="一、Shell数组"></a>一、Shell数组</h2><ol><li><h3 id="Shell数组的定义"><a href="#Shell数组的定义" class="headerlink" title="Shell数组的定义"></a>Shell数组的定义</h3><ul><li><p>用小括号将变量值括起来赋值给数组变量，每个变量值之间要用空格进行分隔</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(value1 value2 value3 ……)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>用小括号将变量值括起来，同时采用键值对的形式赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=&#123;[1]=one [2]=two [3]=three&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过分别定义数组变量的方法来定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array[0]=a;array[1]=b;array[2]=c</span><br></pre></td></tr></table></figure></li><li><p>动态地定义数组变量，并使用命令的输出结果作为数组的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">array($</span>(命令))</span><br><span class="line">或</span><br><span class="line">array(`命令`)</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><h3 id="Shell数组的打印及输出"><a href="#Shell数组的打印及输出" class="headerlink" title="Shell数组的打印及输出"></a>Shell数组的打印及输出</h3><ul><li><h4 id="打印数组元素"><a href="#打印数组元素" class="headerlink" title="打印数组元素"></a>打印数组元素</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# array=(a b c)</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[0]&#125;</span><br><span class="line">a</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[1]&#125;</span><br><span class="line">b</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;    #输出数组的所有元素</span><br><span class="line">a b c</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[@]&#125;    #输出数组的所有元素</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><h4 id="打印数组元素的个数"><a href="#打印数组元素的个数" class="headerlink" title="打印数组元素的个数"></a>打印数组元素的个数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">a b c</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[@]&#125;</span><br><span class="line">a b c</span><br><span class="line">[root@aoki obShell]# echo $&#123;#array[*]&#125;</span><br><span class="line">3</span><br><span class="line">[root@aoki obShell]# echo $&#123;#array[@]&#125;</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">a b c</span><br><span class="line">[root@aoki obShell]# array[3]=d</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">a b c d</span><br><span class="line">[root@aoki obShell]# array[0]=1</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">1 b c d</span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="数组的删除"><a href="#数组的删除" class="headerlink" title="数组的删除"></a>数组的删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">1 b c d</span><br><span class="line">[root@aoki obShell]# unset array[1]</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">1 c d</span><br><span class="line">[root@aoki obShell]# unset array    #删除整个数组</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line"></span><br><span class="line">[root@aoki obShell]#</span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="数组内容的截取和替换"><a href="#数组内容的截取和替换" class="headerlink" title="数组内容的截取和替换"></a>数组内容的截取和替换</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# array=(1 2 3 4 5)</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">1 2 3 4 5</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]:1:3&#125;  #截取1号元素到3号元素</span><br><span class="line">2 3 4</span><br><span class="line">[root@aoki obShell]# array=($(echo &#123;a..z&#125;))   #将变量的结果赋值给数组变量</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]&#125;</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br><span class="line">[root@aoki obShell]# echo $&#123;array[*]:3:10&#125;   #截取3号元素到10号元素</span><br><span class="line">d e f g h i j k l m</span><br></pre></td></tr></table></figure></li><li><h4 id="替换数组的部分内容："><a href="#替换数组的部分内容：" class="headerlink" title="替换数组的部分内容："></a>替换数组的部分内容：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# echo $&#123;array[*]/a/100&#125;    #将a替换为100，该操作不会改变原来数组的内容</span><br><span class="line">100 b c d e f g h i j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、Shell数组示例"><a href="#二、Shell数组示例" class="headerlink" title="二、Shell数组示例"></a>二、Shell数组示例</h2><ol><li><h3 id="输出数组中的内容"><a href="#输出数组中的内容" class="headerlink" title="输出数组中的内容"></a>输出数组中的内容</h3><ul><li><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">array=(1 2 3 4)</span><br><span class="line">for i in $&#123;array[*]&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell数组/array1.PNG" alt="执行结果"></p></li><li><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array=(1 2 3 4 5)</span><br><span class="line"></span><br><span class="line">for ((i=0;i&lt;$&#123;#array[*]&#125;;i++))</span><br><span class="line">do</span><br><span class="line">    echo $&#123;array[i]&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><h4 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">array=(1 2 3 4)</span><br><span class="line">i=0</span><br><span class="line"></span><br><span class="line">while (( i&lt;$&#123;#array[*]&#125; ))</span><br><span class="line">do</span><br><span class="line">    echo $&#123;array[i]&#125;</span><br><span class="line">    ((i++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="打印下面这句话中字母数不大于6的单词"><a href="#打印下面这句话中字母数不大于6的单词" class="headerlink" title="打印下面这句话中字母数不大于6的单词"></a>打印下面这句话中字母数不大于6的单词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I am Aoki  Today is a nice day It is wonderful</span><br></pre></td></tr></table></figure><ul><li><h4 id="方法1：通过数组方法实现"><a href="#方法1：通过数组方法实现" class="headerlink" title="方法1：通过数组方法实现"></a>方法1：通过数组方法实现</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">arr=(I am Aoki Today is a nice day It is wonderful)</span><br><span class="line">for ((i=0;i&lt;$&#123;#arr[*]&#125;;i++))</span><br><span class="line">do</span><br><span class="line">    if [ $&#123;#arr[$i]&#125; -lt 6 ];then</span><br><span class="line">        echo "$&#123;arr[$i]&#125;"</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo -------------------------------------</span><br><span class="line"></span><br><span class="line">for word in $&#123;arr[*]&#125;</span><br><span class="line">do</span><br><span class="line">    if [ `expr length $word` -lt 6 ];then</span><br><span class="line">        echo $word</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell数组/%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E9%95%BF%E5%BA%A6.PNG" alt="执行结果"></p></li><li><h4 id="方法2：使用for循环列举取值列表法"><a href="#方法2：使用for循环列举取值列表法" class="headerlink" title="方法2：使用for循环列举取值列表法"></a>方法2：使用for循环列举取值列表法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chars="I am Aoki Today is a nice day It is wonderful"</span><br><span class="line"></span><br><span class="line">for word in $chars</span><br><span class="line">do</span><br><span class="line">    if [ `echo $word|wc -L` -lt 6 ];then</span><br><span class="line">        echo $word</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><h4 id="方法3：通过awk循环实现"><a href="#方法3：通过awk循环实现" class="headerlink" title="方法3：通过awk循环实现"></a>方法3：通过awk循环实现</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">chars="I am Aoki Today is a nice day It is Wonderful"</span><br><span class="line">echo $chars|awk '&#123;for(i=1;i&lt;=NF;i++) if(length($i)&lt;=6) print $i&#125;'</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><h3 id="批量检查多个网站地址是否正常"><a href="#批量检查多个网站地址是否正常" class="headerlink" title="批量检查多个网站地址是否正常"></a>批量检查多个网站地址是否正常</h3><p>要求：</p><ul><li><p>使用Shell数组的方法实现</p></li><li><p>每10秒进行一次全部检测，无法访问输出报警</p></li><li><p>待检测的地址如下：</p><p><a href="https://wanqbin.xyz">https://wanqbin.xyz</a></p><p><a href="https://www.wanqbin.xyz" target="_blank" rel="noopener">https://www.wanqbin.xyz</a></p><p><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></p></li></ul><p>解题思路：</p><ul><li>把URL定义成数组，形成函数</li><li>编写URL检查和脚本函数，传入数组的元素，即URL</li><li>组合整个案例，编写main函数，每隔10秒检查一次</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions </span><br><span class="line"></span><br><span class="line">check_count=0</span><br><span class="line">url_list=(</span><br><span class="line">https://wanqbin.xyz</span><br><span class="line">https://www.wanqbin.xyz</span><br><span class="line">https://www.baidu.com</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">function wait()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e "\033[31m 3秒后，执行检查URL操作.\033[0m"</span><br><span class="line">    for ((i=0;i&lt;3;i++))</span><br><span class="line">    do</span><br><span class="line">        echo -n "." ;sleep 1</span><br><span class="line">    done</span><br><span class="line">    echo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function check_Url()</span><br><span class="line">&#123;</span><br><span class="line">    wait</span><br><span class="line">    for ((i=0;i&lt;`echo $&#123;#url_list[*]&#125;`;i++))</span><br><span class="line">    do</span><br><span class="line">        wget -o /dev/null -T 3 --tries=1 --spider $&#123;url_list[$i]&#125; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        if [ $? -eq 0 ];then</span><br><span class="line">            action "$&#123;url_list[$i]&#125;" /bin/true</span><br><span class="line">        else</span><br><span class="line">            action "$&#123;url_list[$i]&#125;" /bin/false </span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    ((check_count++))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()</span><br><span class="line">&#123;</span><br><span class="line">    while true</span><br><span class="line">    do</span><br><span class="line">        check_Url</span><br><span class="line">        echo -e "\033[35m--------------------check count:$&#123;check_count&#125;------------\033[0m"</span><br><span class="line">        sleep 10</span><br><span class="line">    done </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure><p><img src="/2019/shell数组/URL%E6%A3%80%E6%B5%8B.PNG" alt="执行结果"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Shell数组&quot;&gt;&lt;a href=&quot;#一、Shell数组&quot; class=&quot;headerlink&quot; title=&quot;一、Shell数组&quot;&gt;&lt;/a&gt;一、Shell数组&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;Shell数组的定义&quot;&gt;&lt;a href=&quot;#Shell数
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell数组" scheme="https://wanqbin.xyz/tags/Shell%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本的if条件语句</title>
    <link href="https://wanqbin.xyz/2019/Shell%E8%84%9A%E6%9C%AC%E7%9A%84if%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://wanqbin.xyz/2019/Shell脚本的if条件语句/</id>
    <published>2019-11-30T08:12:00.000Z</published>
    <updated>2019-11-30T08:16:37.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、if条件语句"><a href="#一、if条件语句" class="headerlink" title="一、if条件语句"></a>一、if条件语句</h2><h3 id="if条件语句的语法："><a href="#if条件语句的语法：" class="headerlink" title="if条件语句的语法："></a>if条件语句的语法：</h3><ol><li><h4 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if &lt;条件表达式&gt;; then</span><br><span class="line">指令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><h4 id="双分支结构"><a href="#双分支结构" class="headerlink" title="双分支结构"></a>双分支结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if &lt;条件表达式&gt;; then</span><br><span class="line">指令集</span><br><span class="line">else</span><br><span class="line">指令集</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><h4 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if &lt;条件表达式&gt;; then</span><br><span class="line">指令1</span><br><span class="line">elif &lt;条件表达式&gt;;then</span><br><span class="line">指令2</span><br><span class="line">else</span><br><span class="line">指令3</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>注意多分支<code>elif</code>的写法，每个<code>elif</code>都要带有then</li><li>最后结尾的else后面没有then</li></ul></li></ol><h3 id="if条件语句多种条件表达式语法"><a href="#if条件语句多种条件表达式语法" class="headerlink" title="if条件语句多种条件表达式语法"></a>if条件语句多种条件表达式语法</h3><ol><li><h4 id="test条件表达式"><a href="#test条件表达式" class="headerlink" title="test条件表达式"></a>test条件表达式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if test 表达式; then</span><br><span class="line">指令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="[]条件表达式"></a>[]条件表达式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ 字符串或算数表达式 ];then</span><br><span class="line">指令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><h4 id="条件表达式-1"><a href="#条件表达式-1" class="headerlink" title="[[]]条件表达式"></a>[[]]条件表达式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [[ 字符串表达式 ]]l;then</span><br><span class="line">指令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><h4 id="条件表达式-2"><a href="#条件表达式-2" class="headerlink" title="(())条件表达式"></a>(())条件表达式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (( 算数表达式 ));then</span><br><span class="line">指令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><h4 id="命令表达式"><a href="#命令表达式" class="headerlink" title="命令表达式"></a>命令表达式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if 命令;then </span><br><span class="line">指令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">if [ -f /root/myShell/obShell/checkInt1.sh ];then</span><br><span class="line">    echo "该文件存在"</span><br><span class="line">else</span><br><span class="line">    echo "该文件不存在"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ -d /root/myShell/obShell/test/ ] ;then</span><br><span class="line">    echo "该目录存在"</span><br><span class="line">else</span><br><span class="line">    echo "该目录不存在"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell脚本的if条件语句/if%E6%B5%8B%E8%AF%95.PNG" alt="执行结果"></p><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><p>利用Shell脚本判断系统剩余内存的大小，如果低于100MB，就邮件发送给系统管理员</p><p>设计思路：</p><ul><li>获取当前系统剩余内存的值</li><li>配置邮件报警</li><li>判断取到的值是否小于100MB，如果小于100MB，就报警</li><li>实现shell脚本</li></ul><p>实现过程：</p><ul><li><p>获取内存大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br><span class="line">free -m| awk 'NR==3 &#123;print $NF&#125;'</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell脚本的if条件语句/%E8%8E%B7%E5%8F%96%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F.PNG" alt="获取内存大小"></p></li><li><p>发送测试邮件</p><p><img src="/2019/Shell脚本的if条件语句/%E9%82%AE%E4%BB%B6%E6%B5%8B%E8%AF%95.png" alt="测试邮件结果"></p></li></ul><ul><li><p>编写脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">FREEMEM=`free -m|awk 'NR==3 &#123;print $NF&#125;'`  #获取剩余内存</span><br><span class="line">CHARS="Current memory is $FREEMEM."</span><br><span class="line"></span><br><span class="line">if [ $FREEMEM -lt 1024 ];then</span><br><span class="line">    echo $CHARS|tee /tmp/message.txt  #屏幕输出，并写入文件</span><br><span class="line">    mail -s "`date +%F-%T` $CHARS"  aoki3352@163.com &lt; /tmp/message.txt</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><p>  <img src="/2019/Shell脚本的if条件语句/%E8%84%9A%E6%9C%AC%E7%BB%93%E6%9E%9C.png" alt="执行结果"></p><h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><p>使用if条件语句比较两个整数的大小。使用传参的方法时，需要对传参个数及传入的参数是否为整数进行判断。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">A=$1 </span><br><span class="line">B=$2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>判断参数个数</span><br><span class="line">if [ $# -ne 2 ];then</span><br><span class="line">    echo "USAGE:$0 arg1 arg2"</span><br><span class="line">    exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>判断A是否为整数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expr $A+1 &amp;&gt;/dev/null </span><br><span class="line">RETVAL1=$?</span><br><span class="line">expr $B+1 &amp;&gt;/dev/null </span><br><span class="line">RETVAL2=$?</span><br><span class="line"></span><br><span class="line">if [ $RETVAL1 -ne 0 -a $RETVAL2 -ne 0 ];then</span><br><span class="line">    echo "Please input two int argments"</span><br><span class="line">    exit 3</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>比较大小</span><br><span class="line"></span><br><span class="line">if [ $A -lt $B ];then</span><br><span class="line">    echo "$A&lt;$B"</span><br><span class="line">elif [ $A -eq $B ];then</span><br><span class="line">    echo "$A=$B"</span><br><span class="line">else </span><br><span class="line">    echo "$A&gt;$B"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2019/Shell脚本的if条件语句/iftest%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.PNG" alt="执行结果"></p><h3 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h3><p>判断字符串是否为数字的思路。</p><ol><li><h4 id="使用sed加正则表达式"><a href="#使用sed加正则表达式" class="headerlink" title="使用sed加正则表达式"></a>使用sed加正则表达式</h4><p>判断思路：删除一个字符串中的所有数字，看字符串的长度是否为0，如果不为0，则说明不是整数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# [ -n "`echo Aoki1234 |sed 's/[0-9]//g'`" ] &amp;&amp; echo char || echo int</span><br><span class="line">char</span><br><span class="line">[root@aoki obShell]# [ -n "`echo 1234 |sed 's/[0-9]//g'`" ] &amp;&amp; echo char || echo int    </span><br><span class="line">int</span><br><span class="line">[root@aoki obShell]# [ -z "`echo Aoki1234 |sed 's/[0-9]//g'`" ] &amp;&amp; echo int || echo char</span><br><span class="line">char</span><br><span class="line">[root@aoki obShell]# [ -z "`echo 1234 |sed 's/[0-9]//g'`" ] &amp;&amp; echo int || echo char    </span><br><span class="line">int</span><br><span class="line">[root@aoki obShell]#</span><br></pre></td></tr></table></figure></li><li><h4 id="变量的子串替换加正则表达式"><a href="#变量的子串替换加正则表达式" class="headerlink" title="变量的子串替换加正则表达式"></a>变量的子串替换加正则表达式</h4><p>判断思路：如果num的长度不为0，并且把num中的非数字部分删除，然后再看结果是不是等于num本身，如果两者都成立，则num就是数字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# [ -n "$num" -a "$num" = "$&#123;num//[^0-9]/&#125;" ] &amp;&amp; echo int || echo char  </span><br><span class="line">int</span><br><span class="line">[root@aoki obShell]# num=Aoki123344</span><br><span class="line">[root@aoki obShell]# [ -n "$num" -a "$num" = "$&#123;num//[^0-9]/&#125;" ] &amp;&amp; echo int || echo char</span><br><span class="line">char</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h3><p>判断字符串长度是否为0的思路</p><ol><li><h4 id="使用字符串表达式-z和-n"><a href="#使用字符串表达式-z和-n" class="headerlink" title="使用字符串表达式-z和-n"></a>使用字符串表达式-z和-n</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# [ -z "Aoki" ] &amp;&amp; echo 0 || echo 1</span><br><span class="line">1</span><br><span class="line">[root@aoki obShell]# [ -n "Aoki" ] &amp;&amp; echo 1 || echo 0</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><h4 id="使用变量子串判断"><a href="#使用变量子串判断" class="headerlink" title="使用变量子串判断"></a>使用变量子串判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# char=Aoki</span><br><span class="line">[root@aoki obShell]# [ $&#123;#char&#125; -eq 0 ] &amp;&amp; echo 0 ||echo 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><h4 id="使用expr-length函数判断"><a href="#使用expr-length函数判断" class="headerlink" title="使用expr length函数判断"></a>使用expr length函数判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# [ `expr length "Aoki" ` -eq 0 ] &amp;&amp; echo 0 || echo 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><h4 id="使用wc的-L参数统计判断"><a href="#使用wc的-L参数统计判断" class="headerlink" title="使用wc的-L参数统计判断"></a>使用wc的-L参数统计判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# [ `echo Aoki |wc -L ` -eq 0 ] &amp;&amp; echo 0 || echo 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><h4 id="使用awk-length函数判断"><a href="#使用awk-length函数判断" class="headerlink" title="使用awk length函数判断"></a>使用awk length函数判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# [ `echo Aoki|awk '&#123;print length&#125;'` -eq 0 ] &amp;&amp; echo 0 || echo 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、if条件语句&quot;&gt;&lt;a href=&quot;#一、if条件语句&quot; class=&quot;headerlink&quot; title=&quot;一、if条件语句&quot;&gt;&lt;/a&gt;一、if条件语句&lt;/h2&gt;&lt;h3 id=&quot;if条件语句的语法：&quot;&gt;&lt;a href=&quot;#if条件语句的语法：&quot; class=&quot;
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell脚本if语句" scheme="https://wanqbin.xyz/tags/Shell%E8%84%9A%E6%9C%ACif%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Shell函数</title>
    <link href="https://wanqbin.xyz/2019/shell%E5%87%BD%E6%95%B0/"/>
    <id>https://wanqbin.xyz/2019/shell函数/</id>
    <published>2019-11-30T08:12:00.000Z</published>
    <updated>2019-11-30T08:19:58.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Shell函数"><a href="#一、Shell函数" class="headerlink" title="一、Shell函数"></a>一、Shell函数</h2><h3 id="Shell函数语法："><a href="#Shell函数语法：" class="headerlink" title="Shell函数语法："></a>Shell函数语法：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">指令</span><br><span class="line">return n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shell函数的优势：</p><ul><li>把相同的程序段定义成函数，可以减少整个程序的代码量，提升开发效率</li><li>增加程序的可读性，易读性，提升管理效率</li></ul><h3 id="Shell函数的执行："><a href="#Shell函数的执行：" class="headerlink" title="Shell函数的执行："></a>Shell函数的执行：</h3><ol><li><h4 id="执行不带参数的函数时，直接输入函数名即可。"><a href="#执行不带参数的函数时，直接输入函数名即可。" class="headerlink" title="执行不带参数的函数时，直接输入函数名即可。"></a>执行不带参数的函数时，直接输入函数名即可。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>执行Shell函数时，函数名前的function和函数后的小括号都不要带</li><li>函数的定义必须在要执行的程序前面定义或加载</li><li>Shell执行系统中各种程序的执行顺序为：系统别名 -&gt;函数-&gt;系统命令-&gt;可执行文件</li><li>函数执行时，会和它调用的脚本共用变量，也可以为函数设定局部变量及特殊位置参数</li><li>在Shell函数里面，return命令的功能与exit类似，return的作用是退出函数，而exit是退出脚本文件</li><li>return语句会返回一个退出值（即返回值）给调用函数的当前程序，而exit会返回一个退出值给执行程序的当前Shell</li><li>如果将函数存放在独立的文件中，被脚本加载使用时，需要使用source或”.”来加载</li><li>在函数内一般使用local定义局部变量，这些变量离开函数后就会消失</li></ul></li><li><h4 id="带参数的函数执行方法："><a href="#带参数的函数执行方法：" class="headerlink" title="带参数的函数执行方法："></a>带参数的函数执行方法：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名 参数1 参数2</span><br></pre></td></tr></table></figure><p>函数后接参数的说明：</p><ul><li>Shell的位置参数都可以作为函数的参数来使用</li><li>此时父脚本的参数临时地被函数参数所掩盖或隐藏</li><li>$0比较特殊，它仍然是父脚本地名称</li><li>当函数执行完成时，原来地命令行脚本地参数即可恢复</li><li>函数的参数变量是在函数体里面定义的</li></ul></li></ol><h2 id="二、Shell函数示例"><a href="#二、Shell函数示例" class="headerlink" title="二、Shell函数示例"></a>二、Shell函数示例</h2><ol><li><h3 id="分离函数体和执行函数的脚本文件"><a href="#分离函数体和执行函数的脚本文件" class="headerlink" title="分离函数体和执行函数的脚本文件"></a>分离函数体和执行函数的脚本文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">. /root/myShell/obShell/function1.sh </span><br><span class="line">source /root/myShell/obShell/function2.sh </span><br><span class="line">fc1</span><br><span class="line">h</span><br></pre></td></tr></table></figure><p><img src="/2019/shell函数/%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C1.PNG" alt="执行结果"></p></li><li><h3 id="URL检测脚本"><a href="#URL检测脚本" class="headerlink" title="URL检测脚本"></a>URL检测脚本</h3><p>将函数的传参转换成脚本文件命令行传参，判断指定的URL是否存在异常。</p><p>设计思路及实现：</p><ul><li><p>实现脚本传参，检查Web URL是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>判断传参个数是否为1个</span><br><span class="line"></span><br><span class="line">if [ $# -ne 1 ];then</span><br><span class="line">    echo $"USAGE: $0 url"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>利用wget进行访问测试</span><br><span class="line">wget --spider -q -o /dev/null --tries=1 -T 5 $1</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">    echo "$1 is yes"</span><br><span class="line">else</span><br><span class="line">    echo "$1 is no"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="/2019/shell函数/URL%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC1.PNG" alt="执行结果"></p></li><li><p>将上述检测功能写成函数，并将函数传参转换成脚本命令行传参，判断任意指定的URL是否存在异常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions  #引入系统函数库</span><br><span class="line"></span><br><span class="line">function usage()</span><br><span class="line">&#123;</span><br><span class="line">    echo $"UASGE:$0 url"</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function checkUrl()</span><br><span class="line">&#123;</span><br><span class="line">    wget --spider -q -o /dev/null --tries=1 -T 5 $1</span><br><span class="line">    if [ $? -eq 0 ];then </span><br><span class="line">        action "$1 is yes." /bin/true   #使用系统函数美化输出结果</span><br><span class="line">    else</span><br><span class="line">        action "$1 is no." /bin/false </span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()</span><br><span class="line">&#123;</span><br><span class="line">    if [ $# -ne 1 ];then</span><br><span class="line">        usage</span><br><span class="line">    else</span><br><span class="line">        checkUrl $1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main $*  #将命令行接收到的所有参数作为函数参数传递给函数内部</span><br></pre></td></tr></table></figure><p><img src="/2019/shell函数/URL%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC.PNG" alt="执行结果"></p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Shell函数&quot;&gt;&lt;a href=&quot;#一、Shell函数&quot; class=&quot;headerlink&quot; title=&quot;一、Shell函数&quot;&gt;&lt;/a&gt;一、Shell函数&lt;/h2&gt;&lt;h3 id=&quot;Shell函数语法：&quot;&gt;&lt;a href=&quot;#Shell函数语法：&quot; cla
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell函数" scheme="https://wanqbin.xyz/tags/Shell%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本的case条件语句</title>
    <link href="https://wanqbin.xyz/2019/shell%E8%84%9A%E6%9C%AC%E7%9A%84case%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://wanqbin.xyz/2019/shell脚本的case条件语句/</id>
    <published>2019-11-30T08:12:00.000Z</published>
    <updated>2019-11-30T08:21:49.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、case条件语句"><a href="#一、case条件语句" class="headerlink" title="一、case条件语句"></a>一、case条件语句</h2><p>case条件语句相当于多分支的<code>if/elif/else</code>条件语句，但是它比这些条件语句看起来更规范更工整。</p><p>在case语句中，程序会将case获取的变量的值与表达式部分的值1、值2、值3等逐个进行比较，如果获取的变量和某个值相匹配，就会执行值后面对应的指令，直到执行到双分号（<code>;;</code>）才停止，然后再跳出case语句主体，执行case语句后面的命令。</p><p>如果没有找到匹配变量的任何值，则执行<code>*)</code>后面的指令，直到遇到双分号或case结束，这部分相当于if多分支语句中最后的else语句部分。另外，case语句中表达式对应值的部分，还可以使用管道等更多功能来匹配。</p><ol><li><h3 id="case条件语句的语法"><a href="#case条件语句的语法" class="headerlink" title="case条件语句的语法"></a>case条件语句的语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">case "变量" in</span><br><span class="line">值1)</span><br><span class="line">指令</span><br><span class="line">;;</span><br><span class="line">值2)</span><br><span class="line">指令</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">指令</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><h3 id="Linux中给字体加颜色的命令"><a href="#Linux中给字体加颜色的命令" class="headerlink" title="Linux中给字体加颜色的命令"></a>Linux中给字体加颜色的命令</h3><p><img src="/2019/shell脚本的case条件语句/Linux%E4%B8%AD%E7%BB%99%E5%AD%97%E4%BD%93%E5%8A%A0%E9%A2%9C%E8%89%B2.PNG" alt="给字体加颜色"></p><p>在上面的命令中：</p><ul><li>echo -e可以识别转义字符，这里将识别特殊字符的函数，并输出</li><li>\E可以使用\033代替</li><li>”[1”数字1代表加粗显示</li><li>31m表示红色字体，可以换成不同的数字，以代表不同的意思</li><li>“red”代表待设置的内容</li><li>“[0m”表示关闭所有属性，可以换成不同的数字，以代表不同的意思</li><li>\33[0m 表示关闭所有属性</li><li>\33 [1m 表示设置高亮度</li><li>\33 [4m 表示设置下划线</li><li>\33 [5m 表示设置闪烁</li><li>\33 [7m 表示反显</li><li>\33 [8m 表示消隐</li><li>\33[30m——\33[37m表示设置前景色</li><li>\33[40m——\33[47m表示设置背景色</li></ul></li></ol><p>   <img src="/2019/shell脚本的case条件语句/Linux%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2.PNG" alt="字体颜色"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、case条件语句&quot;&gt;&lt;a href=&quot;#一、case条件语句&quot; class=&quot;headerlink&quot; title=&quot;一、case条件语句&quot;&gt;&lt;/a&gt;一、case条件语句&lt;/h2&gt;&lt;p&gt;case条件语句相当于多分支的&lt;code&gt;if/elif/else&lt;/cod
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell脚本case语句" scheme="https://wanqbin.xyz/tags/Shell%E8%84%9A%E6%9C%ACcase%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本的while循环和until循环</title>
    <link href="https://wanqbin.xyz/2019/shell%E8%84%9A%E6%9C%AC%E7%9A%84while%E5%BE%AA%E7%8E%AF%E5%92%8Cuntil%E5%BE%AA%E7%8E%AF/"/>
    <id>https://wanqbin.xyz/2019/shell脚本的while循环和until循环/</id>
    <published>2019-11-30T08:12:00.000Z</published>
    <updated>2019-11-30T08:24:20.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、while循环语句和until语句"><a href="#一、while循环语句和until语句" class="headerlink" title="一、while循环语句和until语句"></a>一、while循环语句和until语句</h2><ol><li><h3 id="while循环语句的基本语法："><a href="#while循环语句的基本语法：" class="headerlink" title="while循环语句的基本语法："></a>while循环语句的基本语法：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while &lt;条件表达式&gt;</span><br><span class="line">do</span><br><span class="line">指令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>while循环语句会对紧跟在while命令后的条件表达式进行判断，如果该条件表达式成立，则执行while循环体中的命令或语句，每一次执行到done时就会重新判断while表达式是否成立，直到条件表达式不成立时才会跳出while循环体。如果一开始条件表达式就不成立，那么程序就不会进入循环体。</p></li><li><h3 id="until循环语句的语法为："><a href="#until循环语句的语法为：" class="headerlink" title="until循环语句的语法为："></a>until循环语句的语法为：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until &lt;条件表达式&gt;</span><br><span class="line">do</span><br><span class="line">指令</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>until循环语句的用法与while循环语句的用法类似，区别是until会在条件表达式不成立时，进入循环执行指令；条件表达式成立时，终止循环。</p></li></ol><h2 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h2><ol><li><h3 id="输出1到10"><a href="#输出1到10" class="headerlink" title="输出1到10"></a>输出1到10</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">A=1</span><br><span class="line">while [ $A -le 10 ]</span><br><span class="line">do</span><br><span class="line">    echo $A</span><br><span class="line">    A=$[A+1]</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">A=1</span><br><span class="line"></span><br><span class="line">until [ $A -gt 10 ]</span><br><span class="line">do </span><br><span class="line">    echo $A</span><br><span class="line">    A=$[A+1]</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>   <img src="/2019/shell脚本的while循环和until循环/whileTest%E5%92%8CuntilTest%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.PNG" alt="执行结果"></p><ol start="2"><li><h3 id="每隔两秒输出一次系统负载情况"><a href="#每隔两秒输出一次系统负载情况" class="headerlink" title="每隔两秒输出一次系统负载情况"></a>每隔两秒输出一次系统负载情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash </span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    uptime</span><br><span class="line">    sleep 2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的while循环和until循环/%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD.PNG" alt="执行结果"></p></li><li><h3 id="后台运行脚本，并输出系统负载到文件中"><a href="#后台运行脚本，并输出系统负载到文件中" class="headerlink" title="后台运行脚本，并输出系统负载到文件中"></a>后台运行脚本，并输出系统负载到文件中</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while [ 1 ]</span><br><span class="line">do</span><br><span class="line">    uptime &gt;&gt; /root/myShell/obShell/uptime.log</span><br><span class="line">    usleep 2000000 #休息2秒</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的while循环和until循环/%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6.PNG" alt="系统负载写入文件执行结果"></p></li><li><h3 id="Shell脚本后台运行"><a href="#Shell脚本后台运行" class="headerlink" title="Shell脚本后台运行"></a>Shell脚本后台运行</h3><p>脚本运行的相关用法和说明</p><table><thead><tr><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>sh checkSysLoad1.sh &amp;</td><td>把脚本放在后台执行</td></tr><tr><td>ctrl+c</td><td>停止执行当前脚本或任务</td></tr><tr><td>ctrl+z</td><td>暂停执行当前脚本或任务</td></tr><tr><td>bg</td><td>把当前脚本或任务放到后台执行</td></tr><tr><td>fg</td><td>把当前脚本放到前台执行，如果有多个任务，可以使用fg加任务编号调出对应的脚本任务，如 <code>fg 2</code></td></tr><tr><td>jobs</td><td>查看当前执行的脚本或任务</td></tr><tr><td>kill</td><td>关闭执行的脚本任务，即以<code>kill %任务编号</code>的形式关闭脚本，这个任务编号，可以通过jobs来获得</td></tr></tbody></table><p><img src="/2019/shell脚本的while循环和until循环/%E8%84%9A%E6%9C%AC%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86.PNG" alt="执行结果"></p><p>更多有关进程管理的Linux相关命令如下：</p><ul><li>kill、killall,、pkill：杀掉进程</li><li>ps：查看进程</li><li>pstree：查看进程树</li><li>top：显示进程</li><li>renice：改变优先权</li><li>nohup：用户退出系统之后继续工作</li><li>pgrep：查找匹配条件的进程</li><li>strace：跟踪一个进程的系统调用情况</li><li>ltreace：跟踪进程调用库函数的情况</li></ul></li><li><h3 id="使用while守护进程的方式监控网站，每隔10秒确定一次网站是否正常"><a href="#使用while守护进程的方式监控网站，每隔10秒确定一次网站是否正常" class="headerlink" title="使用while守护进程的方式监控网站，每隔10秒确定一次网站是否正常"></a>使用while守护进程的方式监控网站，每隔10秒确定一次网站是否正常</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions </span><br><span class="line">if [ $# -ne 1 ];then</span><br><span class="line">    echo $"USAGE:$0 url"</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    if [ `curl -o /dev/null --connect-timeout 5 -s -w "%&#123;http_code&#125;" $1 |egrep -w "200|301|302"|wc -l` -ne 1 ];then</span><br><span class="line">        #对传入的URL参数获取状态码，过滤200、301、302任意之一转为数字，如果不等于1，则表示状态i先联系不对</span><br><span class="line">        action "$1 is error." /bin/false </span><br><span class="line">    else</span><br><span class="line">        action "$1 is ok." /bin/true </span><br><span class="line">    fi</span><br><span class="line">    sleep 10  #休息10秒钟</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/shell脚本的while循环和until循环/while%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.PNG" alt="执行结果"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、while循环语句和until语句&quot;&gt;&lt;a href=&quot;#一、while循环语句和until语句&quot; class=&quot;headerlink&quot; title=&quot;一、while循环语句和until语句&quot;&gt;&lt;/a&gt;一、while循环语句和until语句&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell脚本while循环" scheme="https://wanqbin.xyz/tags/Shell%E8%84%9A%E6%9C%ACwhile%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="Shell脚本until循环" scheme="https://wanqbin.xyz/tags/Shell%E8%84%9A%E6%9C%ACuntil%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本的条件测试</title>
    <link href="https://wanqbin.xyz/2019/Shell%E8%84%9A%E6%9C%AC%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    <id>https://wanqbin.xyz/2019/Shell脚本的条件测试/</id>
    <published>2019-11-29T14:04:00.000Z</published>
    <updated>2019-11-29T14:06:56.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Shell脚本的条件测试"><a href="#一、Shell脚本的条件测试" class="headerlink" title="一、Shell脚本的条件测试"></a>一、Shell脚本的条件测试</h2><p>通常，在bash的各种条件结构和流程控制结构中都要进行各种测试，然后根据测试结果执行不同的操作，有时也会与if等条件语句相结合，来完成测试判断，以减少程序运行的错误。</p><p>执行条件测试表达式后通常会返回“真”或“假”，就像执行命令后的返回值为0表示真，非0表示假一样。</p><p>在bash编程中，条件测试常用的语法如下：</p><table><thead><tr><th>条件测试语法</th><th>说明</th></tr></thead><tbody><tr><td>语法1：test &lt;测试表达式&gt;</td><td>利用test命令进行条件测试表达式。test命令与&lt;测试表达式&gt;之间至少有一个空格</td></tr><tr><td>语法2：[&lt;测试表达式&gt;]</td><td>通过单中括号进行条件测试表达式的方法，和test命令的用法相同，边界和内容之间至少有一个空格。也是比较推荐的方法。</td></tr><tr><td>语法3：[[&lt;测试表达式&gt;]]</td><td>通过[[]]双中括号进行条件测试表达式的方法。[[]]的边界和内容之间至少有一个空格</td></tr><tr><td>语法4:((&lt;测试表达式&gt;))</td><td>通过(())进行条件测试表达式。一般用于if语句里。(())两端不需要有空格</td></tr></tbody></table><p>注意点：</p><ul><li>语法1中的test命令和语法2中的[]是等价的。语法中的[[]]为扩展的test命令。语法4中的(())常用用于计算。</li><li>在[[]]中可以使用通配符等进行模式匹配，这是区别与其他几种语法格式的地方。</li><li>&amp;&amp;、||、&gt;、&lt;等操作符可以应用于[[]]中，不能应用于[]中，在[]中一般用-a、-o、-gt(用于整数）-lt(用于整数)代替上述操作符。</li><li>对于整数的关系运算，也可以i使用Shell的算数运算符(())</li></ul><p>test条件测试的简单语法及其示例：</p><p>test条件测试的语法格式为：</p><p><code>test &lt;测试表达式&gt;</code></p><p>示例：</p><p><img src="/2019/Shell脚本的条件测试/test%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B1.PNG" alt="test测试1"></p><p><img src="/2019/Shell脚本的条件测试/%5B%5D%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%951.PNG" alt="[]测试"></p><h2 id="二、文件测试表达式"><a href="#二、文件测试表达式" class="headerlink" title="二、文件测试表达式"></a>二、文件测试表达式</h2><p>常用的文件测试操作符如下：</p><table><thead><tr><th>常用文件测试操作符</th><th>说明</th></tr></thead><tbody><tr><td>-d 文件 directory</td><td>文件存在且为目录则为真</td></tr><tr><td>-f 文件 file</td><td>文件存在且为普通文件则为真</td></tr><tr><td>-e 文件 exist</td><td>文件存在则为真</td></tr><tr><td>-r 文件 read</td><td>文件存在且可读为真</td></tr><tr><td>-s 文件 size</td><td>文件存在且文件大小不为0则为真</td></tr><tr><td>-w 文件 write</td><td>文件存在且可写则为真</td></tr><tr><td>-x 文件 executable</td><td>文件存在且可执行则为真</td></tr><tr><td>-L 文件 link</td><td>文件存在且为链接文件则为真</td></tr><tr><td>f1 -nt f2    nt代表newer than</td><td>文件f1比文件f2新则为真，根据文件的修改时间决定</td></tr><tr><td>f1 -ot f2    ot代表older than</td><td>文件f1比文件f2旧则为真，根据文件的修改时间决定</td></tr></tbody></table><p><img src="/2019/Shell脚本的条件测试/%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95.PNG" alt="文件测试"></p><p>测试Shell变量示例：</p><p><img src="/2019/Shell脚本的条件测试/Shell%E5%8F%98%E9%87%8F%E6%B5%8B%E8%AF%95.PNG" alt="测试Shell变量示例"></p><h2 id="三、字符串测试表达式"><a href="#三、字符串测试表达式" class="headerlink" title="三、字符串测试表达式"></a>三、字符串测试表达式</h2><p>字符串测试操作符的作用包括：比较两个字符串是否相同、测试字符串的插画高难度是否为零、字符串是否为NULL等。</p><p>字符串测试操作符</p><table><thead><tr><th>常用字符串测试操作符</th><th>说明</th></tr></thead><tbody><tr><td>-n “字符串”</td><td>若字符串的长度不为0，则为真</td></tr><tr><td>-z “字符串”</td><td>若字符串的长度为0，则为真</td></tr><tr><td>“串1”=”串2”</td><td>若字符串1等于字符串2，则为真</td></tr><tr><td>“串1”!=”串2”</td><td>若字符串1不等于字符串2，则为真</td></tr></tbody></table><p>提示：</p><ul><li>对于字符串的测试，一定要将字符串加双引号后再进行比较。如 <code>[ -n &quot;$myvar&quot; ]</code>,特别是使用[]的场景</li><li>比较符号的两端一定要有空格</li><li>“==”和”!=”可用于比较两个字符串是否相同</li></ul><p><img src="/2019/Shell脚本的条件测试/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B5%8B%E8%AF%95.PNG" alt="字符串测试"></p><p>字符串变量测试：</p><p><img src="/2019/Shell脚本的条件测试/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%98%E9%87%8F%E6%B5%8B%E8%AF%95.PNG" alt="字符串变量测试"></p><h2 id="四、整数二元比较操作符"><a href="#四、整数二元比较操作符" class="headerlink" title="四、整数二元比较操作符"></a>四、整数二元比较操作符</h2><p>整数二元比较操作符使用参考：</p><table><thead><tr><th>在[]以及test中使用的比较符号</th><th>在(())和[[]]中使用的比较符号</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>== 或 =</td><td>相等</td></tr><tr><td>-ne</td><td>!=</td><td>不相等</td></tr><tr><td>-gt</td><td>&gt;</td><td>大于 greater than</td></tr><tr><td>-ge</td><td>&gt;=</td><td>大于等于 greater equal</td></tr><tr><td>-lt</td><td>&lt;</td><td>小于 less than</td></tr><tr><td>-le</td><td>&lt;=</td><td>小于等于 less equal</td></tr></tbody></table><p>说明：</p><ul><li>“=”和“!=”也可以在[]中做比较使用，但在[]中使用包含”&gt;”、”&lt;”的符号时，需要用反斜线转义，有时不转义虽然语法不会报错，但是结果可能会不对</li><li>也可以在[[]]中使用包含“-gt”和“-lt”的符号，但是不建议这样使用</li><li>比较符号两端也要有空格</li></ul><p>示例1：</p><p><img src="/2019/Shell脚本的条件测试/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.PNG" alt="比较运算符"></p><p>示例2：</p><p><img src="/2019/Shell脚本的条件测试/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A62.PNG" alt="比较运算符2"></p><h2 id="五、逻辑操作符"><a href="#五、逻辑操作符" class="headerlink" title="五、逻辑操作符"></a>五、逻辑操作符</h2><p>逻辑操作符如下：</p><table><thead><tr><th>在[]和test中使用的操作符</th><th>在[[]]和(())中使用的操作符</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>&amp;&amp;</td><td>and 两端都为真，则结果为真</td></tr><tr><td>-o</td><td>||</td><td>or 或 两端有一个为真，则结果为真</td></tr><tr><td>!</td><td>!</td><td>not 非 两端相反，则结果为真</td></tr></tbody></table><p>提示：</p><ul><li>逻辑操作符前后的表达式是否成立，一般用增加来表示</li><li>“!”的中文意思是反，即与一个逻辑值相反的逻辑值</li><li>-a  前后两个逻辑值都为真，综合返回值为真</li><li>-o 前后两个逻辑值只要有一个为真，返回值就为真。</li><li>连接包含 []、test或[[]]的表达式可用&amp;&amp;或||</li></ul><p><img src="/2019/Shell脚本的条件测试/%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6.PNG" alt="逻辑操作符"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Shell脚本的条件测试&quot;&gt;&lt;a href=&quot;#一、Shell脚本的条件测试&quot; class=&quot;headerlink&quot; title=&quot;一、Shell脚本的条件测试&quot;&gt;&lt;/a&gt;一、Shell脚本的条件测试&lt;/h2&gt;&lt;p&gt;通常，在bash的各种条件结构和流程控制结构
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell脚本条件测试" scheme="https://wanqbin.xyz/tags/Shell%E8%84%9A%E6%9C%AC%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Shell变量的数值运算</title>
    <link href="https://wanqbin.xyz/2019/hell%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/"/>
    <id>https://wanqbin.xyz/2019/hell变量的数值运算/</id>
    <published>2019-11-29T05:58:00.000Z</published>
    <updated>2019-11-29T06:46:52.053Z</updated>
    
    <content type="html"><![CDATA[<pre><code>## 一、算数运算符</code></pre><h3 id="1-Shell中常见的算数运算符号"><a href="#1-Shell中常见的算数运算符号" class="headerlink" title="1.Shell中常见的算数运算符号"></a>1.Shell中常见的算数运算符号</h3><table><thead><tr><th>算数运算符</th><th>意义</th></tr></thead><tbody><tr><td>+、-</td><td>加、减</td></tr><tr><td>*、/、%</td><td>乘法、除法、取余</td></tr><tr><td>**</td><td>幂</td></tr><tr><td>++、–</td><td>增加，及减少</td></tr><tr><td>!、&amp;&amp;、||</td><td>逻辑反、逻辑与、逻辑或</td></tr><tr><td>&lt;、&lt;=、&gt;、&gt;=</td><td>比较符号</td></tr><tr><td>==、!=、=</td><td>比较符号</td></tr><tr><td>&lt;&lt;、&gt;&gt;</td><td>向左移位、向右移位</td></tr><tr><td>~、|、&amp;、^</td><td>按位取反、按位异或、按位与按位或</td></tr><tr><td>=、+=、-=、*=、/=、%=</td><td>赋值运算符</td></tr></tbody></table><h3 id="2-Shell中常见的算数运算命令"><a href="#2-Shell中常见的算数运算命令" class="headerlink" title="2.Shell中常见的算数运算命令"></a>2.Shell中常见的算数运算命令</h3><table><thead><tr><th>运算操作符与运算命令</th><th>意义</th></tr></thead><tbody><tr><td>(())</td><td>用于整数运算的常用运算符，效率很高</td></tr><tr><td>let</td><td>用于整数运算，类似于(())</td></tr><tr><td>expr</td><td>可用于整数运算，但还有很多其他额外的功能</td></tr><tr><td>bc</td><td>Linux下的一个计算器程序（适合整数及小数运算）</td></tr><tr><td>$[]</td><td>用于整数运算</td></tr><tr><td>awk</td><td>awk既可以用于整数运算，也可以用于小数运算</td></tr><tr><td>declare</td><td>定义变量值和属性，-i参数可以用于定义整形变量，做运算</td></tr></tbody></table><h2 id="二、”-”数值运算命令"><a href="#二、”-”数值运算命令" class="headerlink" title="二、”(())”数值运算命令"></a>二、”(())”数值运算命令</h2><p>“(())”的作用是进行数值运算与数值比较。</p><table><thead><tr><th>运算操作符与运算命令</th><th>意义</th></tr></thead><tbody><tr><td>((i=i+1))</td><td>为运算后赋值，即将i+1的结果赋值给i</td></tr><tr><td>i=$((i+1))</td><td>表示将表达式运算后的结果赋值给i</td></tr><tr><td>((8&gt;7&amp;&amp;5==5))</td><td>进行比较操作，还可以加入逻辑与逻辑或，用于条件判断</td></tr><tr><td>echo $(2+1)</td><td>需要直接输出运算表达式的运算结果时，可以在”(())”的前面加$</td></tr></tbody></table><p>test1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo "$1+$2=$(($1+$2))"</span><br><span class="line"></span><br><span class="line">echo "$1-$2=$(($1-$2))"</span><br><span class="line"></span><br><span class="line">echo "$1*$2=$(($1*$2))"</span><br><span class="line"></span><br><span class="line">echo "$1/$2=$(($1/$2))"</span><br><span class="line"></span><br><span class="line">echo "$1**$2=$(($1**$2))"</span><br></pre></td></tr></table></figure><p><img src="/2019/hell变量的数值运算/%E5%8F%8C%E5%B0%8F%E6%8B%AC%E5%8F%B7test.PNG" alt="执行结果"></p><h2 id="三、let运算命令"><a href="#三、let运算命令" class="headerlink" title="三、let运算命令"></a>三、let运算命令</h2><p>let运算命令的语法格式：</p><p><code>let 赋值表达式</code></p><p>let赋值表达式的功能等同于”((赋值表达式))”</p><p>示例：监控web服务状态，如果访问量两次均失败，则报警。</p><p>mail配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mail.rc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在末尾添加如下内容：</span><br><span class="line">set from=xxxxxx@qq.com</span><br><span class="line">set smtp=smtp.qq.com</span><br><span class="line">set smtp-auth-user="xxxxxx@qq.com"</span><br><span class="line">set smtp-auth-password=xxxxxxxxxxxxxxx</span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">function checkUrl()&#123;</span><br><span class="line">timeout=5</span><br><span class="line">fails=0</span><br><span class="line">success=0</span><br><span class="line">while true </span><br><span class="line">do</span><br><span class="line">        wget --timeout=$timeout --tries=1 https://wanqbin.xyz -q -O /dev/null</span><br><span class="line">        if [ $? -ne 0 ];then</span><br><span class="line">                let fails=fails+1</span><br><span class="line">        else</span><br><span class="line">                let success+=1</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        if [ $success -ge 1 ];then</span><br><span class="line">                echo "success"</span><br><span class="line">                exit 0</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">        if [ $fails -ge 2 ];then</span><br><span class="line">                Critical="sys is down."</span><br><span class="line">                echo $Critical|tee|mail -s "$Critical" aoki3352@163.com</span><br><span class="line">                exit 2</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkUrl</span><br></pre></td></tr></table></figure><p><img src="/2019/hell变量的数值运算/%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6.PNG" alt="执行结果"></p><h2 id="四、expr命令的用法"><a href="#四、expr命令的用法" class="headerlink" title="四、expr命令的用法"></a>四、expr命令的用法</h2><p>expr(evaluate(求值) expression(表达式))命令既可以用于整数运算，也可以用于相关字符串长度、匹配等的运算处理。</p><p>在使用expr时，要注意：</p><ul><li>运算符及用于计算的数字左右都至少有一个空格，否则会报错</li><li>使用称号时，必须使用反斜线屏蔽其特定含义，因为Shell可能会误解星号的含义。</li></ul><p><img src="/2019/hell变量的数值运算/expr%E8%BF%90%E7%AE%97.PNG" alt="示例"></p><p>expr配合变量计算：</p><p>expr在Shell中可配合变量进行计算，但需要用反引号将计算表达式括起来。</p><p><img src="/2019/hell变量的数值运算/expr%E4%BD%BF%E7%94%A8%E5%8F%8D%E6%8B%AC%E5%8F%B7%E8%AE%A1%E7%AE%97.PNG" alt="expr使用反括号计算"></p><p>示例：判断一个变量值或字符串是否为整数</p><p>实现原理：</p><p>利用expr做计算时变量或字符串必须是整数的规则，把一个变量或字符串和一个已知的整数（非0）相加，看命令返回的值是否为0.如果是0，就认为做加法的变量或字符串为整数，否则就不是整数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line">expr $1 + 1 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">[ $? -eq 0 ] &amp;&amp;echo int || echo chars #返回值为0，输出int，返回值不为0，否则输出chars</span><br></pre></td></tr></table></figure><p><img src="/2019/hell变量的数值运算/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B4%E6%95%B0.PNG" alt="执行结果"></p><p>标记：</p><p>/dev/null ：代表空设备文件</p><p>1 &gt; /dev/null 2&gt;&amp;1 语句含义：</p><ul><li>1 &gt; /dev/null ： 首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。</li><li>2&gt;&amp;1 ：接着，标准错误输出重定向（等同于）标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</li></ul><p>示例：通过read读入持续等待输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Author:Created by Aoki</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">        read -p "Please input :" a</span><br><span class="line">        expr $a + 1 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        [ $? -eq 0 ] &amp;&amp; echo int || echo chars</span><br><span class="line">done</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p><img src="/2019/hell变量的数值运算/read%E8%AF%BB%E5%85%A5%E5%B9%B6%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B4%E6%95%B0.PNG" alt="执行结果"></p><p>示例：打印一句话中字符数不大于4的单词</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin.bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Author: Created by Aoki</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for n in I am Aoki who comes from China</span><br><span class="line">do</span><br><span class="line">        if [ `expr length $n` -le 4 ];then</span><br><span class="line">                echo $n</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/hell变量的数值运算/%E6%89%93%E5%8D%B0%E4%B8%80%E5%8F%A5%E8%AF%9D%E4%B8%AD%E5%AD%97%E7%AC%A6%E6%95%B0%E4%B8%8D%E5%A4%A7%E4%BA%8E4.PNG" alt="执行结果"></p><h2 id="五、bc命令"><a href="#五、bc命令" class="headerlink" title="五、bc命令"></a>五、bc命令</h2><p><img src="/2019/hell变量的数值运算/bc.PNG" alt="bc命令"></p><p>注：scale=3表示保留三位小数</p><p>示例：通过一条命令计算输出1+2+3+4+……+10的表达式，并计算结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# seq -s "+" 10  #seq是生成数字序列，-s是指定数字序列之间的分隔符</span><br><span class="line">1+2+3+4+5+6+7+8+9+10</span><br><span class="line">[root@aoki obShell]# echo &#123;1..10&#125; |tr " " "+"    #&#123;1..10&#125;是生成以空格为间隔的数字序列，并交给tr将空格替换为+</span><br><span class="line">1+2+3+4+5+6+7+8+9+10</span><br><span class="line">[root@aoki obShell]#</span><br></pre></td></tr></table></figure><p><img src="/2019/hell变量的数值运算/1%E5%88%B010%E7%9B%B8%E5%8A%A0.PNG" alt="执行结果"></p><h2 id="六、awk命令"><a href="#六、awk命令" class="headerlink" title="六、awk命令"></a>六、awk命令</h2><p>利用awk进行运算的效果也很好，适合小数和整数，特别是命令行计算，尤其是小数，运算很精确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# echo &apos;7.777 3.444&apos; |awk &apos;&#123;print ($1-$2)&#125;&apos;      </span><br><span class="line">4.333</span><br><span class="line">[root@aoki obShell]# echo &apos;123.32 234 2&apos; |awk &apos;&#123;print (($1-$2)/$3)&#125;&apos;</span><br><span class="line">-55.34</span><br><span class="line">[root@aoki obShell]#</span><br></pre></td></tr></table></figure><p><img src="/2019/hell变量的数值运算/awk%E5%91%BD%E4%BB%A4.PNG" alt="执行结果"></p><h2 id="七、-符号的运算"><a href="#七、-符号的运算" class="headerlink" title="七、$[]符号的运算"></a>七、$[]符号的运算</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@aoki obShell]# i=5</span><br><span class="line">[root@aoki obShell]# i=$[i+10]</span><br><span class="line">[root@aoki obShell]# echo $i</span><br><span class="line">15</span><br><span class="line">[root@aoki obShell]# echo $[15*2]</span><br><span class="line">30</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;## 一、算数运算符&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;1-Shell中常见的算数运算符号&quot;&gt;&lt;a href=&quot;#1-Shell中常见的算数运算符号&quot; class=&quot;headerlink&quot; title=&quot;1.Shell中常见的算数运算符号&quot;&gt;&lt;/a&gt;1
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="Shell运算符" scheme="https://wanqbin.xyz/tags/Shell%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Shell中的for循环和while循环</title>
    <link href="https://wanqbin.xyz/2019/Shell%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF%E5%92%8Cwhile%E5%BE%AA%E7%8E%AF/"/>
    <id>https://wanqbin.xyz/2019/Shell中的for循环和while循环/</id>
    <published>2019-11-27T13:50:00.000Z</published>
    <updated>2019-11-30T08:56:13.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、for循环"><a href="#一、for循环" class="headerlink" title="一、for循环"></a>一、for循环</h2><h3 id="1-基本语法："><a href="#1-基本语法：" class="headerlink" title="1.基本语法："></a>1.基本语法：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For 变量 in 字符串</span><br><span class="line">do</span><br><span class="line">语句1</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="2-示例1：for1-sh"><a href="#2-示例1：for1-sh" class="headerlink" title="2.示例1：for1.sh"></a>2.示例1：<strong>for1.sh</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">for i in `seq 1 15`  #反引号，识别为命令</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">        echo -e "\033[32mThe number is $i\033[0m"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell中的for循环和while循环/for1执行结果.PNG" alt="for1执行结果"></p><h3 id="3-示例2：for-sum-sh"><a href="#3-示例2：for-sum-sh" class="headerlink" title="3.示例2：for-sum.sh"></a>3.示例2：<strong>for-sum.sh</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">j=0</span><br><span class="line">for((i=1;i&lt;=100;i++))</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">        j=`expr $i + $j`</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo $j</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell中的for循环和while循环/expr结果.PNG" alt="expr命令"></p><p><img src="/2019/Shell中的for循环和while循环/for-sum执行结果.PNG" alt="for-sum执行结果"></p><p>查看脚本执行过程： <code>sh -x for-sum.sh</code></p><p><img src="/2019/Shell中的for循环和while循环/shell脚本执行过程.PNG" alt="shell脚本执行过程"></p><h3 id="4-示例3：create-manylogs-sh"><a href="#4-示例3：create-manylogs-sh" class="headerlink" title="4.示例3：create-manylogs.sh"></a>4.示例3：<strong>create-manylogs.sh</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">for((i=100;i&lt;=102;i++))</span><br><span class="line">do</span><br><span class="line">        FILE=$i.log</span><br><span class="line">        if [ ! -f $FILE ];then</span><br><span class="line">                touch /root/shell/test1/$FILE</span><br><span class="line">        else</span><br><span class="line">                continue;</span><br><span class="line">        fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell中的for循环和while循环/crate-log执行结果.PNG" alt="create-manylogs执行结果"></p><h3 id="5-示例4：-tar-logs-sh——找到相关log，然后批量打包"><a href="#5-示例4：-tar-logs-sh——找到相关log，然后批量打包" class="headerlink" title="5.示例4： tar-logs.sh——找到相关log，然后批量打包"></a>5.示例4： <strong>tar-logs.sh</strong>——找到相关log，然后批量打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">for i in `find /root/shell/test1 -name "*.log"`</span><br><span class="line">do</span><br><span class="line">        tar -cvzf $i.tar.gz $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p> <img src="/2019/Shell中的for循环和while循环/打包logs.PNG" alt="打包结果"></p><h3 id="6-示例5：transfer-files-sh——批量传输文件"><a href="#6-示例5：transfer-files-sh——批量传输文件" class="headerlink" title="6.示例5：transfer-files.sh——批量传输文件"></a>6.示例5：<strong>transfer-files.sh</strong>——批量传输文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">for i in `seq $1 $2`</span><br><span class="line">do</span><br><span class="line">        scp -r /root/shell/transferFiles root@192.168.43.$i:/tmp/</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell中的for循环和while循环/批量传输文件.PNG" alt="传输过程"></p><p><img src="/2019/Shell中的for循环和while循环/61传输结果.PNG" alt="传输结果"></p><p><img src="/2019/Shell中的for循环和while循环/62传输结果.PNG" alt="传输结果2"></p><h2 id="二、while循环"><a href="#二、while循环" class="headerlink" title="二、while循环"></a>二、while循环</h2><h3 id="1-示例1：while1-sh"><a href="#1-示例1：while1-sh" class="headerlink" title="1.示例1：while1.sh"></a>1.示例1：<strong>while1.sh</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line">while [[ $i -lt 10 ]]</span><br><span class="line">do</span><br><span class="line">        echo "The number is $i"</span><br><span class="line">        ((i++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell中的for循环和while循环/while循环执行结果.PNG" alt="执行结果"></p><h3 id="2-read命令："><a href="#2-read命令：" class="headerlink" title="2.read命令："></a>2.read命令：</h3><p><img src="/2019/Shell中的for循环和while循环/read命令.PNG" alt="read命令图示"></p><h3 id="3-示例2：while2-sh"><a href="#3-示例2：while2-sh" class="headerlink" title="3.示例2：while2.sh"></a>3.示例2：<strong>while2.sh</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">        echo $line</span><br><span class="line">done &lt;/etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell中的for循环和while循环/while2执行结果.PNG" alt="while2执行结果"></p><h3 id="4-示例3：while3-sh"><a href="#4-示例3：while3-sh" class="headerlink" title="4.示例3：while3.sh"></a>4.示例3：<strong>while3.sh</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>author by Aoki</span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">        IP=`echo $line |awk '&#123;print $2&#125;'`   #取第二列</span><br><span class="line">        echo -e "\033[32mscp -r /tmp/test.txt root@$IP:/tmp \033[0m"</span><br><span class="line">done &lt; IPList.txt</span><br></pre></td></tr></table></figure><p><strong>IPList.txt</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 192.168.43.51 /tmp/ /root/shell/</span><br><span class="line">2 192.168.43.61 /tmp/ /root/shell/</span><br><span class="line">3 192.168.43.62 /tmp/ /root/shell/</span><br></pre></td></tr></table></figure><p><img src="/2019/Shell中的for循环和while循环/while3执行结果.PNG" alt="执行结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、for循环&quot;&gt;&lt;a href=&quot;#一、for循环&quot; class=&quot;headerlink&quot; title=&quot;一、for循环&quot;&gt;&lt;/a&gt;一、for循环&lt;/h2&gt;&lt;h3 id=&quot;1-基本语法：&quot;&gt;&lt;a href=&quot;#1-基本语法：&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="shell" scheme="https://wanqbin.xyz/tags/shell/"/>
    
      <category term="for循环" scheme="https://wanqbin.xyz/tags/for%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="while循环" scheme="https://wanqbin.xyz/tags/while%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>Shell及其基本语法【一】</title>
    <link href="https://wanqbin.xyz/2019/shell%E5%8F%8A%E5%85%B6%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E3%80%90%E4%B8%80%E3%80%91/"/>
    <id>https://wanqbin.xyz/2019/shell及其基本语法【一】/</id>
    <published>2019-11-27T07:50:00.000Z</published>
    <updated>2019-11-27T13:52:21.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Shell是什么？"><a href="#一、Shell是什么？" class="headerlink" title="一、Shell是什么？"></a>一、Shell是什么？</h2><p>Shell是操作系统的最外层，Shell可以合并变成语言以控制进程和文件，以及启动和控制其他程序，shell通过更难过提示您输入，向操作系统解释该输入，然后处理来自操作系统的任何结果输出来管理您与操作系统之间的交互。简单来说，Shell就是一个用户跟操作系统之间的一个命令解释器。</p><p>Shell是用户与Linux操作系统之间沟通的桥梁。用户可以输入命令执行，又可以利用Shell脚本变成去运行。</p><h2 id="二、Shell编程之变量"><a href="#二、Shell编程之变量" class="headerlink" title="二、Shell编程之变量"></a>二、Shell编程之变量</h2><p>Shell是非类型的解释性语言。Shell给一个变量赋值，实际上即使定义了变量，在Linux支持的所有shell中，都可以用复制符号（=）为变量赋值。</p><p>Shell变量可分为两类：局部变量和环境变量。</p><ul><li>局部变量只在创建它们的shell脚本中使用。</li><li>环境变量则可以在创建它们的shell及其派生出来的任意子进程中使用。</li><li>有些变量是用户创建的，其他的则是专用shell变量。</li></ul><p>first_shell.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> !/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Filename :first_shell.sh</span><br><span class="line"><span class="meta">#</span>auto echo hello world</span><br><span class="line"><span class="meta">#</span>by author Aoki</span><br><span class="line"></span><br><span class="line">echo "Hello world"</span><br></pre></td></tr></table></figure><ul><li>$0 当前程序的名称</li><li>$n 当前程序的第n个参数，n=1,2,3……</li><li>$* 当前程序的所有参数（不包括程序本身）</li><li>$# 当前程序的参数个数（不包括程序本身）</li><li>$? 命令或程序执行完后的状态，一般返回0表示执行成功</li><li>UID 当前用户的UID</li><li>$PWD 当前所在的目录</li></ul><p>var.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>define path varibles</span><br><span class="line"><span class="meta">#</span>by author Aoki</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>A=123</span><br><span class="line">name=Aoki</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>echo " This is my First shell var $A"</span><br><span class="line">echo "My name is $name"</span><br><span class="line"></span><br><span class="line">echo $UID</span><br><span class="line">echo $PWD</span><br><span class="line">echo "#################################"</span><br><span class="line"></span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo "######################################"</span><br><span class="line"></span><br><span class="line">echo "The \$1 is $1"</span><br><span class="line">echo "The \$2 is $2"</span><br><span class="line">echo "The \$? is $?"   #判断上一条命令是否正确 0代表正确</span><br><span class="line">echo "The \$* is $*"    #输出所有参数</span><br><span class="line">echo "The \$# is $#"    #输出参数的数量</span><br></pre></td></tr></table></figure><h2 id="三、if语句"><a href="#三、if语句" class="headerlink" title="三、if语句"></a>三、if语句</h2><p>if 、for、 while、 case等条件流程控制语句。</p><p>逻辑运算符解析：</p><ul><li>-f 判断文件是否存在 eg: if [ -f filename ]</li><li>-d 判断目录是否存在 eg: if [ -d dir ]</li><li>-eq 等于 应用于：整型比较</li><li>-ne 不等于 应用于：整型比较</li><li>-lt 小于 应用于：整型比较</li><li>-gt 大于 应用于：整型比较</li><li>-le 小于或等于 应用于：整型比较</li><li>-ge 大于或等于 应用于：整型比较</li><li>-a 双方都成立（and） 逻辑表达式 –a 逻辑表达式</li><li>-o 单方成立（or） 逻辑表达式 –o 逻辑表达式</li><li>-z 空字符串</li></ul><p>If条件判断语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> If (表达式)   #if (Variable in Array)</span><br><span class="line"></span><br><span class="line">语句1</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">语句2</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -n 文件名  #测试该脚本有没有报错</span><br></pre></td></tr></table></figure><p>if.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>auto if test</span><br><span class="line"><span class="meta">#</span>by author Aoki</span><br><span class="line"></span><br><span class="line">NUM1=100</span><br><span class="line">NUM2=200</span><br><span class="line"></span><br><span class="line"><span class="meta">if(($</span>NUM1 &gt; $NUM2));then</span><br><span class="line"></span><br><span class="line">        echo "This $NUM1 greate $NUM2 "</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">        echo "This $NUM1 little $NUM2"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>iftest1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>auto if  test1</span><br><span class="line"><span class="meta">#</span>by author Aoki</span><br><span class="line"></span><br><span class="line">DIR=/root/20000</span><br><span class="line"></span><br><span class="line">if [ ! -d $DIR ];then  #判断当前目录是否存在</span><br><span class="line"></span><br><span class="line">        mkdir -p $DIR</span><br><span class="line">        echo "$DIR create successfully"</span><br><span class="line">else</span><br><span class="line">        echo "$DIR is exist"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>iftest2.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>auto test file whether exist</span><br><span class="line"><span class="meta">#</span>by author Aoki</span><br><span class="line"></span><br><span class="line">FILES=/root/test.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ ! -f $FILES ];then  #判断当前文件是否存在</span><br><span class="line"></span><br><span class="line">        echo "ok"&gt;&gt;$FILES</span><br><span class="line">else</span><br><span class="line">        cat $FILES</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>iftest3.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>by author Aoki</span><br><span class="line"></span><br><span class="line">scores=$1</span><br><span class="line"></span><br><span class="line">if [ -z $scores ];then</span><br><span class="line">        echo "Usage:&#123;$0 60 | 80.&#125;"</span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $scores -gt 80 ]]; then</span><br><span class="line">        echo "really Good"</span><br><span class="line">elif [[ $scores -gt 70 ]]; then</span><br><span class="line">        echo "good"</span><br><span class="line">elif [[ $scores -gt 60 ]]; then</span><br><span class="line">        echo "pass"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="四、使用if条件语句编写MySQL备份脚本"><a href="#四、使用if条件语句编写MySQL备份脚本" class="headerlink" title="四、使用if条件语句编写MySQL备份脚本"></a>四、使用if条件语句编写MySQL备份脚本</h2><p>auto_backup_mysql.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>auto backup mysql db</span><br><span class="line"><span class="meta">#</span>by author Aoki</span><br><span class="line"><span class="meta">#</span>define backup path</span><br><span class="line"></span><br><span class="line">BACK_DIR=/data/backup/`data+%Y%m%d` #反引号解析为命令</span><br><span class="line">MYSQLDB=discuz</span><br><span class="line">MYSQLUSR=backup</span><br><span class="line">MYSQLPW=123456</span><br><span class="line">MYSQLCMD=/usr/bin/mysqldump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>判断是否root用户登录</span><br><span class="line"></span><br><span class="line">if [ $UID -ne 0 ];then</span><br><span class="line">        echo "Must to use root for exec shell"</span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ ! -d $BACK_DIR ];then</span><br><span class="line">        mkdir -p $BACK_DIR</span><br><span class="line">        echo "$BACK_DIR created successfully"</span><br><span class="line">else</span><br><span class="line">        echo "This $BACK_DIR is exist"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>mysql 备份命令</span><br><span class="line"><span class="meta">$</span>MYSQLCMD -u$MYSQLUSR -p$MYSQLPW -d MYSQLDB &gt; $BACK_DIR/$MYSQLDB.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $? -eq 0];then</span><br><span class="line">        echo "The mysql backup $MYSQLDB successfully"</span><br><span class="line">else</span><br><span class="line">        echo "The mysql backup $MYSQLDB failed"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Shell是什么？&quot;&gt;&lt;a href=&quot;#一、Shell是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、Shell是什么？&quot;&gt;&lt;/a&gt;一、Shell是什么？&lt;/h2&gt;&lt;p&gt;Shell是操作系统的最外层，Shell可以合并变成语言以控制进程和
      
    
    </summary>
    
      <category term="Shell脚本" scheme="https://wanqbin.xyz/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="shell" scheme="https://wanqbin.xyz/tags/shell/"/>
    
      <category term="MySQL备份脚本" scheme="https://wanqbin.xyz/tags/MySQL%E5%A4%87%E4%BB%BD%E8%84%9A%E6%9C%AC/"/>
    
      <category term="shell变量" scheme="https://wanqbin.xyz/tags/shell%E5%8F%98%E9%87%8F/"/>
    
      <category term="if语句" scheme="https://wanqbin.xyz/tags/if%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>AbstractFactory模式</title>
    <link href="https://wanqbin.xyz/2019/AbstractFactory%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wanqbin.xyz/2019/AbstractFactory模式/</id>
    <published>2019-11-26T16:09:00.000Z</published>
    <updated>2019-11-26T16:26:07.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Abstract-Factory模式"><a href="#一、Abstract-Factory模式" class="headerlink" title="一、Abstract Factory模式"></a>一、Abstract Factory模式</h2><blockquote><p>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定它们的具体类。</p><p>​                                                                                                                                                                                    </p><p>​                                                                                                                                                                                    ——《设计模式》</p></blockquote><p>有时候，几个对象需要以一种协调的方式实例化。例如，在处理用户界面时，系统可能需要在一个操作系统上用一组对象，在另一个操作系统上用另一组对象。Abstract Factory模式能够确保系统总是根据情况获得正确的对象。</p><h2 id="二、Abstract-Factory模式：示例研究"><a href="#二、Abstract-Factory模式：示例研究" class="headerlink" title="二、Abstract Factory模式：示例研究"></a>二、Abstract Factory模式：示例研究</h2><p>假设有这样一项任务：设计一个计算机系统，显示并打印取自数据库的几何形状。用来显示和打印形状的分辨率取决于当前运行系统的计算机：CPU的速度和可用内存。系统必须留意自己对计算机的要求。</p><p>这里的难点在于，系统必须控制使用哪些驱动程序：低配置机器使用低分辨率驱动程序，高配置机器使用高分辨率驱动程序，如下所示：</p><table><thead><tr><th>驱动程序</th><th>在低配置机器上</th><th>在高配置机器上</th></tr></thead><tbody><tr><td>显示</td><td>LRDD低分辨率显示驱动程序</td><td>HRDD高分辨率显示驱动程序</td></tr><tr><td>打印</td><td>LRPD低分辨率打印驱动程序</td><td>HRPD高分辨率打印驱动程序</td></tr></tbody></table><p>这个例子中，两组驱动程序是互斥的，但通常实际情况并不是这样的。有时候不同组的驱动程序会包含来自同一个类的对象。比如，一台中级配置的机器可能使用低分辨率的显示驱动程序（LRDD）和高分辨率打印驱动程序(HRPD)</p><p>使用哪一组取决于问题域：对于给定的情形，需要使用哪组对象？在这个例子中，共同的概念主要是对象对系统提出的要求。</p><ul><li>低分辨率组——LRDD和LRPD，这些驱动程序对系统提出的要求较低。</li><li>高分辨率组——HRDD和HRPD，这些驱动程序对系统提出的要求较高。</li></ul><p>方案一：使用switch语句选择驱动程序</p><p><strong>ApControl.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApControl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ApControl(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doDraw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doPrint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~ApControl(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Resolution myResolution;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>ApControl.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ApControl.h"</span></span></span><br><span class="line"></span><br><span class="line">ApControl::ApControl(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Set myResolution based on configuration</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ApControl::~ApControl(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ApControl::<span class="function"><span class="keyword">void</span> <span class="title">doDraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (myResolution) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LOW:</span><br><span class="line">            <span class="comment">// use lrdd</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> HIGH:</span><br><span class="line">            <span class="comment">// use hrdd</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ApControl::doPrint()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (myResolution) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LOW:</span><br><span class="line">            <span class="comment">// use lrpd</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> HIGH:</span><br><span class="line">            <span class="comment">// use hrpd</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这样能够达到目的，但是有问题。确定使用哪个驱动程序的规则与驱动程序实际使用混杂在一起，因此耦合度和内聚性上都存在问题。</p><ul><li>紧耦合——如果要修改分辨率的规则，就必须在两处修改代码，而这两处的其他方面毫无关系。</li><li>低内聚——doDraw方法和doPrint方法的任务毫不相关；它们都必须创建形状，并且操心应该使用哪个驱动程序。</li></ul><p>紧耦合和低内聚也许眼下并不是问题，但是，它们通常会增加维护成本。</p><h3 id="switch语句可能说明需要抽象"><a href="#switch语句可能说明需要抽象" class="headerlink" title="switch语句可能说明需要抽象"></a>switch语句可能说明需要抽象</h3><blockquote><p>switch语句本身常常说明问题：</p><ul><li>需要多态行为</li><li>存在职责错放。</li></ul><p>应该考虑用一种更通用的解决方案，比如抽象代替switch语句，或者将职责赋予其他对象。</p></blockquote><p>另一种方案是使用继承。可以用两个不同的ApControl类：一个使用低分辨率驱动程序，另一个使用高分辨率驱动程序。它们都将从同一个抽象类派生，因此可以在抽象类中维护公共代码。</p><p><img src="/2019/AbstractFactory模式/01.PNG" alt="方案二——用继承处理变化"></p><p>虽然这个简单的例子里使用继承也可以完成任务，但继承的缺点非常多。</p><ul><li>组合爆炸——对于每个组和未来可能使用的每个新组，都必须创建一个新的具体类（即ApControl的一个新版本）。例如，如果需要中级配置的应用程序（使用LRPD和HRDD），就需要增加一个新类处理这一情况。如果需要一个应用程序处理HRPD和LRDD，又需要一个类。</li><li>含义不清——所生成的类对于说明意图毫无帮助。我已经将每个类根据特定情况进行了特化。如果希望自己的带啊吗维护起来比较容易，就需要尽可能清晰地说明其意图。这样就不必再耗费大量时间重新了解某段代码地用途。</li><li>需要使用聚集——这个方案违反了“优先使用对象聚集而不是类继承”地原则。没有遵循这一规则说明在发生其他变化时，这些类会在类层次中进一步降级。</li></ul><p>在这个例子中，LRDD和HRDD都是显示驱动程序，LRPD和HRPD都是打印驱动程序。所以抽象概念应该是<strong>显示驱动程序</strong>和<strong>打印驱动程序</strong>。下图可以概念性地表示这一点，之所以说是概念性的，是因为LRDD和HRDD并不是从同一个抽象类派生出来的。现在，我不用操心LRDD和HRDD派生自不同的抽象类，因为i我知道可以使用Adapter模式对这些驱动程序进行适配，使它们看起来属于一个抽象类。</p><p><img src="/2019/AbstractFactory模式/02.PNG" alt="驱动程序及其抽象"></p><p>这样定义对象，ApControl对象不用switch语句就可以使用DisplayDriver对象和PrintDriver对象了。ApControl类的可理解性大大提高了，因为它自己用不着再考虑驱动程序的具体类型，也就是说，ApControl对象可以不考虑驱动程序的分辨率，使用DisplayDriver对象和PrintDriver对象。ApControl使用驱动程序很可能又可以实现Bridge模式。</p><p><img src="/2019/AbstractFactory模式/03.PNG" alt="理想情况下ApControl使用驱动程序的情形"></p><p>还有一个问题：如何创建合适的对象呢？</p><p>可以让ApControl类负责，但这样未来会有维护问题。如果要处理一组新的对象，就必须修改ApControl类。相反，如果用一个“工厂”对象负责实例化所需要的对象，即使出现新的对象组也没有问题了。</p><p>下面，我将用一个工厂对象（ResFactory类型，也称分辨率工厂）来控制驱动程序组的创建。ApControl对象将使用另外一个对象——工厂对象获得适合当前计算机的显示驱动程序和打印驱动程序。</p><p>工厂是有一定职责的，而且是内聚的，</p><p>从ApControl的角度来看，事情现在简单多了。ApControl让ResFactory来负责跟踪应该使用哪些驱动程序。虽然我们仍然需要为ResFactory来编写选择代码，但是问题已经根据职责分解了。ApControl的职责是是了解如何使用合适的对象。ResFactory的职责是决定哪些对象合适。可以使用不同的工厂对象，也可以只使用一个。无论如何，现在的情况都优于前面的方案。</p><p>这同时还加强了内聚性：ResFactory所做的就是创建合适的驱动程序；ApControl只负责使用这些驱动程序。</p><p>避免在ResFactory类使用switch语句的办法有几种。不适用switch语句可以在未来进行修改时，不影响原有的工厂对象。可以通过定义一个表示“工厂”概念的抽象类，将变化封装在一个类中。对于ResFactory而言，有两种不同的行为：</p><ul><li>给我应该使用的显示驱动程序</li><li>给我应该使用的打印驱动程序</li></ul><p>ResFactory对象可以从两个具体类中的一个实例化，而具体类都从一个定义了公共方法的抽象类派生。</p><p><img src="/2019/AbstractFactory模式/04.PNG" alt="ResFactory模式封装了变化"></p><p>下面是Abstract Factory模式的3个关键的概念步骤：</p><table><thead><tr><th>策略</th><th>设计中的体现</th></tr></thead><tbody><tr><td>找到变化并封装之</td><td>使用哪个驱动程序对象的选择是变化的，所以，将它封装在ResFactory类中</td></tr><tr><td>优先使用对象聚集，而不是类继承</td><td>将变化放在一个独立的对象——ResFactory对象中，ApControl对象使用ResFactory对象，而不是拥有两种不同的ApControl对象。</td></tr><tr><td>针对接口编程而不是实现设计</td><td>ApControl知道怎样请求ResFactory实例化驱动程序对象，但它不知道ResFactory对象如何实际实例化。</td></tr></tbody></table><p>下面来完成这个解决方案，让ApControl对象与合适的工厂对象（LowResFact对象或HighResFact对象）通信，如下图所示。请注意，ResFactory是抽象的，这种对ResFactory实现细节的隐藏，正是这个模式的运作原理。因此，这个模式被称为Abstract Factory（抽象工厂）。</p><p><img src="/2019/AbstractFactory模式/05.PNG" alt="使用Abstract Factory模式的过度解决方案"></p><p>ApControl对象将得到一个LowResFacrt对象或一个HIghResFact对象。需要时ApControl对象向这个工厂请求对象合适的驱动程序。工厂对象实例化自己了解的某个驱动对象程序。ApControl对象不需要操心返回的驱动程序时低分辨率还是高分辨率，因为ApControl对象使用它们的方式是相同的。</p><p><strong>ApControl.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DisplayDriver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PrintDriver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ResFactory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApControl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ApControl(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doPrint</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doDraw</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~ApControl(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ResFactory *myResFactory;</span><br><span class="line">    DisplayDriver *myDisplayDriver;</span><br><span class="line">    PrintDriver *myPrintDriver;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>ApControl.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ApControl.h"</span></span></span><br><span class="line"></span><br><span class="line">ApControl::ApControl(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ResFactory *myResFactory= ResFactory::getFactory();</span><br><span class="line">    myDisplayDriver= myResFactory-&gt;getDispDrvr();</span><br><span class="line">    myPrintDriver= myResFactory-&gt;getPrtDrvr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ApControl::~ApControl(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ApControl::doDraw(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    . . .</span></span><br><span class="line">    myDisplayDriver-&gt;draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ApControl::doPrint(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    . . .</span></span><br><span class="line">    myPrintDriver-&gt;print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ResFactory.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DisplayDriver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PrintDriver.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ResFactory(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> DisplayDriver* <span class="title">getDispDrvr</span><span class="params">(<span class="keyword">void</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> PrintDriver* <span class="title">getPrtDrvr</span><span class="params">(<span class="keyword">void</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> ResFactory* <span class="title">getFactory</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~ResFactory(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>ResFactory.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ResFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HighResFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LowResFactory.h"</span></span></span><br><span class="line"></span><br><span class="line">ResFactory::ResFactory(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ResFactory::~ResFactory(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ResFactory* ResFactory::getFactory (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Logic to decide which resolution to use</span></span><br><span class="line">    <span class="comment">// If are to use High Resolution</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HighResFactory;</span><br><span class="line">    <span class="comment">// if are to use Low Resolution</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LowResFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HighResFact.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"resfactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HRDD.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HRPD.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighResFact</span> :</span> <span class="keyword">public</span> ResFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HighResFact(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function">DisplayDriver* <span class="title">getDispDrvr</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    <span class="function">PrintDriver* <span class="title">getPrtDrvr</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~HighResFact(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>HighResFact.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HighResFact.h"</span></span></span><br><span class="line"></span><br><span class="line">HighResFact::HighResFact(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HighResFact::~HighResFact(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">DisplayDriver* HighResFact::getDispDrvr(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HRDD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrintDriver* HighResFact::getPrtDrvr(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HRPD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LowResFact.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"resfactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LRDD.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LRPD.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowResFact</span> :</span>     <span class="keyword">public</span> ResFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LowResFact(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function">DisplayDriver* <span class="title">getDispDrvr</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">    <span class="function">PrintDriver* <span class="title">getPrtDrvr</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~LowResFact(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>LowResFact.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LowResFact.h"</span></span></span><br><span class="line"></span><br><span class="line">LowResFact::LowResFact(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LowResFact::~LowResFact(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DisplayDriver* LowResFact::getDispDrvr(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LRDD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrintDriver* LowResFact::getPrtDrvr(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LRPD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DisplayDriver.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayDriver</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DisplayDriver(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">void</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~DisplayDriver(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>DisplayDriver.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DisplayDriver.h"</span></span></span><br><span class="line"></span><br><span class="line">DisplayDriver::DisplayDriver(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DisplayDriver::~DisplayDriver(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HRDD.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"displaydriver.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HRDD</span> :</span> <span class="keyword">public</span> DisplayDriver</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HRDD(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~HRDD(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>HRDD.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HRDD.h"</span></span></span><br><span class="line"></span><br><span class="line">HRDD::HRDD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HRDD::~HRDD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HRDD::draw(<span class="keyword">void</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do high resolution draw</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LRDD.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"displaydriver.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRDD</span> :</span></span><br><span class="line">    <span class="keyword">public</span> DisplayDriver</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRDD(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~LRDD(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>LRDD.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LRDD.h"</span></span></span><br><span class="line"></span><br><span class="line">LRDD::LRDD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRDD::~LRDD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> LRDD::draw(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do low resolution draw</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PrintDriver.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintDriver</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    PrintDriver(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~PrintDriver(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>PrintDriver.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PrintDriver.h"</span></span></span><br><span class="line"></span><br><span class="line">PrintDriver::PrintDriver(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrintDriver::~PrintDriver(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HRPD.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"printdriver.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HRPD</span> :</span> <span class="keyword">public</span> PrintDriver</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HRPD(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~HRPD(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>HRPD.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HRPD.h"</span></span></span><br><span class="line"></span><br><span class="line">HRPD::HRPD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HRPD::~HRPD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HRPD::print()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do high resolution print</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LRPD.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"printdriver.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRPD</span> :</span></span><br><span class="line">    <span class="keyword">public</span> PrintDriver</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRPD(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~LRPD(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>LRPD.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LRPD.h"</span></span></span><br><span class="line"></span><br><span class="line">LRPD::LRPD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRPD::~LRPD(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> LRPD::print()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// do low resolution print</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还忽略了一个问题：LRDD和HRDD可能不是派生自同一个抽象类。我们可以使用上图中的结构，但是需要使用Adapter模式对驱动程序进行适配。</p><p><img src="/2019/AbstractFactory模式/06.PNG" alt="用Abstract Factory模式和Adapter模式解决这个问题"></p><p>这个设计的实现基于上与前面那个相同。唯一区别在于，现在工厂对象实例化的对象来自另外两个适配原驱动程序的类。这是一个重要的建模方法。用这种方法将概念上相似的对象当作同种对象处理，即使它们不是。这使Abstract Factory模式可以用于更多情况。</p><p>在这个模式中：</p><ul><li>客户对象只知道向谁请求所需的对象和如何使用这些对象</li><li>Abstract Factory类通过为每个不同类型的对象定义一个方法，来指定实例化哪个对象，一般而言，对于每一种必须实例化的对象，Abstract Factory模式都有一个相应的方法</li><li>具体的工厂对象指定哪些对象要实例化</li></ul><p>在刚才的例子中，通过为每一种可能情况设一个具体类，实现了Abstract Factory模式。这里有两种情况：低分辨率和高分辨率。实践中，情况的数量可能非常大，而且每增加一个新的变量都会组合级数地增长。</p><h2 id="三、Abstract-Factory模式：关键特征"><a href="#三、Abstract-Factory模式：关键特征" class="headerlink" title="三、Abstract Factory模式：关键特征"></a>三、Abstract Factory模式：关键特征</h2><p>决定需要哪个工厂对象实际上与确定使用哪一组对象是相同的。</p><p>我可以使用Abstract Factory模式，不同应用程序都使用同一子系统。在这种情况下，工厂对象将传给子系统，告诉子系统将要使用哪些对象。此时，通常主系统知道子系统需要哪一组对象。在调用子系统之前，将实例化正确的工厂对象。</p><p>下图中，Client对象使用派生自两个不同服务类的对象（AbstractProductA和AbstractProductB）。这个设计非常简化，隐藏了实现细节，系统可隐藏性也更好。</p><ul><li>Client对象不知道自己拥有的是服务对象的哪个特定具体实现，因为创建服务对象是工厂对象的职责</li><li>Client对象甚至不知道自己使用的是哪个特定工厂，因为它只知道自己有一个AbstractFactory对象。它可能有一个ConcreteFactory1对象或一个ConcreteFactory2对象，但它不知道到底是哪一个。</li></ul><p><img src="/2019/AbstractFactory模式/07.PNG" alt="Abstract Factory模式通用结构图"></p><p>对Client对象隐藏（即封装）了”应该使用哪些服务对象”的选择，这样将来修改选择算法将更加容易，因为不会影响到Client对象。</p><p>Abstract Factory模式为我们提供了一种新的分解方式——根据职责分解。使用这种方法可以将问题分解成：</p><ul><li>谁在使用我们的特定对象（ApControl）</li><li>谁来决定使用哪些特定对象（AbstractFactory）</li></ul><h3 id="Abstract-Factory模式关键特征："><a href="#Abstract-Factory模式关键特征：" class="headerlink" title="Abstract Factory模式关键特征："></a>Abstract Factory模式关键特征：</h3><ul><li>意图：需要为特定的客户（或情况）提供对象组。</li><li>问题：需要实例化一组相关的对象</li><li>解决方案：协调对象组的创建。提供一种方式，将如何执行对象实例化的规则从使用这些对象的客户对象中提出出来。</li><li>参与者和协作者：AbstractFactory为如何创建对象组的每个对象组定义接口。一般每个组都由独立的ConcreteFactory进行创建。</li><li>效果：这个模式将“使用哪些对象”的规则与“如何使用这些对象”的逻辑分离开来。</li><li>实现：定义一个抽象类来指定创建哪些对象。然后为每个组实现一个具体类。可以用表或文件完成同样的任务。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Abstract-Factory模式&quot;&gt;&lt;a href=&quot;#一、Abstract-Factory模式&quot; class=&quot;headerlink&quot; title=&quot;一、Abstract Factory模式&quot;&gt;&lt;/a&gt;一、Abstract Factory模式&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Abstract Factory模式" scheme="https://wanqbin.xyz/tags/Abstract-Factory%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="https://wanqbin.xyz/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Bridge模式【二】</title>
    <link href="https://wanqbin.xyz/2019/Bridge%E6%A8%A1%E5%BC%8F%E3%80%90%E4%BA%8C%E3%80%91/"/>
    <id>https://wanqbin.xyz/2019/Bridge模式【二】/</id>
    <published>2019-11-25T13:05:00.000Z</published>
    <updated>2019-11-25T13:12:03.274Z</updated>
    
    <content type="html"><![CDATA[<p>上篇：<a href="https://wanqbin.xyz/2019/Bridge%E6%A8%A1%E5%BC%8F%E3%80%90%E4%B8%80%E3%80%91/#more">Bridge模式（一）</a></p><p>刚开始考虑这些问题的时候，我觉得目前的困难可能只是由于使用了错误的继承层次造成的。因此，我尝试选择下图所示的另一种层次。</p><p><img src="/2019/Bridge模式【二】/bridge%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0.PNG" alt="另一种实现"></p><p>我仍然用相同的四个类表示所有可能的组合，但是，因为先从不同的绘图程序派生不同的版本，所以DP1和DP2之间的冗余去掉了。</p><p>但是，糟糕的一点是，两种Rectangle和两种Circle之间的冗余却没办法去除，因为它们每一对都有相同的draw方法。</p><p>无论怎样解决，前面的类爆炸后性增长问题依然存在。</p><p>这里，我们开始思考Birdge模式要解决的问题是什么呢？</p><p>当存在一个抽象有不同实现时Bridge模式最为有用，它可以使抽象和实现相互独立地进行变化。</p><p>使抽象和实现相互独立地变化，将意味着我可以在不改变实现的情况下增加新的抽象。，反之亦然。</p><p>当前的解决方案并不允许这种独立地进行变化。我已经看到，创建一个支持独立变化的实现更好。</p><p>在进行设计以应对变化的过程中，应遵循两条基本策略：</p><ul><li>找出变化并封装之</li><li>优先使用对象聚集，而不是类继承</li></ul><p>我们按照这个过程对矩形绘图问题进行设计：</p><ul><li><p>首先，找到什么在发生变化。在这里，变化的是形状的种类和绘图程序的种类。而共同的概念是“形状”和“绘图程序”。</p><p><img src="/2019/Bridge模式【二】/Bridge%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%BB%80%E4%B9%88%E5%9C%A8%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96.PNG" alt="什么在发生变化"></p><p>现在，我希望Shape类封装形状种类的概念。形状需要知道如何绘制自己，而Drawing对象负责画线和圆。我通过在类中定义方法来表示这些责任。</p></li><li><p>下一步是表示具体的变化。Shape类有矩形和圆形，绘图程序分别有一个基于DP1的对象（V1Drawing）和基于DP2的对象（V2Drawing）。</p><p><img src="/2019/Bridge模式【二】/Bridge%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A1%A8%E7%A4%BA%E5%8F%98%E5%8C%96.PNG" alt="表示变化"></p><p>有了这两组类之后，还需要知道它们之间如何联系。我不想再在继承树中增加一组新的类，因为我知道这样做会导致什么情况。相反，我想看看是否能通过一组使用另外一组，将这些类联系起来（也就是说，遵循“优先使用对象聚集，而不是类继承”的要求）。问题是，该让哪组类使用另一组类呢？</p><p>考虑如下的可能性：Shape类使用Drawing程序，或者Drawing程序使用Shape类。</p><ul><li><p>首先考虑后一种情形。如果绘图程序能够直接绘制形状，它们必须对形状的一些情况有大致的了解：是什么，看起来如何。但这违反呢对象的一个基本原则：对象应该只对自己负责。</p><p>这样做还违反了封装。Drawing对象要绘制形状，必须知道Shape的具体信息（即Shape的种类）。因此，对象并不是真正对自己的行为负责。</p></li><li><p>现在考虑这样一种情形。如果让Shape类使用Drawing对象来绘制自己如何？Shape对象无需知道所用Drawing对象的类型，因为可以让Shape引用Drawing类，Shape对象仍然要负责绘图的过程。</p><p>这个方案如下图所示：<br><img src="/2019/Bridge模式【二】/Bridge%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%B0%86%E7%B1%BB%E8%81%94%E7%B3%BB%E8%B5%B7%E6%9D%A5.PNG" alt="将类联系起来"></p><p>在这个设计中，Shape类通过Drawing类具体实现自己的行为。其中略去了V1Drawing使用DP1程序、V2Drawing使用DP2程序的细节。下图增加了这些细节，以及保护方法drawLine和drawCircle，这两个方法分别调用Drawing()的drawLine方法和drawCircle()方法。</p><p><img src="/2019/Bridge模式【二】/Bridge%E6%A8%A1%E5%BC%8F%EF%BC%9AShape%E6%8A%BD%E8%B1%A1%E4%B8%8EDrawing%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%88%86%E7%A6%BB.PNG" alt="Shape抽象和Drawing实现的分离"></p></li></ul></li></ul><blockquote><p>规则只在一个地方实现。</p></blockquote><p>换言之，如果做什么事情有一条规则，只实现一次。这通常会使代码中出现比较小的方法，所增加的代价很小，却消除了重复，而且经常可以预防将来可能出现的很多问题。重复的害处，不仅仅在于输入工作成倍增加，还因为将来将来有东西可能发生变化时，可能会忘记在所有需要的地方进行修改。</p><p><img src="/2019/Bridge模式【二】/Bridge%E6%A8%A1%E5%BC%8F%EF%BC%9A%E6%8A%BD%E8%B1%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E7%A6%BB.PNG" alt="说明“抽象与实现分离”的类图"></p><p>从方法的角度来看，这与基于继承的实现非常相似。最大的区别在于，方法现在被放在不同的类中。</p><p>Bridge模式使我明白，将实现看成对象之外的东西，看出由对象所使用的东西，这样就使变化隐藏在实现中，与调用程序隔离了，从而提供了极大的只有自由。用这种方式设计对象，还能够看到将变化包含在不同的类层次中了。上图中左边的类层次包含了抽象中的变化，右边的类层次包含了实现这些抽象时包含的变化。</p><p><strong>Client.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Client(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Client(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Client.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Client.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Factory.h"</span></span></span><br><span class="line"></span><br><span class="line">Client::Client(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Client::~Client(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">static</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Shape **myShapes;</span><br><span class="line">    Factory myFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get Rectangles from some other source</span></span><br><span class="line">    myShapes= myFactory.getShapes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(myShapes)/ <span class="keyword">sizeof</span>(myShapes[<span class="number">0</span>]); i++)</span><br><span class="line">        myShapes[i]-&gt;draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Factory.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Drawing.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V1Drawing.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V2Drawing.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Factory(<span class="keyword">void</span>);</span><br><span class="line">    ~Factory(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function">Shape** <span class="title">getShapes</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Factory.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Factory.h"</span></span></span><br><span class="line"></span><br><span class="line">Factory::Factory(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Factory::~Factory(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape** Factory::getShapes ()</span><br><span class="line">&#123;</span><br><span class="line">    Shape **myShapes;</span><br><span class="line">    <span class="comment">// Figure out the shapes needed.</span></span><br><span class="line">    <span class="comment">// create them and put them in the array myShapes</span></span><br><span class="line">    <span class="keyword">return</span> myShapes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Shape.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Drawing.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape(Drawing *aDrawing);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Drawing *myDrawing;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Shape(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Shape.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line">Shape::Shape(Drawing *aDrawing)</span><br><span class="line">&#123;</span><br><span class="line">    myDrawing= aDrawing;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape::~Shape(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Shape::drawLine( <span class="keyword">double</span> x1,<span class="keyword">double</span> y1, <span class="keyword">double</span> x2,<span class="keyword">double</span> y2) </span><br><span class="line">&#123;</span><br><span class="line">   myDrawing-&gt;drawLine(x1,y1,x2,y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Shape::drawCircle( <span class="keyword">double</span> x,<span class="keyword">double</span> y,<span class="keyword">double</span> r) </span><br><span class="line">&#123;</span><br><span class="line">   myDrawing-&gt;drawCircle(x,y,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Circle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(Drawing*, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Circle(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> _x, _y, _r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Circle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Factory.h"</span></span></span><br><span class="line"></span><br><span class="line">Circle::Circle(Drawing *aDrawing, <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r) : Shape (aDrawing)</span><br><span class="line">&#123;</span><br><span class="line">    _x= x;</span><br><span class="line">    _y= y;</span><br><span class="line">    _r= r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::~Circle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Circle::draw ()</span><br><span class="line">&#123;</span><br><span class="line">    drawCircle( _x, _y, _r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Rectangle.h</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;Shape.h&quot;</span><br><span class="line"></span><br><span class="line">class Rectangle : public  Shape</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Rectangle(Drawing*, double, double, double, double);</span><br><span class="line">    virtual void drawLine(double, double, double, double)=0;</span><br><span class="line">    void draw();</span><br><span class="line">public:</span><br><span class="line">    ~Rectangle(void);</span><br><span class="line">private:</span><br><span class="line">    double _x1, _x2, _y1, _y2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Rectangle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"></span><br><span class="line">Rectangle::Rectangle(Drawing *aDrawing, <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) : </span><br><span class="line">    Shape (aDrawing)</span><br><span class="line">&#123;</span><br><span class="line">    _x1= x1; _y1= y1; _x2= x2; _y2= y2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rectangle::~Rectangle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Rectangle::draw()</span><br><span class="line">&#123;</span><br><span class="line">    drawLine( _x1, _y1, _x2, _y1);</span><br><span class="line">    drawLine( _x2, _y1, _x2, _y2);</span><br><span class="line">    drawLine( _x2, _y2, _x1, _y2);</span><br><span class="line">    drawLine( _x1, _y2, _x1, _y1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Drawing.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Drawing(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Drawing(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Drawing.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Drawing.h"</span></span></span><br><span class="line"></span><br><span class="line">Drawing::Drawing(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Drawing::~Drawing(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V1Drawing.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"drawing.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP1.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V1Drawing</span> :</span> <span class="keyword">public</span> Drawing</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V1Drawing(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V1Drawing(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DP1 myDP1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V1Drawing.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V1Drawing.h"</span></span></span><br><span class="line"></span><br><span class="line">V1Drawing::V1Drawing(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V1Drawing::~V1Drawing(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> V1Drawing::drawLine ( <span class="keyword">double</span> x1,<span class="keyword">double</span> y1, <span class="keyword">double</span> x2,<span class="keyword">double</span> y2) </span><br><span class="line">&#123;</span><br><span class="line">   DP1::draw_a_line(x1,y1,x2,y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> V1Drawing::drawCircle (<span class="keyword">double</span> x,<span class="keyword">double</span> y,<span class="keyword">double</span> r) </span><br><span class="line">&#123;</span><br><span class="line">   DP1::draw_a_circle(x,y,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V2Drawing.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"drawing.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2Drawing</span> :</span> <span class="keyword">public</span> Drawing</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V2Drawing(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V2Drawing(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DP2 myDP2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V2Drawing.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V2Drawing.h"</span></span></span><br><span class="line"></span><br><span class="line">V2Drawing::V2Drawing(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V2Drawing::~V2Drawing(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> V2Drawing::drawLine (<span class="keyword">double</span> x1,<span class="keyword">double</span> y1, <span class="keyword">double</span> x2,<span class="keyword">double</span> y2) </span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// arguments are different in DP2</span></span><br><span class="line">   <span class="comment">// and must be rearranged</span></span><br><span class="line">   DP2::drawline(x1,x2,y1,y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> V2Drawing::drawCircle ( <span class="keyword">double</span> x, <span class="keyword">double</span> y,<span class="keyword">double</span> r) </span><br><span class="line">&#123;</span><br><span class="line">   DP2::drawcircle(x,y,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DP1.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DP1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DP1(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw_a_line</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw_a_circle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~DP1(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>DP1.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP1.h"</span></span></span><br><span class="line"></span><br><span class="line">DP1::DP1(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DP1::~DP1(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DP1::draw_a_line( <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the line</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> DP1::draw_a_circle( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the circle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DP2.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DP2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DP2(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawline</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawcircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~DP2(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>DP2.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line">DP2::DP2(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DP2::~DP2(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DP2::drawline( <span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y1, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the line</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> DP2::drawcircle( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the circle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Birdge模式：关键特征"><a href="#三、Birdge模式：关键特征" class="headerlink" title="三、Birdge模式：关键特征"></a>三、Birdge模式：关键特征</h2><ul><li>意图：将一组实现与另一组使用它们的对象分离</li><li>问题：一个抽象类的派生类必须使用多个实现，但不能出现类数量爆炸性增长。</li><li>解决方案：为所有实现定义一个接口，供抽象类的所有派生类使用。</li><li>参与者与协作者：Abstraction为要实现的对象定义接口，Implementor为具体实现类定义接口。Abstarction的派生类使用Implementor的派生类，却无需知道自己具体使用哪一个ConcreteImplementor。</li><li>效果：实现与使用的对象解耦，提供了可扩展性，客户对象无需操心实现问题。</li><li>实现：<ul><li>将实现封装在一个抽象类中</li><li>在要实现的抽象的基类中包含一个实现的句柄</li></ul></li></ul><p>在使用Bridge模式时，几个抽象对象有时候可能共享实现对象。</p><ul><li>在C#和Java中，这不会有什么问题；当所有的抽象对象销毁之后，垃圾回收器会发现不再需要实现对象，并清理它们。</li><li>在C++中，我必须自己管理实现对象。办法有很多：可能是维护一个引用计数器，或者使用Singleton模式。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇：&lt;a href=&quot;https://wanqbin.xyz/2019/Bridge%E6%A8%A1%E5%BC%8F%E3%80%90%E4%B8%80%E3%80%91/#more&quot;&gt;Bridge模式（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;刚开始考虑这些问题的时候，我觉得目前
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Bridge模式" scheme="https://wanqbin.xyz/tags/Bridge%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="桥接模式" scheme="https://wanqbin.xyz/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="对象结构型模式" scheme="https://wanqbin.xyz/tags/%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Bridge模式【一】</title>
    <link href="https://wanqbin.xyz/2019/Bridge%E6%A8%A1%E5%BC%8F%E3%80%90%E4%B8%80%E3%80%91/"/>
    <id>https://wanqbin.xyz/2019/Bridge模式【一】/</id>
    <published>2019-11-25T11:11:00.000Z</published>
    <updated>2019-11-25T11:15:19.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Bridge模式"><a href="#一、Bridge模式" class="headerlink" title="一、Bridge模式"></a>一、Bridge模式</h2><blockquote><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><p>​                                                                                                                                                                ——《设计模式》</p></blockquote><p>解耦（decouple）：是指让各种事物互相独立地行事，或者至少明确地声明之间地关系。</p><p>抽象（abstraction)：是指不同事物之间概念上地联系方式。</p><p>一直以为<strong>实现</strong>就是实际构建抽象的方式。令我不解的是，怎样才能将抽象与其实现的具体方式分离开呢？</p><p>其实我的迷惑主要是因为误解了实现的含义。这里<strong>实现</strong>指的是抽象类及其派生类用来实现自己的对象（而不是抽象类的派生类，这些派生类被称为具体类）。</p><h2 id="二、案例研究"><a href="#二、案例研究" class="headerlink" title="二、案例研究"></a>二、案例研究</h2><p>假设我接受了一个任务：编写一个程序，使用两个绘图程序之一绘制矩形。我被告知，实例化矩形的时候，它会知道应该使用绘图程序1（DP1)还是绘图程序2（DP2）。</p><p>其中矩形是用两对点来定义的。</p><p>绘图程序的区别：</p><table><thead><tr><th></th><th>DP1</th><th>DP2</th></tr></thead><tbody><tr><td>用于画线</td><td>draw_a_line(x1,x2,y1,y2)</td><td>drawline(x1,x2,y1,y2)</td></tr><tr><td>用于画圆</td><td>draw_a_circle(x,y,r)</td><td>drawcircle(x,y,r)</td></tr></tbody></table><p>分析师做出规定，绘制矩形的代码并不需要操心自己应该使用那种绘制程序。我想到，因为矩形在实例化的时候会知道使用哪个绘图程序，所以可以有两种不同的矩形对象：一种使用DP1，一种使用DP2。每种矩形对象都有一个绘制方法。</p><p><img src="/2019/Bridge模式【一】/%E7%9F%A9%E5%BD%A2%E5%92%8C%E7%BB%98%E5%9B%BE%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%AE%BE%E8%AE%A1.PNG" alt="矩形和绘图程序的设计"></p><p>通过引入一个抽象类Rectangle，我可以利用这样一个事实，不同Rectangle之间唯一的差异在于如何实现drawLine方法，V1Rectangle类是通过一个DP1对象的引用，使用该DP1对象的draw_a_line方法实现的。V2Rectangle类是通过一个DP2对象的引用，使用该DP2对象的drawline方法实现的。无论这样，通过实例化正确的Rectangle，我不必再操心这种差异。</p><p><strong>Rectangle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rectangle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Rectangle(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> _x1, _x2, _y1, _y2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Rectangle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"></span><br><span class="line">Rectangle::Rectangle(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) </span><br><span class="line">&#123;</span><br><span class="line">    _x1= x1; _y1= y1; _x2= x2; _y2= y2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rectangle::~Rectangle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Rectangle::draw()</span><br><span class="line">&#123;</span><br><span class="line">    drawLine( _x1, _y1, _x2, _y1);</span><br><span class="line">    drawLine( _x2, _y1, _x2, _y2);</span><br><span class="line">    drawLine( _x2, _y2, _x1, _y2);</span><br><span class="line">    drawLine( _x1, _y2, _x1, _y1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V1Rectangle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V1Rectangle</span> :</span> <span class="keyword">public</span> Rectangle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V1Rectangle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V1Rectangle(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V1Rectangle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V1Rectangle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP1.h"</span></span></span><br><span class="line"></span><br><span class="line">V1Rectangle::V1Rectangle(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) : </span><br><span class="line">    Rectangle(x1, y1, x2, y2)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V1Rectangle::~V1Rectangle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> V1Rectangle::drawLine( <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    DP1::draw_a_line( x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V2Rectangle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2Rectangle</span> :</span> <span class="keyword">public</span> Rectangle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V2Rectangle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V2Rectangle(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V2Rectangle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V2Rectangle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line">V2Rectangle::V2Rectangle(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) : </span><br><span class="line">    Rectangle(x1, y1, x2, y2)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V2Rectangle::~V2Rectangle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> V2Rectangle::drawLine( <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    DP2::drawline( x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DP1.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DP1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DP1(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw_a_line</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw_a_circle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~DP1(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>DP1.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP1.h"</span></span></span><br><span class="line"></span><br><span class="line">DP1::DP1(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DP1::~DP1(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DP1::draw_a_line( <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the line</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> DP1::draw_a_circle( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the circle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DP2.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DP2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DP2(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawline</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawcircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~DP2(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>DP2.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line">DP2::DP2(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DP2::~DP2(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DP2::drawline( <span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y1, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the line</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> DP2::drawcircle( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the circle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，假设在代码完成之后。需求发生了变化。我现在需要支持另一种形状——这次是圆形，但是需求还是要求集合对象无需知道Rectangle和Circle的差异。</p><p>我想到可以在类层次中增加一层，就可以在已经使用的方法之上进行扩展了。我需要增加一个名为Shape的新类，并从中派生Rectangle类和Circle类。这样，Client对象可以只引用Shape对象，而不必考虑说给的是哪种形状。</p><p>例如，我可以从上面的设计开始，然后对每一种Shape类，都用各自的绘图程序实现，为Rectangle类派生一个DP1版本和一个DP2版本，为Circle类也派生一个DP1版本和一个DP2版本。最终的设计如下：</p><p><img src="/2019/Bridge模式【一】/%E7%9B%B4%E6%88%AA%E4%BA%86%E5%BD%93%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E4%B8%A4%E7%A7%8D%E5%BD%A2%E5%BC%8F%E5%BD%A2%E7%8A%B6%E5%92%8C%E4%B8%A4%E4%B8%AA%E7%BB%98%E5%9B%BE%E7%A8%8B%E5%BA%8F.PNG" alt="一种直接了当的方法：实现两种形状和两个绘图程序"></p><p>实现Rectangle类的方法与实现Circle类的方式相同，但是，这一次实现draw方法使用的是drawCircle方法，而不是drawLine方法。</p><p><strong>Shape.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Shape(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Shape.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line">Shape::Shape(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape::~Shape(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Circle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span></span><br><span class="line">    <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Circle(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> _x, _y, _r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Circle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"></span><br><span class="line">Circle::Circle(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    _x= x;</span><br><span class="line">    _y= y;</span><br><span class="line">    _r= r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::~Circle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Circle::draw ()</span><br><span class="line">&#123;</span><br><span class="line">    drawCircle( _x, _y, _r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Rectangle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> :</span> <span class="keyword">public</span>  Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rectangle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Rectangle(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> _x1, _x2, _y1, _y2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Rectangle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"></span><br><span class="line">Rectangle::Rectangle(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) </span><br><span class="line">&#123;</span><br><span class="line">    _x1= x1; _y1= y1; _x2= x2; _y2= y2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rectangle::~Rectangle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Rectangle::draw()</span><br><span class="line">&#123;</span><br><span class="line">    drawLine( _x1, _y1, _x2, _y1);</span><br><span class="line">    drawLine( _x2, _y1, _x2, _y2);</span><br><span class="line">    drawLine( _x2, _y2, _x1, _y2);</span><br><span class="line">    drawLine( _x1, _y2, _x1, _y1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V1Circle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V1Circle</span> :</span> <span class="keyword">public</span> Circle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V1Circle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V1Circle(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V1Circle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V1Circle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP1.h"</span></span></span><br><span class="line"></span><br><span class="line">V1Circle::V1Circle(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r) : Circle( x, y, r)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V1Circle::~V1Circle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> V1Circle::drawCircle ( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    DP1::draw_a_circle( x, y, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V1Rectangle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V1Rectangle</span> :</span> <span class="keyword">public</span> Rectangle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V1Rectangle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V1Rectangle(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V1Rectangle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V1Rectangle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP1.h"</span></span></span><br><span class="line"></span><br><span class="line">V1Rectangle::V1Rectangle(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) : </span><br><span class="line">    Rectangle(x1, y1, x2, y2)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V1Rectangle::~V1Rectangle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> V1Rectangle::drawLine( <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    DP1::draw_a_line( x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V2Circle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2Circle</span> :</span> <span class="keyword">public</span> Circle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V2Circle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V2Circle(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V2Circle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V2Circle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line">V2Circle::V2Circle(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r) : Circle( x, y, r)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V2Circle::~V2Circle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> V2Circle::drawCircle ( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    DP2::drawcircle( x, y, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V2Rectangle.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Rectangle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V2Rectangle</span> :</span> <span class="keyword">public</span> Rectangle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    V2Rectangle(<span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~V2Rectangle(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>V2Rectangle.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"V2Rectangle.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line">V2Rectangle::V2Rectangle(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) : </span><br><span class="line">    Rectangle(x1, y1, x2, y2)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V2Rectangle::~V2Rectangle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> V2Rectangle::drawLine( <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    DP2::drawline( x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DP1.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DP1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DP1(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw_a_line</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw_a_circle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~DP1(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>DP1.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP1.h"</span></span></span><br><span class="line"></span><br><span class="line">DP1::DP1(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DP1::~DP1(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DP1::draw_a_line( <span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the line</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> DP1::draw_a_circle( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the circle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DP2.h</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DP2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DP2(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawline</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawcircle</span><span class="params">( <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~DP2(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>DP2.cpp</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DP2.h"</span></span></span><br><span class="line"></span><br><span class="line">DP2::DP2(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DP2::~DP2(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> DP2::drawline( <span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y1, <span class="keyword">double</span> y2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the line</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> DP2::drawcircle( <span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// draw the circle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然类图中似乎有很多对象，但实际上，只需要处理三个对象：</p><ul><li>使用矩形的Client对象</li><li>V1Rectangle对象</li><li>绘图程序DP1对象</li></ul><p>但是，这个办法带来了新的问题。准确地说，这个办法存在“组合爆炸”问题。</p><ul><li>对于类图中V1Rectangle这一行的类，表示的是Shape的4个具体类型。</li><li>如果我另外还有一个绘图程序，也就是说实现上又有一种新的变化，会怎么样呢？将会有6种不同类型的Shape（具体类型）</li><li>如果我还有另一类型的Shape，也就是说另一种概念上的变化，会怎么样呢？将会有9中不同类型的Shape（3个概念上的Shape，3个绘图程序）</li></ul><p>于是，类爆炸性增长的问题出现了，因为这个解决方案中抽象（Shape）与其实现（绘图程序）是紧耦合的。每种形状都必须知道自己用的是哪种绘图程序。需要有一种方式将抽象上的变化和实际上的变化分开，从而使类的数量仅仅是线性的增加。</p><p>这正是Bridge模式的意图：将抽象与实现解耦，使它们都可以独立地变化。</p><p>问问自己这个设计还有什么毛病？</p><ul><li>看上去是否存在冗余？</li><li>是高内聚还是低内聚？</li><li>是紧耦合还是松耦合？</li></ul><p>“为每种变化使用不同的特化”（继承）到“将变化转移到使用或拥有这种变化的对象中”（组合）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Bridge模式&quot;&gt;&lt;a href=&quot;#一、Bridge模式&quot; class=&quot;headerlink&quot; title=&quot;一、Bridge模式&quot;&gt;&lt;/a&gt;一、Bridge模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将抽象部分与它的实现部分分离，使它们都可以独立地变
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Bridge模式" scheme="https://wanqbin.xyz/tags/Bridge%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="桥接模式" scheme="https://wanqbin.xyz/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="对象结构型模式" scheme="https://wanqbin.xyz/tags/%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Strategy模式</title>
    <link href="https://wanqbin.xyz/2019/Strategy%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wanqbin.xyz/2019/Strategy模式/</id>
    <published>2019-11-25T11:04:00.000Z</published>
    <updated>2019-11-25T11:09:59.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Strategy模式"><a href="#一、Strategy模式" class="headerlink" title="一、Strategy模式"></a>一、Strategy模式</h2><blockquote><p>定义一系列的算法，把它们一个个封装起来，并且使他们可相互替换。Strategy模式使算法可独立于使用它的客户而变化。</p><p>​                                                                                                                                                                                                ——《设计模式》</p></blockquote><p>Strategy模式以下列几条原则为基础：</p><ul><li>对象都具有职责</li><li>这些职责不同的具体实现使通过多态的使用完成的</li><li>概念上相同的算法具有多个不同的实现，需要进行管理</li></ul><p>将问题域中的各个行为互相分离开来——也就是说，将它们解耦，使一个好的设计。这使我们可以修改负责某一行为的类，不会对其他类产生不良影响。</p><h2 id="二、电子商务系统案例研究"><a href="#二、电子商务系统案例研究" class="headerlink" title="二、电子商务系统案例研究"></a>二、电子商务系统案例研究</h2><p>我们考虑这样一个国际电子商务订单处理系统。这个系统必须能够处理许多不同国家的订单。</p><h3 id="最初的需求"><a href="#最初的需求" class="headerlink" title="最初的需求"></a>最初的需求</h3><p>在这个系统的总架构中有一个控制器对象，用于处理销售请求。它能够确认何时有人在请求销售订单，并将请求转发给SalesOrder对象进行订单处理。</p><p><img src="/2019/Strategy模式/%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E8%AE%A2%E5%8D%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.PNG" alt="电子商务系统的订单体系结构"></p><p>SalesOrder对象的功能包括：</p><ul><li>允许客户通过GUI填写订单</li><li>处理税额的计算</li><li>处理订单，打印销售收据</li></ul><h3 id="处理新的需求"><a href="#处理新的需求" class="headerlink" title="处理新的需求"></a>处理新的需求</h3><p>如果此时我收到了一个新需求，需要修改处理税额的办法。如果我必须处理国外的订单税额。我至少需要添加新的税额计算规则。</p><p>候选方案：</p><ul><li>复制和粘贴</li><li>使用switch或if语句，用一个变量指定各种情况</li><li>使用函数指针或委托（让另一个代表每一种情况）</li><li>继承（让派生类用新的方式处理）</li><li>将整个功能委托给新的对象。</li></ul><p>这里如果使用switch或if等条件语句，分支的流向将会变得模糊。</p><p>C++中的函数指针和C#中的委托都可以用来将代码隐藏在精巧、紧凑、内聚的函数之中，但是，函数指针和委托无法维持每个对象的状态，因此其使用也是受限的。</p><p>继承经常被人误用，这使它的名声不佳。其实继承本身并没有什么问题。</p><p>当面向对象设计成为主流时，“重用”曾经被吹捧为它的主要优点之一。为了实现“重用”，我们总是强调应该找到已有的东西，用派生类的形式对其进行小幅修改。</p><p>在我们的这个例子中，可以试图重用现有的SalesOrder对象。我可以将新缴税规则看成新种类的销售订单，只是缴税规则不同。例如，对于加拿大的订单，可以从SalesOrder派生名为CanadianSalesOrder的新类，改写缴税规则。如下所示：</p><p><img src="/2019/Strategy模式/Strategy%E6%A8%A1%E5%BC%8F%E7%BB%A7%E6%89%BF.PNG" alt="销售订单框架"></p><p>采用这种方法的苦难指出在于，它这次能奏效，但是无法次次奏效。比如，如果要处理德国的订单，或者应对其他方面发生的变化（比如日期格式，语言和运费规则），我们构建的继承层次将无法轻松地应对。诸如此类地反复特化，要么会使代码变得无法理解，要么产生冗余。人们对面向对象设计进程有一种抱怨：特化技术最终总是会产生太深地继承层次。糟糕的是，继承层次太深，会导致程序难以理解（低内聚）、存在冗余、难以测试而且多个概念耦合在一起。无怪乎许多人认为面向对象有些言过其实——尤其是这一切都是因为遵循了通用的面向对象“重用”要求。</p><p>根据这种方法，应该这样做：</p><ul><li>寻找变化，并将它封装在一个单独的类中</li><li>将这个类包含在另一个类中</li></ul><p>在本例中，已经确定缴税规则是变化的。“将它封装”就意味着创建一个抽象类定义入股哦在概念上完成税额计算，然后为每种变化派生具体类。也就是说，可以创建一个CalcTax对象，为完成税额计算这一任务定义接口。然后可以由它派生所需的特定版本。</p><p><img src="/2019/Strategy模式/%E5%B0%81%E8%A3%85%E7%BC%B4%E7%A8%8E%E8%A7%84%E5%88%99.PNG" alt="封装缴税规则"></p><p>接下来，应该使用组合取代继承，。这意味着用不着再创建不同版本的销售订单（使用继承），可以用组合来包含变化。也就是说，只有一个SalesOrder类，让它包含处理变化的CalcTax类。如下所示：</p><p><img src="/2019/Strategy模式/%E7%94%A8%E7%BB%84%E5%90%88%E4%BB%A3%E6%9B%BF%E7%BB%A7%E6%89%BF.PNG" alt="用组合代替继承"></p><p>实现Strategy模式：</p><p> <strong>TaxController.h</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CalcTax.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskController</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TaskController(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">CalcTax *<span class="title">getTaxRulesForCountry</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~TaskController(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>TaxController.cpp</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">"TaskController.h"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SalesOrder.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CalcTax.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"USTax.h"</span></span></span><br><span class="line"></span><br><span class="line">TaskController::TaskController(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TaskController::~TaskController(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TaskController::process ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// this code is an emulation of a </span></span><br><span class="line">    <span class="comment">// processing task controller</span></span><br><span class="line">    <span class="comment">// . . .</span></span><br><span class="line">    <span class="comment">// figure out which country you are in</span></span><br><span class="line">    CalcTax *myTax;</span><br><span class="line">    myTax= getTaxRulesForCountry();</span><br><span class="line">    SalesOrder *mySO= <span class="keyword">new</span> SalesOrder();</span><br><span class="line">    mySO-&gt;process( myTax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalcTax *TaskController::getTaxRulesForCountry() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// In real life, get the tax rules based on</span></span><br><span class="line">    <span class="comment">// country you are in.  You may have the</span></span><br><span class="line">    <span class="comment">// logic here or you may have it in a</span></span><br><span class="line">    <span class="comment">// configuration file</span></span><br><span class="line">    <span class="comment">// Here, just return a USTax so this </span></span><br><span class="line">    <span class="comment">// will compile.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> USTax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>SalesOrder.h</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CalcTax.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SalesOrder(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span> <span class="params">(CalcTax *TaxToUse)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~SalesOrder(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>SalesOrder.cpp</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SalesOrder.h"</span></span></span><br><span class="line"></span><br><span class="line">SalesOrder::SalesOrder(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SalesOrder::~SalesOrder(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SalesOrder::process (CalcTax *taxToUse)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">long</span> itemNumber= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> price= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// given the tax object to use</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// . . .</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// calculate tax</span></span><br><span class="line">    <span class="keyword">double</span> tax= taxToUse-&gt;taxAmount( itemNumber, price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>CalcTax.h</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalcTax</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CalcTax(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="keyword">virtual</span> <span class="title">taxAmount</span><span class="params">( <span class="keyword">long</span>, <span class="keyword">double</span>)</span></span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~CalcTax(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>CalcTax.cpp</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CalcTax.h"</span></span></span><br><span class="line"></span><br><span class="line">CalcTax::CalcTax(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CalcTax::~CalcTax(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>CanTax.h</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"calctax.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CanTax</span> :</span></span><br><span class="line">    <span class="keyword">public</span> CalcTax</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CanTax(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">taxAmount</span><span class="params">( <span class="keyword">long</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~CanTax(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>CanTax.cpp</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CanTax.h"</span></span></span><br><span class="line"></span><br><span class="line">CanTax::CanTax(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CanTax::~CanTax(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> CanTax::taxAmount (<span class="keyword">long</span> itemSold, <span class="keyword">double</span> price) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// in real life, figure out tax according to</span></span><br><span class="line">    <span class="comment">// the rules in Canada and return it</span></span><br><span class="line">    <span class="comment">// here, return 0 so this will compile</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>USTax.h</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"calctax.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USTax</span> :</span></span><br><span class="line">    <span class="keyword">public</span> CalcTax</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    USTax(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">taxAmount</span><span class="params">( <span class="keyword">long</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~USTax(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>USTax.cpp</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"USTax.h"</span></span></span><br><span class="line"></span><br><span class="line">USTax::USTax(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USTax::~USTax(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> USTax::taxAmount (<span class="keyword">long</span> itemSold, <span class="keyword">double</span> price) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// in real life, figure out tax according to</span></span><br><span class="line">    <span class="comment">// the rules in the US and return it</span></span><br><span class="line">    <span class="comment">// here, return 0 so this will compile</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法的一个优点在于提高了内聚度。销售税有专门的类进行处理。还有一个优点是：在有新的缴税需求是，只需从CalcTax类派生一个新类予以实现即可。</p><p>最后，这种方法使职责的转移更加容易了。例如，在基于继承的方法中，必须由TaskController决定该使用哪个类型的SalesOrder对象。而在新结构中，SalesOrder对象的类型既可以由TaskController对象来决定，也可以由SalesOrder对象决定。为了由SalesOrder对象决定，需要有一个Configuration（配置）对象，使SalesOrder对象知道应该使用哪个税额计算对象，如下图所示：</p><p><img src="/2019/Strategy模式/Strategy%E6%A8%A1%E5%BC%8F%E4%B8%ADConfiguration.PNG" alt="使用Configuration告诉SalesOrder对象应该使用哪一个CalcTax"></p><p>这种方法也使用了继承，但是，它使用继承的方式与仅仅从SalesOrder派生CandianSalesOrder是不同的。在严格的继承方法中，是通过在SalesOrder继承来处理变化的，而在设计模式所指导的方法中，使用对象聚集（也就是说，SalesOrder中包含一个引用，指向处理变化的功能也就是税额计算的对象。）从SalesOrder（需要扩展的类）的就角度来看，是用组合代替了继承。至于被包含的类如何处理变化，SalesOrder并不关心。</p><p>“这种方法不就是将问题向下推了吗？”</p><ul><li>首先，这种说法没错，但是这样能够简化更大，更复杂的程序。</li><li>其次，原设计在一个类层次（SalesOrder）中装入了许多独立的变量，而在新的方法中将这些变量都放在自己的类层次中，这样就能够独立地分别扩展它们。</li><li>最后，在新的方法中，系统的其他部分可以独立于SalesOrder使用或测试这些更小的操作。</li><li>总而言之，模式所提倡的方法伸缩性更强，这是原来直接使用继承的方法所不具备的。</li></ul><p>这种方法使业务规则能够独立于自己的SalesOrder对象而发生改变。请注意对于目前和未来可能出现的任何情况，这种方法都行之有效。这种”将算法封装在一个抽象类（CalcTax）中，而且在某一时刻能够互换地使用其中之一“的方法，本质上就是Strategy模式。</p><h2 id="三、Strategy模式：关键特征"><a href="#三、Strategy模式：关键特征" class="headerlink" title="三、Strategy模式：关键特征"></a>三、Strategy模式：关键特征</h2><ul><li><p>意图：可以根据所处上下文，使用不同的业务规则或算法。</p></li><li><p>问题：对所需算法的选择取决于发出请求的客户或者要处理的数据。如果只有一些不会变化的算法，就不需要Strategy模式。</p></li><li><p>解决方案：将对算法的选择和实现分离。允许根据上下文进行选择。</p></li><li><p>参与者与协作者：</p><ul><li>Strategy指定了如何使用不同的算法。</li><li>各ConcreteStrategy实现了这些不同的算法。</li><li>Context通过类型为Strategy的引用使用具体的ConcreteStrategy。Strategy与Context相互作用以实现所选的算法。Conetext将来自Client的请求转发给Strategy。</li></ul></li><li><p>效果：</p><ul><li>Strategy模式定义了一系列的算法。</li><li>可以不使用switch语句或者条件语句。</li><li>必须以相同的方式调用所有的算法（它们必须拥有相同的接口）。各ConcreteStrategy与Conetxt之间的相互作用可能需要在Context中加入获取状态的方法。</li></ul></li><li><p>实现：让使用算法的类（Context）包含一个抽象类（Strategy），该抽象类有一个抽象方法指定如何调用算法。每个派生类按需要实现算法。</p><p>注意：在原型Strategy模式中，选择所用具体实现的职责由Client对象承担，并转给Strategy模式的Context对象。</p><p>​                </p><p><img src="/2019/Strategy模式/Strategy%E6%A8%A1%E5%BC%8F%E9%80%9A%E7%94%A8%E7%BB%93%E6%9E%84%E5%9B%BE.PNG" alt="Startegy模式通用结构图"></p></li></ul><h2 id="四、使用Strategy模式"><a href="#四、使用Strategy模式" class="headerlink" title="四、使用Strategy模式"></a>四、使用Strategy模式</h2><p>&emsp;&emsp;从技术角度而言，Strategy模式就是用来封装算法的。但是在实践中，它可以用来封装几乎任何类型的规则。</p><p>&emsp;&emsp;Strategy模式要求所封装的算法（业务规则）应处在使用它们的类（Context）之外。这意味着Strategy模式所需信息必须要么传递给它们，要么以某种形式获得。</p><p>&emsp;&emsp;Strategy模式还简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。如果算法不像Strategy模式中那样移出来，Context和Strategy之间的耦合将使测试非常苦难。例如，在实例化Context对象之前可能还有一些前提条件。或者，Context可能通过保护数据成员提供Strategy所需信息。如果同时存在几个不同系列的算法，测试能够进一步简化。这是因为使用Strategy模式，开发人员不需要操心与Context耦合所带来的各种相互作用。也就是说，我们应该能够独立地测试每个算法，而无需担心可能地所有组合情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Strategy模式&quot;&gt;&lt;a href=&quot;#一、Strategy模式&quot; class=&quot;headerlink&quot; title=&quot;一、Strategy模式&quot;&gt;&lt;/a&gt;一、Strategy模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一系列的算法，把它们一个个封装
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Strategy模式" scheme="https://wanqbin.xyz/tags/Strategy%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://wanqbin.xyz/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="对象行为型模式" scheme="https://wanqbin.xyz/tags/%E5%AF%B9%E8%B1%A1%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Adapter模式</title>
    <link href="https://wanqbin.xyz/2019/Adapter%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wanqbin.xyz/2019/Adapter模式/</id>
    <published>2019-11-24T14:58:00.000Z</published>
    <updated>2019-11-25T11:15:46.033Z</updated>
    
    <content type="html"><![CDATA[<p>一、Adapter模式</p><blockquote><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使原本由于接口不兼容而不能一起工作的类可以一起工作。</p><p>​                                                                                                                                                                                            ——《设计模式》</p></blockquote><p>即：我们需要一种方式，为一个功能正确但接口不合的对象创建一个新的接口。</p><p>二、学习Adapter模式</p><p>假设客户提出的需求为：</p><ul><li>为都有“显示”(display)行为的点、线、正方形分别创建类；</li><li>客户对象不必知道自己到底拥有点、线还是正方形。他们只需要知道拥有这些形状中的一个。</li></ul><p>也就是说，我想要用一个更高层次的概念将这些具体形状都涵盖进入，这个高层概念可以称为“可显示的形状”。</p><p>也就是说，尽管系统中有点、线以及正方形，但是我希望客户对象认为只有形状。</p><ul><li>这样客户对象可以以相同的方式处理所有对象——无需关注它们的区别。</li><li>这样我未来还可以在客户对象不修改的情况下添加新的形状类型。</li></ul><p>这里将使用多态，也就是说，我的系统中将有许多不同的对象，但我希望对象的客户与它们交互的方式是通用的。</p><p>这里，客户对象只是简单地让点、线或正方形对象进行一些操作，比如“自我显示”或“自我擦除”。然后由每个点、线、正方形负责了解如何按自己的类型完成相应的行为。</p><p>为了实现这一点，我创建了一个Shape类，然后从它派生出表示点、线、正方形的类。如下图所示：</p><p><img src="/2019/Adapter模式/Adapter1.PNG" alt="Point,Line,Square继承自Shape"></p><p>首先，我必须指定Shape对象应提供的具体行为。为此，我在Shape类中为这些行为定义了接口，然后在每个派生类中都相应地实现了这些功能。</p><p>Shape类需要具备以下行为：</p><ul><li>设定一个Shape对象的位置</li><li>获取一个Shape对象的位置</li><li>显示一个Shape对象</li><li>填充一个Shape对象</li><li>设置一个Shape对象的颜色</li><li>擦除一个Shape对象</li></ul><p><img src="/2019/Adapter模式/Adapter%E6%98%BE%E7%A4%BA%E6%96%B9%E6%B3%95.PNG" alt="显示了方法的Point，Line，Square"></p><p>假设现在客户要求实现一个圆——一种新的Shape。为此，我创建了一个新的类——Circle类来实现，并从Shape类派生出Circle类，这样我仍然可以获得多态行为。</p><p>那么，我必须为Circle类编写display,fill和undisplay方法。但是，我现在找到了一个现有的处理圆形的xxCircle类，但是这个类中的方法命名如下：</p><ul><li>displayIt</li><li>fillIt</li><li>undisplayIt</li></ul><p>这里，我不能直接使用xxCircle类，因为我想保持Shape类的多态行为。这有两个原因：</p><ul><li>名称和参数列表不同</li><li>我无法派生它</li></ul><p>而xxCircle无法修改。</p><p>既然无法改变，那就想办法适配！</p><p>我可以创建一个新类，它就是派生自Shape类，因此实现了Shape的接口，但是又用不着重写xxCircle类中的圆形的实现代码。</p><ul><li>Circle类派生自Shape</li><li>Circle包含xxCircle</li><li>Circle将发给自己的请求传送给xxCircle对象。</li></ul><p>![Adapter模式：Circle类包装了xxCircle类](Adapter Circle包装了xxCircle类.PNG)</p><p>当Circle对象实例化的时候，它必须实例化一个xxCircle对象。发给Circle对象的任何请求都将转给该xxCircle对象。如果能够总是如此，而且xxCircle对象具有Circle对象所需要的全部功能，Circle对象就可以通过让xxCircle做实际工作来实现自己的行为。</p><p>实现Adapter模式：</p><p>Shape.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Shape(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">virtual</span> <span class="title">display</span><span class="params">()</span></span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Shape(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Shape.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Shape::Shape(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape::~Shape(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Circle.h</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Shape.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"XX_Circle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(XX_Circle *xxCircle);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~Circle(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    XX_Circle *myXX_Circle;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Circle.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"></span><br><span class="line">Circle::Circle(XX_Circle *xxCircle)</span><br><span class="line">&#123;</span><br><span class="line">    myXX_Circle = xxCircle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Circle::~Circle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> myXX_Circle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Circle::display()</span><br><span class="line">&#123;</span><br><span class="line">    myXX_Circle-&gt;displayIt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XX_Circle.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XX_Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    XX_Circle(<span class="keyword">void</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">displayIt</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~XX_Circle(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>XX_Circle.cpp</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"XX_Circle.h"</span></span></span><br><span class="line"></span><br><span class="line">XX_Circle::XX_Circle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">XX_Circle::~XX_Circle(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、Adapter模式：关键特征</p><ul><li>意图：使控制范围之外的一个原有对象与某个接口匹配。</li><li>问题：系统的数据和行为都正确，但接口不符。通常用于必须从抽象类派生时。</li><li>解决方案：Adapter模式提供了具有所需接口的包装类。</li><li>参与者与协作者：Adapter改变了Adaptee的接口，使Adaptee与Adapter的基类Target匹配。这样Client就可以使用Adaptee了，好像它是Target类型的。</li><li>效果：Adapter模式使原有对象能够适应新的类结构，不受其接口的限制。</li><li>实现：将原有类包含在另一个类中。让包含类与需要的接口匹配，调用被包容类的方法。</li></ul><p>四、Adapter模式与Facade模式</p><table><thead><tr><th></th><th>Facade模式</th><th>Adapter模式</th></tr></thead><tbody><tr><td>是否存在既有的类？</td><td>是</td><td>是</td></tr><tr><td>是否必须按某个接口设计？</td><td>否</td><td>是</td></tr><tr><td>对象需要多态行为吗？</td><td>否</td><td>可能</td></tr><tr><td>需要更简单的接口吗？</td><td>是</td><td>否</td></tr></tbody></table><p>从上表中，我们可以看到以下内容：</p><ul><li>在两个模式中，都存在既有的类</li><li>但是在Facade模式中，我无须按某个接口进行设计；而在Adapter模式中，则必须按某个特定的接口设计</li><li>在Facade模式中，我不需要多态行为，而Adapter模式中，多态行为可能是需要的</li><li>Facade模式中的动机是简化接口。而在Adapter模式中，尽管也是越简单越好，但是设计必须遵循一个已有的接口，不能简化任何东西，即使可能存在更简单的接口。</li></ul><p>结论：Facade模式简化了接口，而Adapter模式则将一个已有的接口转换成另一个接口。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、Adapter模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将一个类的接口转换成客户希望的另外一个接口。Adapter模式使原本由于接口不兼容而不能一起工作的类可以一起工作。&lt;/p&gt;
&lt;p&gt;​                                       
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Adapter模式" scheme="https://wanqbin.xyz/tags/Adapter%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="https://wanqbin.xyz/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="类对象结构型模式" scheme="https://wanqbin.xyz/tags/%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Facade模式</title>
    <link href="https://wanqbin.xyz/2019/Facade%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wanqbin.xyz/2019/Facade模式/</id>
    <published>2019-11-24T14:55:00.000Z</published>
    <updated>2019-11-25T11:16:07.293Z</updated>
    
    <content type="html"><![CDATA[<p>一、Facade 模式</p><blockquote><p>为子系统中的一组接口提供一个统一接口。Facade模式定义了一个更高层的接口，使子系统更加容易使用。</p><p>​                                            </p><p>​                                                                                                                                                                                            ——《设计模式》</p></blockquote><p>即：我们需要用一种比原有方式更简单的办法与系统交互，或者说，我们需要以一种特殊的方式使用系统（例如以二维的方式使用一个三维绘图程序）。</p><p>二、Facade 模式：关键特征</p><ul><li><p>意图：希望简化原有系统的使用方式。需要定义自己的接口。</p></li><li><p>问题：只需要使用某个复杂系统的子集，或者，需要以一种特殊的方式与系统交互。</p></li><li><p>解决方案：Facade为原有系统的客户提供了一个新的接口。</p></li><li><p>参与者与协作者：为客户提供一个简单的接口，使系统更容易使用。（接口本身和各个子系统）</p></li><li><p>效果：Facade模式简化了对所需子系统的使用过程。但是，由于Facade并不完整，因此客户可能无法使用某些功能。</p></li><li><p>实现：</p><ul><li><p>注意点：</p><ul><li>降低客户-子系统之间的耦合度。用抽象类实现Facade而它的具体子类对应于不同的子系统实现，这可以进一步降低客户与子系统的耦合度。</li><li>公共子系统与私有子系统。一个子系统与一个类的相似之处是，它们都有接口，并且都封装了一些东西——类封装了状态和操作，而子系统封装了一些类。考虑一个类的公共和私有接口是有益的，我们也可以考虑子系统的公共和私有接口。<ul><li>子系统的公共接口包含所有的客户程序可以访问的类</li><li>私有接口仅用于对子系统进行扩充。</li><li>Facade类是公共接口的一部分，但它不是唯一的部分，子系统的其他部分通常也是公共的。</li></ul></li></ul></li><li><p>定义一个（或多个）具备所需接口的新类。</p></li><li><p>让新的类使用原有的系统。</p></li></ul></li></ul><p>三、Facade模式：实践</p><p><img src="/2019/Facade模式/Facade%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8%E5%89%8D.PNG" alt="Facade模式使用前"></p><p>假设Client对象必须处理Database，Model，Element对象。Client必须首先通过Database对象打开数据库，获取Model对象，然后再查询Model对象，获取Element对象，最后请求Element对象的信息。如果能够创建一个可供Client查询的Database Facade，那么，以上过程将容易得多。</p><p><img src="/2019/Facade模式/Facade%E6%A8%A1%E5%BC%8F.PNG" alt="Facade模式可以减少客户需要处理的对象数量"></p><p>Facade模式提出了一种通用方法：它为我提供了起点。这个模式的Facade部分实际上就是创建了一种新的接口供客户使用，来替代原有的接口。之所以能够这样做，是因为Client对象并不需要原系统提供的所有功能。</p><p>Facade模式还可以用来隐藏或者封装系统。Facade类能够将系统作为自己的私有成员包含进来。在此情况下，原系统将与Facade类联系起来，但Facade类的客户无需看到。</p><p>封装系统的原因如下：</p><ul><li>跟踪系统的使用情况——通过强制所有系统的访问都必须经过Facade，可以很容易地监视系统地使用情况。</li><li>改换系统——未来可能需要切换系统。通过将原系统作为Facade类地一个私有成员，可以最省力地切换到新的系统。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、Facade 模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为子系统中的一组接口提供一个统一接口。Facade模式定义了一个更高层的接口，使子系统更加容易使用。&lt;/p&gt;
&lt;p&gt;​                                            &lt;/
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="对象结构型模式" scheme="https://wanqbin.xyz/tags/%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Facade模式" scheme="https://wanqbin.xyz/tags/Facade%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="外观模式" scheme="https://wanqbin.xyz/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>UML和类图</title>
    <link href="https://wanqbin.xyz/2019/UML%E5%92%8C%E7%B1%BB%E5%9B%BE/"/>
    <id>https://wanqbin.xyz/2019/UML和类图/</id>
    <published>2019-11-24T09:03:00.000Z</published>
    <updated>2019-11-24T09:09:07.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是UML？"><a href="#一、什么是UML？" class="headerlink" title="一、什么是UML？"></a>一、什么是UML？</h2><p>UML是一种用来创建程序模型的图形语言（即带有语义的一种图形记号）。</p><h3 id="1-UML图及其用途"><a href="#1-UML图及其用途" class="headerlink" title="1. UML图及其用途"></a>1. UML图及其用途</h3><table><thead><tr><th>当你在……</th><th>所使用的UML图</th></tr></thead><tbody><tr><td>分析阶段</td><td>用例图，所涉及的是与系统之间交互的实体，以及需要实现的功能点</td></tr><tr><td></td><td>活动图，关注的是【问题领域和其他主体工作的实际空间，程序的主题领域】的工作流，而不是程序的逻辑流</td></tr><tr><td>观察对象的交互</td><td>交互图，说明了特定对象如何相互交互。因为它们处理的都是具体情况而不是一般情况，所以在检查需求和设计时都很有用。最常见的一种交互图是顺序图。</td></tr><tr><td>设计阶段</td><td>类图，详细说明了类之间的关系</td></tr><tr><td>观察对象所处状态不同时行为的差异</td><td>状态图，详细描述了对象可能所处的不同状态以及在这些状态之间的转换。</td></tr><tr><td>配置阶段</td><td>部署图，说明如何部署不同模块。</td></tr></tbody></table><h3 id="2-为什么使用UML？"><a href="#2-为什么使用UML？" class="headerlink" title="2. 为什么使用UML？"></a>2. 为什么使用UML？</h3><ul><li><p>UML主要是用来交流的。</p></li><li><p>UML提供了一种方法，可以用来确定我对系统的理解是否与其他人相同。因为系统非常复杂，有许多不同种类的信息需要传递，所以UML提供了许多不同的图专门表示不同种类的信息。</p></li></ul><h2 id="二、类图"><a href="#二、类图" class="headerlink" title="二、类图"></a>二、类图</h2><p>类图不仅描述了类，而且说明了类之间的关系。这些关系可能有以下这些类型：</p><ul><li>当一个类是“一种”另一个类时：<code>is-a</code>（是一种/一个）关系</li><li>当两个类之间存在关联时：<ul><li>一个类“包含”另一个类：<code>has-a</code>（拥有一个）关系；</li><li>一个类“使用”另一个类：<code>use-a</code>（使用一个）关系；</li><li>一个类“创建”另一类</li></ul></li></ul><p>这些类型还有一些变体。比如，说“什么东西包含另一个东西”时，我们可能是指：</p><ul><li>被包含者是包含者的一部分（比如汽车中的发动机）</li><li>有一个集合，集合中东西可以独立存在（比如机场上的飞机）</li></ul><p>第一种情况被称为<strong>组合</strong>(composition)，第二种情况被称为<strong>聚集</strong>(aggregation)。</p><p>首先，矩形表示一个类。在UML中，可以表示最多三个方面的类的信息：</p><ul><li>类名</li><li>类的数据成员</li><li>类的方法（函数）</li></ul><p><img src="/2019/UML和类图/%5C%E7%B1%BB%E5%9B%BE%E2%80%94%E2%80%94%E4%B8%89%E7%A7%8D%E5%8F%98%E4%BD%93.PNG" alt="类图——三种变体"></p><p>表示类的信息有三种不同方式：</p><ul><li>最左边的矩形只显示了类名。在不需要更详细信息时，可以使用类的这种表示形式。</li><li>中间的举行显示了类名和类的方法。Square类有一个display方法。display前的加号（+）表示此方法是公开的。</li><li>最右边的矩形除显示了前面的信息之外，还显示了类的数据成员。</li></ul><p>表示访问权限的UML记号：</p><ul><li>公开——用一个加号（+）标记。</li><li>保护——用一个井号（#）标记。</li><li>私有——用一个减号（-）标记。</li></ul><p>表示关系的UML记号有如下四种：</p><p><img src="/2019/UML和类图/%E8%A1%A8%E7%A4%BA%E5%85%B3%E7%B3%BB%E7%9A%84UML%E8%AE%B0%E5%8F%B7.PNG" alt="表示关系的UML记号"></p><p>类图还可以表示不同类之间的关系。下图显示了Shape类和它的几个派生类之间的关系。</p><p><img src="/2019/UML和类图/is-a%E5%85%B3%E7%B3%BB.PNG" alt="is-a关系的类图"></p><p>上图说明了几件事：</p><ul><li>首先，Shape类下面的箭头的意思是：指向Shape的那些类派生自Shape类。</li><li>而且，Shape类的名字使用<em>斜体</em>表示的，说明它是一个抽象类。抽象类是用来为其派生类定义接口而且存放这些派生类共哦那个数据和方法的类。</li><li>接口可以看作是没有公共数据和方法的抽象类——它只用来作为一种“为要实现它的那些类的方法进行定义”的方式而已。</li></ul><p>如前所述，有两种<code>has-a</code>关系。</p><ul><li><p>一个对象可以拥有另一个对象，其中被包含的对象是包含对象的一部分——或者不是。</p><ul><li><p>在下图中，Airport“拥有”Aircraft。Aircraft并不是Airport的一部分，但仍然可以说Airport拥有Aircraft，这种关系称为<strong>聚集</strong>或<strong>聚合</strong>。</p><p><img src="/2019/UML和类图/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.PNG" alt="has-a关系"></p><ul><li>jet表示喷气式飞机，Helicopter表示直升飞机。</li></ul></li></ul></li><li><p>另一种<code>has-a</code>关系是包含，被包含的对象是包含对象的一部分，这种关系称为组合。</p><ul><li><p>在下图中，Car（轿车）拥有Tire（轮胎），后者是Car的一部分。</p></li><li><p>下图还显示Car使用了GasStation（加油站）类，这种使用关系用带箭头的虚线表示，也称为<strong>依赖</strong>。</p><p><img src="/2019/UML和类图/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.PNG" alt="组合&amp;&amp;依赖"></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是UML？&quot;&gt;&lt;a href=&quot;#一、什么是UML？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是UML？&quot;&gt;&lt;/a&gt;一、什么是UML？&lt;/h2&gt;&lt;p&gt;UML是一种用来创建程序模型的图形语言（即带有语义的一种图形记号）。&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://wanqbin.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML" scheme="https://wanqbin.xyz/tags/UML/"/>
    
      <category term="类图" scheme="https://wanqbin.xyz/tags/%E7%B1%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>面向对象泛型</title>
    <link href="https://wanqbin.xyz/2019/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%B3%9B%E5%9E%8B/"/>
    <id>https://wanqbin.xyz/2019/面向对象泛型/</id>
    <published>2019-11-23T09:44:00.000Z</published>
    <updated>2019-11-23T09:45:27.753Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象泛型以对象概念为中心，一切都集中在对象之上，编写代码时是围绕对象而非函数进行组织的。</p><p>使用对象的优点在于，可以定义自己负责自己的事物。对象天生就知道自己的类型。对象中的数据能够告诉它自己的转台如何，而对象中的代码能够使它正确工作。</p><table><thead><tr><th>对象</th><th>责任</th></tr></thead><tbody><tr><td>Student</td><td>知道自己所在的教室;知道自己下堂课的教室；从一个教室到下一个教室</td></tr><tr><td>Instructor</td><td>告诉学生到下堂课的教室去</td></tr><tr><td>Classroom</td><td>有明确的地址</td></tr><tr><td>Direction giver</td><td>对于给定的两个教室，指出从一个教室到另一个教室的路线</td></tr></tbody></table><p>在这种情况下，对象是通过寻找在问题领域中的实体而被发现的。然后再通过查看这些实体需要做些什么，为每个对象确定责任。这与通过在需求中寻找名词发现对象和通过寻找动词发现方法的技术是一致的。</p><p>理解对象的最佳方式，是将其看成“具有责任的东西”。</p><p>有一条好的设计规则：对象应该自己负责自己，而且应该清楚地定义责任。</p><p>从<strong>软件开发过程中的视角</strong>观察对象：</p><ul><li>在概念层次上，对象是一组责任</li><li>在规约层次上，对象是一组可以被其他对象或对象自己调用的方法</li><li>在实现层次上，对象是代码和数据，以及它们之间的计算交互。</li></ul><p>因为对象具有责任并且自己负责自己，所以必须有方法告诉对象要做什么。对象含有说明自己状态的数据，还有实现必要功能的方法。对象的很多方法都将标识为可被其他对象调用。这些方法的集合就称为对象的公共接口。</p><p>面向对象的相关术语：</p><table><thead><tr><th>术语</th><th>描述</th></tr></thead><tbody><tr><td>抽象类（abstract class）</td><td>定义了一组相关类的行为。</td></tr><tr><td>类(class)</td><td>根据对象所具有的责任定义对象的类型。责任可以访问行为和/或状态。这些分别是由方法和/或数据实现的。</td></tr><tr><td>具体类(concrete class)</td><td>实现抽象类某一特定类型行为的类。具体类是一个概念特定、不变的实现。</td></tr><tr><td>封装(encapsulation)</td><td>通常定义为数据隐藏，但最好将它看作任何形式的隐藏（类型、实现和设计等等）</td></tr><tr><td>继承(inheritance)</td><td>一个类继承另一个类，是指它接受了该类的一些或者所有性质。其实类被称为基类、超类、父类或泛化类，而继承类称为派生类、子类或特化类</td></tr><tr><td>实例(instance)</td><td>类的特例（总是一个对象）。类的特殊实例或实体。每个对象都有自己的状态。因此，同一个类型（类）可以有多个对象。</td></tr><tr><td>实例化(instantiation)</td><td>创建类的一个实例的过程。</td></tr><tr><td>接口(interface)</td><td>接口与类类似，但是只为其成员提供规约而不提供实现。它与只含有抽象成员的抽象类很相似。编程的时候，如果需要几个类共享公共基类中没有的一些特性，而且希望确保每个类自己实现这些特定（因为所有成员都是抽象的），就应该使用接口。</td></tr><tr><td>视角(perspective)</td><td>观察对象有三种视角：概念视角、规约视角和实现视角。这三个不同层次的区别在理解抽象类与其派生类之间的关系上用处很大。抽象类定义了如何在概念层次上解决问题，还提供了与任何派生对象通信的规约。每个派生类都按需要提供特定的实现。</td></tr><tr><td>多态(polymorphism)</td><td>能够用一种方式引用一个类的不同派生类，但获得的行为对应于所引用的派生类。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面向对象泛型以对象概念为中心，一切都集中在对象之上，编写代码时是围绕对象而非函数进行组织的。&lt;/p&gt;
&lt;p&gt;使用对象的优点在于，可以定义自己负责自己的事物。对象天生就知道自己的类型。对象中的数据能够告诉它自己的转台如何，而对象中的代码能够使它正确工作。&lt;/p&gt;
&lt;table
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面向对象泛型" scheme="https://wanqbin.xyz/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象泛型之前：功能分解</title>
    <link href="https://wanqbin.xyz/2019/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%B3%9B%E5%9E%8B%E4%B9%8B%E5%89%8D%EF%BC%9A%E5%8A%9F%E8%83%BD%E5%88%86%E8%A7%A3/"/>
    <id>https://wanqbin.xyz/2019/面向对象泛型之前：功能分解/</id>
    <published>2019-11-23T09:43:00.000Z</published>
    <updated>2019-11-23T09:44:21.098Z</updated>
    
    <content type="html"><![CDATA[<p>功能分解方法的一个问题在于，它通常会导致让一个“主“程序负责控制子程序，这是将功能分解为多个子功能的自然结果。但是主程序所承受的责任太多了：要确保一切正常工作，还要协调各函数并控制它们的先后顺序，因此经常会产生非常复杂的代码。如果让一些子函数负责自己的行为，并且能够告诉主函数执行某些任务，并信任它知道如何执行，这种方式比功能分解的方式要容易得多。这就是所谓的<strong>委托</strong>。</p><p>功能分解的另一个问题是，它在为未来可能出现的变化未雨绸缪方面，在对代码合适地改进方面，都于事无补。变化是无可避免的，经常是因为自己要为已有的主题增加新的变体。例如，我可能不得不处理新的形状，或者需要显示形状的新办法。如果将实现各步骤的所有逻辑代码都放在一个大函数或者大模块中的话，那么这些步骤的任何实质性变化，都必须都这个函数或模块进行修改。</p><p>内聚性指的是”例程中操作之间的紧密程度“。</p><p>耦合性指的是”两个例程之间联系的紧密程度。耦合性与内聚性是相辅相成的关系。内聚性描述的是一个例程内部组成部分之间相互联系的紧密程度，而耦合性描述的是一个例程与其他例程之间联系的紧密程度。软件开发的目标应该是创建这样的例程：内部完成（高内聚），而与其他例程之间的联系则是小巧、直接、可见、灵活的“。</p><blockquote><p>假设你是一个会议的讲师，听课的人课后还要去听其他课，但它们不知道下一堂课的听课地点。你的责任之一，就是确保大家都知道下一堂课去哪里上。</p></blockquote><p>如果按照结构化程序设计的方法，可以这样做:</p><ol><li>获得听课人的名字</li><li>对于名单上的每个人，做以下工作：<ul><li>找到他要听的下一节课</li><li>找到该课的听课地点</li><li>找到从你的教师到下一堂课地点怎么走</li><li>告诉这个人怎样去上下一堂课</li></ul></li></ol><p>为了完成上面的工作，你可能需要编写：</p><ol><li>获得听课人名单的方法</li><li>获得每个人课程表方法</li><li>告诉某个人如何从你的教室到其他教室的程序</li><li>为听课的每个人服务的一个控制程序，它可以为每个人完成所需的步骤</li></ol><blockquote><p>你可能会把从这个教室到其他教室的路线贴出来，然后告诉课堂上的所有人：”我已经将下一堂课的地点和其他教室的位置都贴在教室后面了。请根据它找到你们下一堂课的教室。“</p><p>可以预期每个人都知道自己的下一堂课是什么，而且他们都能从你提供的列表中查到正确的教室，然后按照指示找到它。</p></blockquote><p>这两种方法的区别何在？</p><ul><li>第一种，直接给没每个人都提供提示，你必须密切关注大量细节，除你之外没有其他人负责。</li><li>第二种，你只给出通用的提示，然后期待每个人会自己弄清怎样完成任务。</li></ul><p><strong>其中最大的区别就是这样责任的转移</strong></p><p>第二种方法有以下三种不同：</p><ul><li>人们对自己的行为负责，而不再由一个中央控制程序负责决定他们的行为。</li><li>控制程序可以与不同类型的人交流，好像他们都一样。</li><li>控制程序不需要知道学生从此教室到彼教室可能采取的任何特殊步骤。</li></ul><p>软件开发过程中的视角</p><table><thead><tr><th>视角</th><th>描述</th></tr></thead><tbody><tr><td>概念</td><td>这种视角要回答的问题是：”软件要负责什么？“</td></tr><tr><td>规约</td><td>考虑软件的接口，而不是实现。这个视角要回答的问题是：”怎么使用软件？“</td></tr><tr><td>实现</td><td>这个视角要回答的问题是：”软件怎样履行自己的责任？“</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;功能分解方法的一个问题在于，它通常会导致让一个“主“程序负责控制子程序，这是将功能分解为多个子功能的自然结果。但是主程序所承受的责任太多了：要确保一切正常工作，还要协调各函数并控制它们的先后顺序，因此经常会产生非常复杂的代码。如果让一些子函数负责自己的行为，并且能够告诉主函
      
    
    </summary>
    
      <category term="设计模式" scheme="https://wanqbin.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面向对象" scheme="https://wanqbin.xyz/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>私有docker仓库搭建</title>
    <link href="https://wanqbin.xyz/2019/%E7%A7%81%E6%9C%89docker%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/"/>
    <id>https://wanqbin.xyz/2019/私有docker仓库搭建/</id>
    <published>2019-11-20T03:06:00.000Z</published>
    <updated>2019-11-20T03:07:49.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>&emsp;&emsp;使用公有仓库，我们可以很方便地分享自己的镜像，也可以使用其他人分享的镜像。但是有时候，公有仓库并不是很适合，比如某些镜像可能只是希望在内部用户间共享，这时可以搭建一个私有的仓库服务器。</p><p>&emsp;&emsp;搭建私有的仓库服务器有两种方式：一是使用容器运行docker-registry，二是本地安装运行docker-registry。</p><p>&emsp;&emsp;docker-registry是一个基于Python的开源项目，为我们提供了私有镜像服务器的功能。</p><h2 id="二、使用容器运行docker-registry"><a href="#二、使用容器运行docker-registry" class="headerlink" title="二、使用容器运行docker-registry"></a>二、使用容器运行docker-registry</h2><ol><li><h3 id="获取官方镜像"><a href="#获取官方镜像" class="headerlink" title="获取官方镜像"></a>获取官方镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure></li><li><h3 id="运行registry"><a href="#运行registry" class="headerlink" title="运行registry"></a>运行registry</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 registry   #-d表示表示后台运行，-p表示端口映射</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过上面的命令，我们的私有服务器就以默认参数运行了。我们也可以配合使用<code>-e</code>和<code>-v</code>参数来该该改变服务器的运行参数。一是配置文件的路径，二是仓库的路径。</p><ul><li><h4 id="配置文件的路径：通过类似下面的命令改变："><a href="#配置文件的路径：通过类似下面的命令改变：" class="headerlink" title="配置文件的路径：通过类似下面的命令改变："></a>配置文件的路径：通过类似下面的命令改变：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 -v /home/share/registry-conf:/root/registry-conf -e DOCKER_REGISTRY_CONFIG=/root/registry-conf/config.yaml registry</span><br></pre></td></tr></table></figure><p>在本地目录<code>/home/share/registry-conf</code>下存放着要使用的配置文件，通过<code>-v</code>参数将它映射到容器的<code>/root/registry-conf</code>目录，使用<code>-e</code>用环境变量的方式指定<code>/root/registry-conf/config.yaml</code>为程序的配置文件。</p></li><li><h4 id="配置仓库路径：通过类似下面的命令改变："><a href="#配置仓库路径：通过类似下面的命令改变：" class="headerlink" title="配置仓库路径：通过类似下面的命令改变："></a>配置仓库路径：通过类似下面的命令改变：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry</span><br></pre></td></tr></table></figure><p>官方镜像使用的仓库路径是<code>/tmp/registry</code>，我们通过把本地路径映射到<code>/tmp/registry</code>。可以让服务器把镜像保存到我们自定义的路径下。</p></li></ul><p>这里我使用的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -p 5000:5000 -v /data/registry:/var/lib/registry  --restart=always --name registry registry:latest</span><br></pre></td></tr></table></figure><ul><li>–restart=always：这是重启策略，加入这个容器异常退出会自动重启容器</li><li>–name registry：创建容器命名为registry</li><li>registry:latest：这是刚刚pull下来的镜像</li></ul></li><li><h3 id="配置-etc-docker-daemon-json"><a href="#配置-etc-docker-daemon-json" class="headerlink" title="配置/etc/docker/daemon.json"></a>配置<code>/etc/docker/daemon.json</code></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"insecure-registries"</span>:[<span class="string">"192.168.43.114:5000"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>192.168.43.114</code>是私有仓库的IP地址。</p><p>其他机器pull私有仓库镜像的时候，也需要在该文件中添加如上内容。</p></li><li><h3 id="查看镜像仓库中的镜像"><a href="#查看镜像仓库中的镜像" class="headerlink" title="查看镜像仓库中的镜像"></a>查看镜像仓库中的镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:5000/v2/_catalog</span><br></pre></td></tr></table></figure></li><li><h3 id="为镜像打标签"><a href="#为镜像打标签" class="headerlink" title="为镜像打标签"></a>为镜像打标签</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 镜像名 127.0.0.1:5000/镜像名</span><br></pre></td></tr></table></figure></li><li><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 127.0.0.1:5000/镜像名</span><br></pre></td></tr></table></figure></li><li><h3 id="拉取私有仓库镜像"><a href="#拉取私有仓库镜像" class="headerlink" title="拉取私有仓库镜像"></a>拉取私有仓库镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.43.114:5000/镜像名</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、在本地安装运行docker-registry"><a href="#三、在本地安装运行docker-registry" class="headerlink" title="三、在本地安装运行docker-registry"></a>三、在本地安装运行docker-registry</h2><p>&emsp;&emsp;这里使用的CentOS7。</p><ul><li><h3 id="安装相关依赖库"><a href="#安装相关依赖库" class="headerlink" title="安装相关依赖库"></a>安装相关依赖库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-devel libevent-devel python-pip gcc xz-devel</span><br></pre></td></tr></table></figure></li><li><h3 id="安装相关python模块"><a href="#安装相关python模块" class="headerlink" title="安装相关python模块"></a>安装相关python模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn pyyaml flask flask-cors rsa gevent</span><br></pre></td></tr></table></figure></li><li><h3 id="安装docker-registry"><a href="#安装docker-registry" class="headerlink" title="安装docker-registry"></a>安装docker-registry</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python-pip install docker-registry</span><br></pre></td></tr></table></figure></li><li><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>通过下面的命令，可以启动服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --access-logfile /var/log/docker-registry/access.log --error-logfile /var/log/docker-registry/server.log -k gevent --max-requests 100 --graceful-timeout 3600 -t 3600 -b 127.0.0.1:5000 -w 1 docker_registry.wsgi:application</span><br></pre></td></tr></table></figure><p>使用HTTP方式访问本地的5000端口，如果看到类似下面的输出，说明服务器正常运行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:5000</span><br><span class="line">"\"docker-registry server\""</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用公有仓库，我们可以很方便地分享自己的镜像，也可以使用其他人分享的镜像。但是有时候，公有仓库并不是
      
    
    </summary>
    
      <category term="分布式与云计算" scheme="https://wanqbin.xyz/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="docker" scheme="https://wanqbin.xyz/tags/docker/"/>
    
      <category term="私有仓库" scheme="https://wanqbin.xyz/tags/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    
      <category term="registry" scheme="https://wanqbin.xyz/tags/registry/"/>
    
  </entry>
  
</feed>
