<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aoki&#39;s Blog</title>
  
  <subtitle>“吾生也有涯，而知无涯”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wanqbin.xyz/"/>
  <updated>2019-06-15T05:15:34.389Z</updated>
  <id>http://wanqbin.xyz/</id>
  
  <author>
    <name>Aoki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件需求分析</title>
    <link href="http://wanqbin.xyz/2019/06/15/%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>http://wanqbin.xyz/2019/06/15/软件需求分析/</id>
    <published>2019-06-15T05:15:00.000Z</published>
    <updated>2019-06-15T05:15:34.389Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>&emsp;需求分析的输入是软件的《合同》或《立项建议书》，以及对用户现场的调研、分析和确认，输出是《用户需求报告》。</p><h2 id="一、需求分析是什么？"><a href="#一、需求分析是什么？" class="headerlink" title="一、需求分析是什么？"></a>一、需求分析是什么？</h2><p>&emsp;在对需求分析进行了解之前，得知道需求分析是什么。</p><p>&emsp;需求分析的定义如下：</p><ol><li>用户解决问题或达到目标所需的条件或能力</li><li>系统或系统部件要满足合同、标准、规范或其他正式文档规定所需具有的条件或能力</li><li>一种反映1或2所描述的条件或能力的文档说明</li></ol><p>&emsp;我对需求分析的定义时理解是，需求分析中的文档说明起到了至关重要的作用。</p><p>&emsp;当然对于一个软件系统来说，前期的需求分析是十分重要的，这几乎可以决定软件系统开发的成败。</p><h2 id="二、需求获取的三原则"><a href="#二、需求获取的三原则" class="headerlink" title="二、需求获取的三原则"></a>二、需求获取的三原则</h2><p>&emsp;所谓需求获取，就是开发者与用户共同提取并共同确认需求。“划分、抽象、投影”是需求获取的三要素。</p><ol><li>划分，就是捕获问题空间的“整体/部分”关系。</li><li>抽象，就是捕获问题空间的“一般/特殊”或“一般/特例”关系。</li><li>投影，就是捕获问题空间的多维”视图“。</li></ol><p>&emsp;我对这三原则的理解可能欠妥，但这是我在学习过程中的一些想法。首先，划分，就是将整个系统进行划分，将复杂的系统划分为小系统，这样不仅可以简化系统分析的难度，同时，由于对其进行了划分，所以在需求分析的时候，能够对系统的需求细节进行完善。</p><p>&emsp;其次是抽象，对于一个软件系统，能够实现功能的复用性是再好不过了，那么就需要对需求中的“特殊”扩展泛华为“一般”，依次来实现复用。</p><p>&emsp;最后是投影，程序的实质是对现实世界的投影，是对现实世界中不同角色工作流程或工作业务的抽象处理，而对于一个系统来说，操作它的可能有三种角色，比如，高层领导，中层管理和基层操作人员。而这三种角色的业务流程和工作业务是不同，需要从三维视图进行分析。</p><h2 id="三、需求分析的任务是什么？"><a href="#三、需求分析的任务是什么？" class="headerlink" title="三、需求分析的任务是什么？"></a>三、需求分析的任务是什么？</h2><ol><li>画出目标系统的组织结构图，列出各部门的岗位角色表，即组织机构模型。</li><li>画出目标系统的业务操作流程图，即业务模型。</li><li>画出目标系统的数据流图，即单据和报表的流图，掌握业务规则，获得初步的数据模型</li><li>列出目标系统的功能点列表，即功能模型。</li><li>列出系统的性能点列表，即性能模型。</li><li>确定目标系统的接口列表，即接口模型</li><li>确定目标系统的运行环境，即环境模型</li><li>目标系统的界面约定，即界面模型</li><li>对目标系统的开发工期、费用、开发进度、系统风险等问题进行分析和评估。</li></ol><h2 id="四、面向流程分析"><a href="#四、面向流程分析" class="headerlink" title="四、面向流程分析"></a>四、面向流程分析</h2><p>&emsp;需求分析是面向流程的，而流程是动态的、实时的。系统的功能、性能、接口、界面都是在流程中反映出来的。在所有的流程中，数据流最为很重要，同时也最具代表性。因为在计算机网络系统中，一切流程都表现为数据流。所以，面向流程分析，实质上是面向数据流程分析或面向数据分析。计算机网络只认识数据，其他所有信息必须转化为数据之后才能流动，所以面向流程分析本质上是面向数据流程分析。</p><h2 id="五、需求分析的方法有哪些？"><a href="#五、需求分析的方法有哪些？" class="headerlink" title="五、需求分析的方法有哪些？"></a>五、需求分析的方法有哪些？</h2><p>&emsp;业界存在三种需求分析方法，分别是：面向功能分析、面向对象分析、面向数据分析。</p><p>&emsp;面向功能分析，是将软件需求看做一棵倒置的功能树，树根在上，树枝与树叶在下，每个节点都是一项具体的功能，从上到下，功能由粗到细，树根是总功能，树叶是细功能，整棵树就是一个信息系统的全部功能树。功能分析体现了“自顶向下，逐步求精”的思想，适合于“结构化分析、结构化设计、结构化编程、结构化测试、结构化组装、结构化维护”的传统式软件工程思想。</p><p>&emsp;面向对象分析，实质上是面向类分析，它也从系统的基本功能入手，或从与系统有关的人和事入手，将所有的功能需求找出来，然后将每一项功能对应一个对象集（类），分析每个对象集的属性、方法和包装方式，最后归并为相同对象集，删除冗余属性，用类与类之间的关联来表示所有的需求。</p><p>&emsp;面向数据分析，是面向元数据和中间数据分析。</p><h2 id="六、需求分析的描述工具有哪些？"><a href="#六、需求分析的描述工具有哪些？" class="headerlink" title="六、需求分析的描述工具有哪些？"></a>六、需求分析的描述工具有哪些？</h2><ol><li><p>面向元数据的需求描述工具</p><p>实体关系图</p></li><li><p>面向过程的需求描述工具</p><p>数据流图DFD、数据字典DD</p></li><li><p>面向对象的需求描述工具</p><p>用例图、类图、</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;&amp;emsp;需求分析的输入是软件的《合同》或《立项建议书》，以及对用户现场的调研、分析和确认，输出是《用户需求报告》。&lt;/p
      
    
    </summary>
    
      <category term="软件工程" scheme="http://wanqbin.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="需求分析" scheme="http://wanqbin.xyz/tags/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>软件生命周期模型</title>
    <link href="http://wanqbin.xyz/2019/06/15/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A8%A1%E5%9E%8B/"/>
    <id>http://wanqbin.xyz/2019/06/15/软件生命周期模型/</id>
    <published>2019-06-15T05:13:00.000Z</published>
    <updated>2019-06-15T12:20:55.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;开发一个软件项目，首先要选择并确定一个适合于该项目的软件生命周期模型，然后按照该软件生命周期模型的开发路线图，进行开发。</p><ol><li><h3 id="软件生命周期模型"><a href="#软件生命周期模型" class="headerlink" title="软件生命周期模型"></a>软件生命周期模型</h3><p>是指在整个软件生命周期中，软件开发过程应遵循的开发路线图。或者说，软件生命周期模型是软件开发全部过程、活动和任务的结构框架。</p></li><li><h3 id="软件生命周期的9个阶段"><a href="#软件生命周期的9个阶段" class="headerlink" title="软件生命周期的9个阶段"></a>软件生命周期的9个阶段</h3><p>1）立项（或签订合同）、下达任务书</p><p>2）需求分析</p><p>3）概要设计</p><p>4）详细设计</p><p>5）编码实现</p><p>6）软件测试</p><p>7）软件发布与实施</p><p>8）软件维护</p><p>9）版本更新或退役</p></li><li><h3 id="软件生命周期模型有哪些？"><a href="#软件生命周期模型有哪些？" class="headerlink" title="软件生命周期模型有哪些？"></a>软件生命周期模型有哪些？</h3><p>瀑布模型、增量模型、原型模型、迭代模型、螺旋模型、喷泉模型、XP模型</p></li><li><h3 id="瀑布模型是什么？"><a href="#瀑布模型是什么？" class="headerlink" title="瀑布模型是什么？"></a>瀑布模型是什么？</h3><p>具体的详细定义不再展开。</p><p>分为5个阶段：需求、设计、编码、测试、发布。自上而下。</p><p>首先，我们需要知道，瀑布模型师最早的软件生命周期模型，时至今日，仍然有强大的生命力，也是唯一被广泛使用的软件开发模型。</p><p>项目经理或软件管理人员，只要控制好每级台阶的高度和宽度，在每级台阶处设立里程碑或基线，并组织好对基线的评审，就可以控制好项目的开发成本、进度和质量。</p><p>但是，该模型的问题就在于阶梯，瀑布只能向下流，需要向上流的时候就需要付出很大的代价。这就是它的“问题堆积”，错误或发散扩大。</p><p>该模型的“问题堆积”并不是不可解决的，只要采用适合的管理方法，就可以控制或避免。比如微软公司采用的严格的里程碑管理制度。</p></li><li><h3 id="增量模型是什么？"><a href="#增量模型是什么？" class="headerlink" title="增量模型是什么？"></a>增量模型是什么？</h3><p>增量模型是遵循递增方式来进行软件开发的。</p><p>在增量模型中，软件产品被看成了一组增量构件或模块。每次需求分析、设计、实现、集成、测试和交付一块构件。</p><p>对于一个复杂的大型系统，采用分解的方式来将大系统分解成小系统，这样虽然可以将大风险分解成多个小风险，并逐步消除小风险。但是，将一个复杂的大型系统进行合理、有效的分解和划分是最难的地方。</p><p>同时，对大系统进行有效的分解和划分的前提是，该复杂系统可被分解。若复杂系统的拆卸性和组装性不强，那么，增量模型就不再适合该复杂系统的开发。</p></li><li><h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><p>原型模型的本意是在初步需求分析后，立马就向用户展示一个软件产品原型。</p><p>原型模型开发的过程中始终是以原型来驱动的，这很适合于那些已经有软件产品积累的公司。</p><p>但是，画画之前就已经知道画出来的结果是什么了，那么在画的过程中就很难有创新了。对于软件开发也是，这也是原型模型的主要缺点。</p></li><li><h3 id="迭代模型"><a href="#迭代模型" class="headerlink" title="迭代模型"></a>迭代模型</h3><p>迭代模型通过对各个工作流程的多次进行，更好地理解需求，从而可以设计出更为强壮的软件构架，逐步提高开发组织能力。</p><p>从宏观上看，迭代模型有4个状态阶段，分别是：先启、精化、构建和产品化。</p><p>而它的工作流程共有9个，分别是：<br>1）业务建模</p><p>2）需求获取</p><p>3）分析设计</p><p>4）实施</p><p>5）测试</p><p>6）部署</p><p>7）配置与变更管理</p><p>8）项目管理</p><p>9）环境</p><p>在这9个工作流程中，核心流程是业务建模，因为在迭代模型开发之前一定要有一个初始的业务模型，以便对其进行迭代。</p></li><li><h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><p>螺旋模型将瀑布模型和原型模型结合起来，特别强调风险分析，特别适用于大型复杂系统。</p></li><li><h3 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h3><p>喷泉模型认为，软件开发过程自上而下的各个阶段是相互重叠和多次反复进行的。</p><p>喷泉模型有大量的重叠，所以需要大量的开发人员，不利于项目的管理。</p></li><li><h3 id="XP模型"><a href="#XP模型" class="headerlink" title="XP模型"></a>XP模型</h3><p>XP模型即极限编程模型。本是敏捷文化现象。</p><p>XP模型通过需求、实现、重构、测试、发布的迭代过程，来实现一种轻量级的软件开发模型。</p><p>XP的核心要求是：交流、简单、进取、反馈</p><p>XP模型作为一种新的模型，在实际运用中存在较多的问题。同时，它与ISO 9001、CMMI的精神也存在冲突。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;开发一个软件项目，首先要选择并确定一个适合于该项目的软件生命周期模型，然后按照该软件生命周期模型的开发路线图，进
      
    
    </summary>
    
      <category term="软件工程" scheme="http://wanqbin.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="软件生命周期" scheme="http://wanqbin.xyz/tags/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="软件生命周期模型" scheme="http://wanqbin.xyz/tags/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>软件工程的内容和方法</title>
    <link href="http://wanqbin.xyz/2019/06/14/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%86%85%E5%AE%B9%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>http://wanqbin.xyz/2019/06/14/软件工程的内容和方法/</id>
    <published>2019-06-13T16:11:00.000Z</published>
    <updated>2019-06-13T16:57:51.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;经过一个礼拜的准备，终于结束了软件工程的复习。在复习软件工程的同时也在做信息系统综合设计的课程设计。在做课程设计的过程中，发现了软件工程的重要性和必要性。作为立志成为程序猿的我，软件工程在将来的工作中一定大有用处，故总结如下。</p><h2 id="一、软件、软件工程、软件工程学科体系"><a href="#一、软件、软件工程、软件工程学科体系" class="headerlink" title="一、软件、软件工程、软件工程学科体系"></a>一、软件、软件工程、软件工程学科体系</h2><p>学习软件工程，首先得知道软件是什么。其次，得知道软件工程是做什么的，它研究了什么内容，同时也应该知道软件工程学科体系是什么，与软件工程有什么关系。</p><ol><li><h4 id="软件：最新定义为，软件-知识-程序-数据-文档"><a href="#软件：最新定义为，软件-知识-程序-数据-文档" class="headerlink" title="软件：最新定义为，软件=知识+程序+数据+文档"></a>软件：最新定义为，软件=知识+程序+数据+文档</h4><p>那么这里面的知识，程序，数据，文档又是指什么呢？</p><p>知识，即各种各样的相关领域的专业知识。</p><p>程序，即使对计算机任务的处理对象和处理规则的描述。这里，我们一定要注意，软件并不等于程序，这也是一大误区。</p><p>数据，即程序赖以运行的初始化数据。</p><p>文档，即为了理解程序所需的详细描述性资料。</p></li><li><h4 id="软件工程是什么？"><a href="#软件工程是什么？" class="headerlink" title="软件工程是什么？"></a>软件工程是什么？</h4><p>软件工程是研究软件开发和管理的一门工程学科。</p><p>这个定义很短，但是知识点还是挺多的。一强调开发，毕竟开发是软件工程的主体；二强调管理或过程管理，当然，管理是为了更好的开发；三是强调工程，把软件的开发和维护当成一项工程，用工程的办法去开发，按工程的办法去管理；四是强调学科，时至今日，软件工程不只是一门学科，而是一个学科体系。这里也就引出了软件工程学科体系。</p><blockquote><p>软件工程来源于软件危机。软件工程是为了克服软件危机才产生的。</p></blockquote></li><li><h4 id="软件工程学科体系"><a href="#软件工程学科体系" class="headerlink" title="软件工程学科体系"></a>软件工程学科体系</h4><blockquote><p>软件工程作为一个学科体系，到21世纪才初步形成。2004年ACM和IEEE-CS联合制订了SWEBOK 2004版，它将软件工程学科体系的知识划分为10个知识域。</p></blockquote><p>对于这10个知识域，我的理解是它覆盖了整个软件生命周期。</p><p>1） 软件需求</p><p>2）软件设计</p><p>3）软件构造</p><p>4）软件测试</p><p>5）软件维护</p><p>6）软件配置管理</p><p>7）软件工程管理</p><p>8）软件工程过程</p><p>9）软件工程工具和方法</p><p>10）软件质量</p></li><li><h4 id="软件工程和软件工程学科体系的关系"><a href="#软件工程和软件工程学科体系的关系" class="headerlink" title="软件工程和软件工程学科体系的关系"></a>软件工程和软件工程学科体系的关系</h4><p>总体上来说，软件工程是一个局部问题，而软件工程学科体系是一个整体问题。</p></li><li><h4 id="软件工程研究的内容"><a href="#软件工程研究的内容" class="headerlink" title="软件工程研究的内容"></a>软件工程研究的内容</h4><p>软件工程研究的内容主要有五个方面。</p><p>一是软件生命周期模型</p><p>二是软件开发方法</p><p>三是软件支持过程</p><p>四是软件管理过程</p><p>五是软件工程标准与规范</p></li><li><h4 id="软件工程基本原理"><a href="#软件工程基本原理" class="headerlink" title="软件工程基本原理"></a>软件工程基本原理</h4><p>软件工程的三要素：方法、工具和过程</p><p>有7个基本原理，外加一个二八定律。具体内容见文章末尾的链接。</p></li><li><h4 id="软件工程在行业中的作用"><a href="#软件工程在行业中的作用" class="headerlink" title="软件工程在行业中的作用"></a>软件工程在行业中的作用</h4><p>软件工程作为一门工程管理学科，它对软件行业的作用毋庸置疑。那么，这里会有一个问题，既然已经有软件工程了，那么还会不会出现软件危机呢？我的答案是会的。软件工程的产生是为了克服软件危机，但是它的存在并不会完全消除软件危机。这和现实社会中法律存在的意义是相通的。法律的产生是为了消除犯罪，但是法律的存在并不会完全消除犯罪（至少在当前的社会阶段是不会的）。</p><p>软件工程可以作用到从业者，也可以作用到项目组，作用到软件公司，甚至作用到整个国家的软件产业1发展。</p></li></ol><h2 id="二、软件工程方法论和软件工程实践论"><a href="#二、软件工程方法论和软件工程实践论" class="headerlink" title="二、软件工程方法论和软件工程实践论"></a>二、软件工程方法论和软件工程实践论</h2><h4 id="1-软件工程方法论是什么？"><a href="#1-软件工程方法论是什么？" class="headerlink" title="1.  软件工程方法论是什么？"></a>1.  软件工程方法论是什么？</h4><p>软件工程方法论实质上是软件工程中软件开发方法的集合。</p><p>那么软件工程方法的集合包括哪些元素呢？</p><h4 id="2-软件工程方法集合"><a href="#2-软件工程方法集合" class="headerlink" title="2.  软件工程方法集合"></a>2.  软件工程方法集合</h4><p>软件工程方法集合包括面向过程方法、面向对象方法、面向元数据方法。</p><h4 id="3-为什么说面向对象方法可以描述无穷的信息世界呢？"><a href="#3-为什么说面向对象方法可以描述无穷的信息世界呢？" class="headerlink" title="3.  为什么说面向对象方法可以描述无穷的信息世界呢？"></a>3.  为什么说面向对象方法可以描述无穷的信息世界呢？</h4><p>要搞清楚面向对象为什么可以描述无穷的世界，首先需要知道面向对象方法是什么，其次，需要知道现实世界和软件的普遍联系。</p><p>面向对象方法是什么？是一种运用对象、类、消息传递、继承、封装、聚合、多态性等概念构造软件系统的软件开发方法。</p><p>我记得高中哲学里面听到的一句话，世界是物质的，物质是运动的，运动是有规律的。而对于软件而言，其实质是对现实人工系统的一种映射、优化和替换。通过对现实世界的分析，我们可以知道，世界是由对象组成的，对象之间时存在普遍联系的，而物质运动则说明了对象的功能。</p><p>面向方法是将这现实世界抽象映射为对象的手段。分析设计时由对象抽象出类，程序运行时由类还原到了对象。所以它能够描述无穷的信息世界。</p><h4 id="4-软件工程实践论是什么？"><a href="#4-软件工程实践论是什么？" class="headerlink" title="4.  软件工程实践论是什么？"></a>4.  软件工程实践论是什么？</h4><p>软件工程实践论是研究在开发一个大型软件系统时，到底应该怎样选取合适的开发方法。</p><h2 id="5-软件工程实践论指什么？"><a href="#5-软件工程实践论指什么？" class="headerlink" title="5.  软件工程实践论指什么？"></a>5.  软件工程实践论指什么？</h2><p>“五个面向”实践论，指面向流程分析、面向元数据设计、面向对象实现、面向功能测试、面向过程管理。</p><p>在后面，我们会发现软件工程的“五个面向”实践论在各个软件生命周期模型中都有一定的体现。</p><h2 id="三、软件支持过程、软件管理过程"><a href="#三、软件支持过程、软件管理过程" class="headerlink" title="三、软件支持过程、软件管理过程"></a>三、软件支持过程、软件管理过程</h2><ol><li><h4 id="软件过程是什么？"><a href="#软件过程是什么？" class="headerlink" title="软件过程是什么？"></a>软件过程是什么？</h4><p>软件过程，指软件生命周期中的时间序列</p></li><li><h4 id="软件支持过程是什么？"><a href="#软件支持过程是什么？" class="headerlink" title="软件支持过程是什么？"></a>软件支持过程是什么？</h4><p>软件支持过程，由支持软件生命周期模型各个阶段的生产工具组成。</p></li><li><h4 id="软件生命周期中的生产工具有哪些？"><a href="#软件生命周期中的生产工具有哪些？" class="headerlink" title="软件生命周期中的生产工具有哪些？"></a>软件生命周期中的生产工具有哪些？</h4><p>CASE工具、软件开发环境SDE、软件工程环境SEE</p></li><li><h4 id="软件管理是什么？"><a href="#软件管理是什么？" class="headerlink" title="软件管理是什么？"></a>软件管理是什么？</h4><p>管理过程和支持过程又称为“软件过程工程”。它是软件工程的一部分。</p><p>软件管理实质上是过程管理。</p></li><li><h4 id="软件管理有哪几类？"><a href="#软件管理有哪几类？" class="headerlink" title="软件管理有哪几类？"></a>软件管理有哪几类？</h4><p>ISO 9001质量管理和质量保证体系</p><p>CMMI软件能力成熟度模型</p><p>软件企业文化，包括微软企业文化，IBM企业文化，敏捷文化。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;经过一个礼拜的准备，终于结束了软件工程的复习。在复习软件工程的同时也在做信息系统综合设计的课程设计。在做课程设计
      
    
    </summary>
    
      <category term="软件工程" scheme="http://wanqbin.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="软件工程方法论" scheme="http://wanqbin.xyz/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>软件工程相关名词解释</title>
    <link href="http://wanqbin.xyz/2019/06/10/%E5%B7%A5%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A-1/"/>
    <id>http://wanqbin.xyz/2019/06/10/工程相关名词解释-1/</id>
    <published>2019-06-10T12:16:00.000Z</published>
    <updated>2019-06-15T12:20:28.061Z</updated>
    
    <content type="html"><![CDATA[<ol><li>软件：</li></ol><p>一般认为，程序是计算机为完成特定任务而执行的指令的有效集合。站在应用的角度可以通俗地理解为：</p><p>面向过程的程序=算法+数据结构</p><p>面向对象的程序=对象+消息</p><p>面向构件的程序=构件+构架</p><p>通常，软件有以下定义：</p><p>软件=程序+数据+文档</p><p>这里的“程序”，是对计算机任务的处理对象和处理规则的描述；这里的“文档”，是为了理解程序所需的详细描述性资料；这里的“数据”，主要是软件系统赖以运行的初始化数据。</p><p>软件的最新定义如下：</p><p>软件=知识+程序+数据+文档</p><p>定义中增加了“知识”。这里的“知识”,主要指各种各样的相关行业领域的专业知识。实际上，知识只是网络的外在表现，程序，数据，文档才是网络的内在实质。也就是说，知识是通过程序、数据、文档来实现的。</p><p>对这一定义的另外一种解释是，软件到底是什么呢？软件就是网络，网络就是知识，知识就是信息。站在网民的角度看，软件就是知识加信息。站在程序员角度看，软件就是程序加数据；站在软件管理者角度看，软件就是数据加文档。</p><p>网络是知识的载体，知识是网络的灵魂。</p><ol start="2"><li>软件工程</li></ol><p>软件工程是研究软件开发和管理的一门学科。</p><p>这里，以是强调开发。开发是软件工程的主体，开发是在规定的时间、按照规定的成本，开发出符合规定质量要求的软件。二是强调管理或过程管理。当然，开发中有管理，管理是为了更好地开发。所以开发和管理是一个问题的相辅相成的两个方面。许多软件项目的失败，不是在开发技术上出了问题，二是在管理过程上出了问题。所以在某种程度上说，对于一个软件企业，过程管理比开发技术更重要。三十强调工程。要将软件的开发（包括维护）当成一项工程，既要按照工程的办法去开发，又要按照工程的办法去管理。四是强调学科。时至今日，软件工程不止是一门课程，而是一个学科体系，即软件工程知识体系。</p><ol start="3"><li>软件工程学科体系（swebok2004）：</li></ol><p>软件工程作为一个学科体系，到21世纪初才初步形成。2001年4月18日，美国发布了软件工程知识体系指南SWEBOK（guide to the Software Engineering body of Knowledge）0.95版。2004年，软件工程学科体系的内容才基本确立，就在这一年，美国ACM和IEEE-CS联合制订了SWEBOK2004版，它将软件工程学科体系的知识划分为如下10个知识域：</p><p>（1）软件需求：软件需求是真实世界中的问题而必须展示的特性。软件的需求知识域有7个子域：需求基础、需求过程、需求获取、需求分析、需求规格说明、需求确认、实践考虑。</p><p>（2）软件设计：软件设计既是定义一个系统的体系结构，组件，接口和其他特征的过程，又是这个过程的结果，软件设计知识域有6个子域：软件设计基础，软件设计关键问题，软件结构与体系结构，软件设计质量的分析与评价，软件设计符号，软件设计的策略与方法。</p><p>（3）软件构造：它指通过编码，验证，单元测试，集成测试和排错的组合，具体创建一个可以工作的，有意义的软件。其知识域有3个子域：软件构造基础，管理构造，实际考虑</p><p>（4）软件测试：它由在有限测试用例集合上，根据期望的行为对程序的行为进行的动态验证组成，测试用例是从实际上无限的执行域中适当选择出来的。软件测试知识域有5个子域：软件测试基础和测试级别，测试技术，需求分析，与测试相关的度量，测试过程。</p><p>（5）软件维护：软件一旦投入运行，就可能出现异常，运行环境可能发生改变，用户会提出新的需求。生命周期中的软件维护，从软件交付时开始。软件维护的知识域有4个子域：软件维护基础，软件维护的关键问题，维护过程，维护技术。</p><p>（6）软件配置管理：软件配置是为了系统地控制配置的变更，维护软件在整个系统生命周期中的完整性及可追踪性，而标志软件在不同时间点上的配置的学科。软件配置管理知识域有6个子域：软件配置管理过程管理，软件配置标志，软件配置控制，软件配置状态统计，软件配置审核，软件发行管理和交付。</p><p>（7）软件工程管理：进行软件工程的管理与度量，虽然度量是所有知识域的一个重要方面，但是这里所说的是度量程序的主体。软件工程管理只是域有6个子域：启动和范围定义，软件项目计划，软件项目实施，评审与评价，关闭，软件工程度量。前5个覆盖软件过程工程管理，第6个描述软件度量的程序。</p><p>（8）软件工程过程：涉及软件工程过程本身的定义、实现、评定、度量、管理、变更和改进。软件工程过程知识域有4个子域：过程实施与改变、过程定义、过程评定、过程和产品度量。</p><p>（9）软件工程工具和方法：它具有软件工程工具、软件工程方法两个子域。</p><p>（10）软件质量：处理跨域整个软件生命周期过程的软件质量的考虑，由于软件质量问题在软件工程中无处不在，其他知识领域也涉及到质量问题。软件质量知识域有3个子域：软件质量基础，软件质量过程、时间考虑。</p><p>在上述软件工程学科体系中前5个知识域是讲软件开发，后5个知识域是讲软件管理。由此可见，软件工程知识体系包括软件开发和软件管理两大部分，所以软件工程的定义也应该包括软件开发和软件管理两项内容。</p><ol start="4"><li>软件工程课程</li></ol><p>软件工程课程与软件工程学科体系是有区别的：前者是一门或一组课程，后者是一个知识体系；前者是一个局部问题，后者是一个整体问题。</p><p>作为一门软件工程客户才能，它研究的内容至今没有统一的说法。可以这么认为，软件工程课程研究的内容应该涵盖“软件生命周期模型、软件开发方法、软件支持过程、软件管理过程、软件工程标准与规范”这5个方面。</p><table><thead><tr><th>序号</th><th>研究方向</th><th>具体内容</th></tr></thead><tbody><tr><td>1</td><td>软件生命周期模型</td><td>如：瀑布模型，增量模型</td></tr><tr><td>2</td><td>软件开发方法</td><td>如：面向过程的方法</td></tr><tr><td>3</td><td>软件支持过程</td><td>如：CASE工具ROSE，北大青鸟系统，Power   Designer</td></tr><tr><td>4</td><td>软件管理过程</td><td>如：CMMI，软件企业文化，敏捷（XP）文化现象</td></tr><tr><td>5</td><td>软件工程标准与规范</td><td>如：命名标准与规范，设计标准与规范，编程标准与规范</td></tr></tbody></table><p>尽管软件生命周期模型和软件支持过程非常重要，但是现代软件工程研究的重点，仍然是软件开发方法和软件管理过程。在软件管理过程的内容中，除了ISO9001的CMMI之外，还将软件企业文化也列入其中，如微软企业文化，敏捷文化现象和IBM企业文化。</p><p>软件工程标准是对软件产品的约束，如软件产品的界面标准，包装标准，文档标准，测试标准，评审标准，鉴定标准等。软件工程规范是对软件开发人员行为的约束，例如命名规范，需求规范，设计规范，编码规范，维护规范等。在软件企业内部，企业管理人员特别重视软件工程的标准与规范。为此，每个大型的软件企业，根据自身的特点，都制订并发布了自己的软件工程标准与规范，在自己企业内部严格执行。</p><ol start="5"><li>软件工程基本原理</li></ol><p>习惯上，人们常常把软件工程方法（开发方法）、工具（支持方法的工具）、过程（管理过程）称为软件工程三要素，而把美国著名的软件工程专家B.W Boehm于1983年提出的7条原理作为软件工程的基本原理。</p><p>（1） 用分阶段的生命周期计划严格管理软件开发。阶段划分为计划、分析、设计、编程、测试和运行维护。</p><p>（2） 坚持进行阶段评审。若上一阶段评审不通过，则不能进入下一阶段开发</p><p>（3） 实行严格的产品版本控制</p><p>（4） 采用现代程序设计技术</p><p>（5） 结果应能清楚地审查。因此，对文档要有严格的要求</p><p>（6） 开发小组的成员要少而精</p><p>（7） 要不断地改进软件工程实践的经验和技术，要与时俱进</p><p>上述7条原理，虽然是在面向过程设计时代（结构化时代）提出的，但是，直到今天，在面向元数据和面向对象的程序设计新时代，它仍有效。根据“与时俱进”的原则，还有一条基本原理在软件的开发和管理中特别重要，需要补充进去，作为软件工程的第8条基本原理。</p><p>（8） 二八定律</p><p>在软件工程中，所谓二八定律，就是一般人常常将20%的东西误认为80%的东西，而将80%的东西误认为是20%的东西。</p><p>例如，对软件项目进度和工作量的估计：一般人主观上认为已经完成了80%，但实际上只完成了20%；对于程序中存在问题的估计，：一般人不知道80%的问题存在于20%的程序之中；对模块功能的估计：一般人不知道20%的模块，实现了80%的功能；对人力资源的估计：一般人不知道20%的人，解决了程序中80%的问题；对投入资金的估计：一般人不知道信息系统中80%的问题，可以用20%的资金来解决。</p><p>研究二八定律的现实意义是，指导软件计划的制订与执行。</p><ol start="6"><li>软件生命周期模型</li></ol><p>软件生命周期模型时指在整个软件生命周期中，软件开发过程应该遵循的开发路线图。或者说，软件生命周期模型是软件开发全部过程、活动和任务的结构框架。</p><p>例如：瀑布模型、增量模型、螺旋模型、喷泉模型、XP模型、原型模型和RUP迭代模型，它们都有各自清晰的开发路线图，规定了各自的开发过程、活动和任务的结构框架。</p><p>从字面上理解，“软件生命周期”应该涵盖软件产品、项目或系统从产生、投入使用看到被淘汰的全过程。由于早期人们关注的是技术开发活动，还没有考虑到管理活动，因此“软件生命周期模型”主要描述的还是软件开发的过程及其任务。</p><p>与人不同的是，软件的生命周期和软件生命周期模型有关：不同的软件生命周期模型，可能对应着不同的生命周期。生命周期不同，该软件的开发阶段划分、评审次数、基线标准都有所不同。软件公司的项目组在开发一个大项目或产品时，首先在技术上必须选择一个软件生命周期模型，使该模型非常适合这个项目或产品的生命周期模型；随后通过对软件生命周期模型的裁剪，给出适用于本项目或产品的软件生命周期定义；以生命周期定义为标准，在需求定义之后，编制详细的软件开发计划；然后项目组按计划进行软件开发，软件工程管理部门按计划进行软件过程跟踪和管理。</p><p>软件生命周期模型能清晰、直观地表达软件开发全过程，明确规定了要完成的主要活动和任务，用来作为软件项目工作的基础。一般以时间为序，软件生命周期模型可详细地划分为9个阶段。</p><table><thead><tr><th>序号</th><th>周期名称</th><th>序号</th><th>周期名称</th></tr></thead><tbody><tr><td>1</td><td>立项（或签合同）、下达任务书</td><td>6</td><td>软件测试</td></tr><tr><td>2</td><td>需求分析</td><td>7</td><td>软件发布与实施</td></tr><tr><td>3</td><td>概要设计</td><td>8</td><td>软件维护</td></tr><tr><td>4</td><td>详细设计</td><td>9</td><td>版本更新或退役</td></tr><tr><td>5</td><td>编码实现</td><td></td><td></td></tr></tbody></table><p>软件开发方法是指在软件工程开发路线图中，开发人员对软件需求、设计、实现、维护所采用的开发思想开发技术、描述方法、支持工具等。</p><p>软件工程中软件开发方法的集合，称为软件工程方法论。</p><ol start="7"><li>迭代模型及其9个核心流程</li></ol><p>针对瀑布模型的缺陷，人们提出了迭代模型。</p><p>所谓迭代，是指活动的多次重复。从这个意义法伤来讲，原型不断完善，增量不断产生，都是迭代的过程。因此，快速原型法和增量模型都可以看成局部迭代模型。但这里所讲的迭代模型时RUP推出的一种“逐步求精”的面向对象的软件开发过程模型，被认为是软件界迄今为止最完善、可实现商品化的开发过程模型。</p><p>RUP模型的原型图看起来非常简单，其内涵却非常丰富。它表面上是一个二维图，实质上用一张二维图表示了一个多维空间模型。从宏观上看，它是一个大的迭代过程；横坐标表示软件产品所处的4个阶段：先启、精化、构建、产品化（移交），纵坐标表示软件产品在每个阶段的工作流程。从微观上看，任何一个阶段本身，其内部工作流程也是一个小的迭代过程。</p><p>为使项目能够顺利地进行，一种较灵活（并且风险更小）的方法是：多次执行各个开发工作流程，从饿了更好地理解需求，设计出更为强壮的软件架构，逐步提高开发组织能力，最终交付一系列逐步完善的实施成果，这就是迭代生命周期模型。每次按顺序完成一系列工作流程就称为一次迭代，每次迭代，均以次要里程碑结束，按照特定的迭代成功标准，对迭代的结果进行评估。每个阶段都可以进一步细分为迭代。迭代是产生可执行的产品发布（内部或外部的）的完整开发循环，所发布的产品是开发过程最终产品的子集，它将通过一次又一次的迭代实现递增成长，最后形成最终的软件系统或产品。</p><p>优点：</p><p>n  在开发的早期或中期，用户需求可以变化；</p><p>n  在迭代之初，不要求有一个相近的产品原型</p><p>n  模型的适用范围很广，几乎适用于所有项目的开发</p><p>缺点：传统的组织方法是按顺序（一次且仅一次）完成每个工作流程，即瀑布式生命模型。迭代模型采取循环工作方式，每次循环均使工作产品更靠近目标产品，这要求项目组成员具有很高的水平并掌握先进的开发工具。反之，存在较大的技术和技能风险。</p><p>模型的9个核心流程：</p><p>迭代声明周期模型包含9个核心流程（需要指出的，采用迭代模型，事先要有一个初始业务模型，以便进行迭代。这就是为什么将“业务建模”作为9个核心流程之首的道理）。</p><p>（1） 业务建模：目的是， 了解目标组织的结构和机制；了解目标组织中当前存在的问题，并确定改进的可能性；确保客户、最终用户和开发人员就目标组织达成共识；导出支持目标组织所需的系统需求。通俗地讲，业务建模就是用户业务流程的重新规划与合理改进，即业务流程的优化，目的是使开发出来的系统能反映最优化的业务流程。</p><p>（2） 需求获取：目的是，与客户在系统的工作内容方面达成并保持一致；使系统开发人员能够更清楚地了解系统需求；定义系统边界；为计划迭代的内容提供基础；为估算开发系统所需成本和时间提供基础；定义系统的用户界面，重点是用户的需要和目标。</p><p>（3） 分析设计：目的是，将需求转换为未来系统的设计；逐步开发强壮的系统构架；使设计适合实施环境，为提高性能而进行设计。</p><p>（4） 实施：目的是，对照实施子系统的分层结构定义代码结构；以构件（源文件，二进制文件，可执行文件以及其他文件等）方式实施类和对象；对已开发的构件按单元进行测试；将各实施成员（或团队）完成的结果集成到可执行系统中。</p><p>（5） 测试：目的是，核实对象之间的交互；核实软件的所有构件是否正确集成；核实所有需求是否已经正确实施；确定缺陷并确保在部署软件之前将缺陷解决。</p><p>（6） 部署：目的是，将构件部署到网络的各个节点上，使最终用户可以使用该软件产品。</p><p>（7） 配置与变更管理，目的是，始终保持工作产品的完整性和一致性</p><p>（8） 项目管理：目的是，为软件密集型项目的管理提供框架；为项目计划，人员配备，执行和检测提供实用准则；为风险管理提供框架。</p><p>（9） 环境：目的是，为软件开发组织提供软件开发环境（流程和工具），该环境将支持开发团队。</p><ol start="8"><li>XP模型</li></ol><p>XP模型，即极限编程模型，它本来是敏捷企业文化现象，但是不少人将它当成一种软件开发模型。</p><p>对传统软件开发模型进行重新审视发现，它们太正规、太呆板、太浪费资源，从而提出了省时省力的XP模型。它属于轻量级开发模型，由一组简单规则（需求、实现、重构、测试、发布）组成，它既保持开发人员的自由创造性，又保持对需求变动的适应性，即使在开发的后期，也不怕用户需求的变更。</p><p>在需求、实现、重构、测试、发布的迭代过程中，XP模型有4条核心原则：交流、简单、反馈和进取。XP开发小组包括开发人员、管理人员和客户。</p><p>优点：</p><p>l  采用简单策略，不需要长时间计划和复杂管理，开发周期短</p><p>l  采用迭代增量开发，反馈修正和反复测试的方法，因而软件质量有保证。</p><p>l  适应用户需求变化，因而与用户关系和谐。</p><p>缺点：<br> XP模型作为一种新的模型，在实际应用中还存在一些问题，引起了一些争议。它一般适用于小型项目，同时，它与ISO9001、CMMI的精神也存在冲突。</p><ol start="9"><li>订单软件</li></ol><p>与固定的用户签订软件开发合同，由软件公司启动该项目的开发，这类软件被称为“订单软件”，典型的例子有企业资源规划系统ERP和电子商务大型网站。</p><ol start="10"><li>非订单软件</li></ol><p>市场调研之后，认为某产品将会有巨大的市场空间，而软件公司在人力资源、设备资源、抵抗风险、资金和时间上都具备开发该产品的能力，于是决定立项，这类软件被称为“非订单软件”，典型的例子是网上游戏软件</p><ol start="11"><li>任务书</li></ol><p>有一份《任务书》的正文。包括任务下达的对象、内容、要求完成的日期、决定投入的资源、必要时包括任命项目经理（技术经理和产品经理）、其他保证措施、奖惩措施等。《任务书》正文可长可短，若《合同》或《立项建议书》很详细，则正文可短，若《合同》或《立项建议书》很粗很短，则正文应该很长、很详细。</p><p>有一份《任务书》的附件。一般情况下，它就是软件《合同》/《立项建议书》，如果是指令性计划，它的格式和内容，也应与《合同》/《立项建议书》基本相同，即附件的内容应覆盖系统的功能点列表、接口列表、资源需求列表、开发进度列表、阶段评审列表等。</p><p>《任务书》与《合同》/《立项建议书》一样重要，它是该项目的第二份管理文档。</p><ol start="12"><li>合同</li></ol><p>对于一些大型项目，在签订合同之前，一般有一个招标和投标的过程，只有中标之后才能签订合同。开发“非订单软件”需要“立项”，开发“订单软件”需要签订“合同”。所以“立项”与“合同”是IT企业软件项目（或产品）的两个源头。一旦立项或签订合同，企业领导或软件管理部门就要下达《任务书》，开发部门接到《任务书》后就要组建开发团队，成立项目组。</p><ol start="13"><li>立项建议书</li></ol><p>立项文档就是《立项建议书》，它本身不是软件策划的内容，但是很重要，也很特殊。《立项建议书》的目的，就是在某种程度上代替开发合同或用户需求报告，作为软件策划的基础。《立项建议书》的编制者一般不是软件开发人员，而是软件公司的市场销售人员，因为他们熟悉市场行情及客户需求</p><ol start="14"><li>需求分析</li></ol><p>1997年，IEEE软件工程标准词汇表中定义的需求为：</p><p>（1） 用户解决问题或达到目标所需的条件或能力</p><p>（2） 系统或系统部件要满足合同、标准、规范或其他正式规定文档所具有的条件或能力</p><p>（3） 一般反映（1）或（2）所描述的条件或能力的文档说明</p><p>一般而言，需求分析阶段位于软件开发的前期，它的基本任务是准确地定义未来系统的目标，确定为了满足用户的需要系统必须做什么。</p><p>需求分析分为两个阶段：需求获取阶段和需求规约阶段。需求关系的是系统的目标而不是系统实现。</p><p>需求可以分为两类：功能性需求和非功能性需求。前者定义了系统做什么，后者定义了系统工作时的特性。</p><ol start="15"><li>基线</li></ol><p>基线是软件工作产品，它是要经内部和外部评审过的，是下一阶段工作的基础。</p><ol start="16"><li>审计</li></ol><p>审计，是复查评审活动程序的合法性，是否按程序与规范进行等</p><ol start="17"><li>里程碑</li></ol><p>里程碑是一个标记，只需要经过内部评审。一个里程碑是一个检查点，但不一定对应一条基线</p><p>定义软件过程</p><p>所谓定义软件过程，就是根据选定的生命周期模型，规定软件的开发1模型，以及每一阶段的工作步骤和文档标准等内容。</p><p>在项目策划阶段，先要根据项目特性，使用软件生命周期模型，对项目中将要进行的软件工程过程进行描述。根据项目自身的特点，对项目的类型进行详细划分，然后根据软件组织的“生命周期模型裁剪指南”，对标准软件过程进行裁剪，形成项目定义软件过程。再使用项目定义软件过程，指导项目策划活动的进行。</p><p>开发计划是对项目定义软件过程的具体描述。软件项目的规模、工作量、成本、进度、质量、人员配置和其他资源等，与项目定义软件过程中的活动紧密相关。由于项目定义软件过程的标准，全部由“生命周期模型裁剪指南”而得到，因此软件项目能共享过程数据，并且吸取软件组织中积累的经验教训。</p><ol start="19"><li>LOC</li></ol><p>LOC（line of code），LOC指所有的可执行源代码行数。包括可交付的工作控制语言（job control language，JCL）语句，数据定义，数据类型声明，等价声明，输入/输出格式声明等。一代码行（1LOC）的价值和人月均代码行数可以体现一个软件生产组织的生产能力。组织可以根据对历史项目的审计来核算组织的单行代码价值。</p><ol start="20"><li>功能模型</li></ol><p>（Function Model, FM）。实质上是用户需求模型，用来描述系统能做什么，即对系统的功能，性能，接口和界面进行定义。</p><ol start="21"><li>业务模型</li></ol><p>（Operation Model，OM），实质上是业务逻辑模型，用于描述系统在何时，何地、由何角色、按什么业务规则去做，以及做的步骤或流程，即对系统的操作流程进行定义。</p><ol start="22"><li>数据模型</li></ol><p>（Data Model, DM）,实质上是实体或类的状态关系模型，用于描述系统工作前的数据来自何处，工作中的数据暂存在什么地方，工作后的数据放到何处，以及这些数据的状态以及相互之间的关联，即对系统的数据结构进行定义。</p><ol start="23"><li>风险分析</li></ol><p>软件策划过程，也包括对软件风险进行分析。所谓软件风险分析，指对项目及团队的政策风险、技术风险、技能风险、资源风险等因素，进行逐个分析与分解，将一个大风险分解为若干个小风险，对各个小风险进行排除，最后制订跟踪和监控风险的风险管理计划。软件一般存在5种风险，如下表：</p><table><thead><tr><th>序号</th><th>风险名称</th><th>风险内容</th></tr></thead><tbody><tr><td>1</td><td>政策风险</td><td>IT企业外部和IT企业内部两个方面的政策及政策的变化，将会给项目带来什么风险</td></tr><tr><td>2</td><td>技术风险</td><td>新技术的成熟程度以及难度系数，将会给项目带来什么风险</td></tr><tr><td>3</td><td>技能风险</td><td>项目组成员学习、领会、掌握、运用新技术的能力，将会给项目带来什么风险</td></tr><tr><td>4</td><td>资源风险</td><td>保证项目正常进行所需的各种资源的供应程度，将会给项目带来什么风险</td></tr><tr><td>5</td><td>其他风险</td><td>目前意想不到的风险，即不可预测的风险，如天灾人祸</td></tr></tbody></table><ol start="24"><li>三层结构设计</li></ol><p>三层结构设计通常被划分为表示层、中间层和数据层三层，各个分层之间通过对外接口互相访问。分层的主要目的是，允许各层可以随着需求的变化或技术的变化而独立地升级或替换，如当替换数据库时，只需要变化数据层。</p><p>所谓的三层结构，就是在原来两层结构（Client/Server）的客户层和数据层之间，加入一个中间层（也叫业务层），并将应用程序的业务规则、数据访问、合法型校验等工作放到了中间层进行处理，这样就变成了三层结构，也不仅仅有B/S应用才是三层结构，三层是指逻辑上的三层，即使这三层都放置到了一台机器上。当然，这三层也可以放在两台或三台机器上。</p><p>（1） 表示层（浏览层）</p><p>表示层也称为浏览层，它通常采用图形化用户界面，在客户端PC或工作站上运行。站在“三个模型”建模思想上看，系统内部支持表示层的模型是“功能模型”，尽管“功能模型”中的功能思想组件放在业务层，但是功能组件的表现方式却在表示层上。该层的主要功能是：</p><p>​      1）接受用户请求，将这些请求反馈给业务逻辑层，等待业务逻辑层的应答信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2） 对业务逻辑层的应答信息，进行显示（不进行任何加工）</span><br></pre></td></tr></table></figure><p>​      3） 有时也会兼做业务逻辑层的一些小功能，比如对用户输入数据的验证，以及操作合法性的检验</p><p>（2） 中间层（业务层）</p><p>中间层也称业务层，有时又称为应用层，它由许多构建或组件组成，它们完全体现了用户的业务逻辑或业务规则。站在“三个模型”建模思想看，系统内部支持业务层的模型是“业务模型”。尽管Java EE与.NET在实现业务层上的方法略有差异，但是，业务层本质上在表示层与数据层之间起桥梁作用。有时，业务层被划分为两个子层：业务逻辑层和数据访问层。业务层的主要功能是：</p><p>​        1） 接受从表示层传来的用户请求信息</p><p>​        2） 根据用户的请求信息生成SQL语句</p><p>​        3） 利用生成的SQL语句从数据层取数据、修改数据、删除数据</p><p>​        4） 将结果返回给表示层</p><p>（3） 数据层</p><p>数据层是数据库服务器上的数据库层，它包括数据库管理系统DBMS和数据库DB两部分。站在“三个模型”建模思想看，系统内部支持数据层的模型是“数据模型”，该层的主要功能是：</p><p>​        1）接受业务层数据处理请求的SQL语句或存储过程</p><p>​        2） 利用SQL语句或存储过程，对数据库服务器上数据库的相关表进行存储或检索</p><p>​        3） 将存储或检索的结果信息，传递给业务层</p><ol start="25"><li>构件</li></ol><p>所谓构件，就是被标识的且可被复用的软件制品。</p><p>构件与部件，组件基本上是一个意思，有时会认为部件和组件的粒度比构件大一些或范围更广一些。上述定义有三个特点：第一个特点是构件要被明确标识，即有一个被调用的名字；第二个特点是应该可服用，不可复用的只能称为模块或子系统，第三个特点是构件是软件制品，在宏观上软件制品可以是项目计划、成本估价、体系结构、需求模型、设计模型、程序代码、窗口界面、文档、数据结构、测试用例等。</p><ol start="26"><li>中间件</li></ol><p>中间件是一个非常大的组件（构件），一般在网络上运行，完成批量数据的传递和通信工作，调用方式是通过一组事先约定的格式与参数进行的。常见的中间件为问价传输中间件，如IBM公司的消息队列中间件MQ，在网络节点之间进行点对点的数据通信和传输。又如城市医疗保险系统中的中间件，它在市医保局节点和全市各家医院节点之间，进行点对点的数据通信和传输，病号每次划价计费，节点之间就交换一次信息。在详细设计说明书中已对新增中间件的功能和算法进行了详述，此处只要将详细设计翻译为源程序即可。</p><ol start="27"><li>结对编程</li></ol><p>在敏捷方法中，成对（或结对）编程时极限编程的实践之一。当进行成对编程时每一个程序员输入代码，另一个在旁边观察代码中是否存在错误，并思考下一步要进行的工作。</p><p>优点：</p><p>  1）   可以提高代码的可读性和可理解性，产生高质量的代码</p><p>  2）   提高编程效率，使编程速度更快，代码错误更少，后期测试和纠错的工作量就会大大降低</p><p>  3）   成对编程可以提高开发团队的凝聚力和协作精神</p><p>规则：</p><p>  1）   编码标准</p><p>  2）   积极参与</p><p>  3）   非强制性</p><p>  4）   定期轮换</p><p>  5）   速度匹配</p><p>  6）   新老匹配</p><ol start="28"><li>软件测试</li></ol><p>软件测试按照规定的测试规程发现软件缺陷的问题。</p><p>为了理解这个定义，有如下解释：</p><p>  1）   软件测试是一个过程，而且是一个发现软件缺陷，但不包括修复软件缺陷的过程。</p><p>  2)    软件测试是按照规定的测试规程进行。这些规程包括制定测试计划，搭建测试环境，明确测试任务，规定测试时间、方法和步骤，记录测试数据和产生测试报告</p><p>  3)    在测试规程中，测试计划最为重要，它指导整个测试计划</p><p>  4)    在测试计划中，测试需求的定义很重要。如果没有列出明确的测试需求，那么就并不会设计出正确的测试用例，最后必然导致盲目的测试。这样，隐藏的软件缺陷也无法被发现。</p><p>  5)    软件测试的目的是发现软件缺陷，软件测试的目标是尽可能早地发现软件缺陷，因为缺陷发现越早，其修复成本越低。</p><p>软件测试不仅仅局限于测试程序代码，还可以测试软件数据与软件文档。也就是说，软件生命周期中所产生的软件工作产品，都可以作为测试对象，因为它们影响最终软件产品的质量。</p><ol start="29"><li>软件缺陷</li></ol><p>定义如下：</p><p>软件未实现产品说明书要求的功能。</p><p>软件出现产品说明书指明不应该出现的错误</p><p>软件实现了产品说明书未说明的功能</p><p>软件未实现产品说明书虽未明确提及但应该实现的目标</p><p>软件难以理解，不易使用，运行速度慢，或者软件测员，最终用户认为软件不好。</p><p>由于不同的理解方式和中英文翻译问题，软件缺陷的说法很多，如错误、失效、失败等，本书中统称为软件缺陷（bug）。实际测试中，将软件缺陷定义为不同级别，代表不同程度的软件缺陷。</p><p>随着软件定义的变化，软件缺陷的定义也应随之更新。软件缺陷不仅仅局限于软件代码，还包括文档缺陷（不符合规范或者不详细，有错误和歧义等）、测试缺陷（测试不充分，或测试方法本身的局限）、过程缺陷（软件生命周期的流程问题造成的产品质量问题）和管理缺陷（由于管理本身不到位导致的产品质量问题）。</p><ol start="30"><li>软件测试的V模型</li></ol><p><strong>早期的软件测试V模型</strong></p><p>模型的左侧是开发阶段，右侧是测试阶段。开发阶段从了解并定义软件需求开始，然后要把需求转换到概要设计和详细设计，最后形成程序代码。测试阶段是在代码编写完成之后，先做单元测试，然后做集成测试、系统测试和验收测试。</p><p>单元测试：主要检测代码的编写是否符合详细设计中单个模块或组件的要求</p><p>集成测试：主要检测此前测试过的单个模块或组件，能否正确地集成到系统，与其他模块一起运行，是否符合概要设计和详细设计说明书的要求。</p><p>系统测试：以集成后的完整系统作为测试对象，主要检测其是否符合需求说明书、概要设计说明书和详细设计说明书的要求。</p><p>验收测试：主要检测软件产品是否符合用户需求，用户合同和需求说明书中的要求，需要得到用户认可并签字确认。</p><p><strong>改进后的V模型：</strong></p><p>改进后的V模型，一是加入软件测试分析和测试设计阶段，二是体现“尽早”思想。改进后的V模型，形成了一个没有软件开发过程的、单独的软件测试V模型。它的左边是软件测试需求分析和测试设计，右边是软件测试执行。虽然测试执行过程同样集中在软件编码之后，但是测试需求分析和测试设计已经提前，一直提前到与开发阶段并行开展。一方面可以为后期的测试执行过程做计划和准备，另一方面可以对软件的阶段性产品（软件工作产品）进行测试。前期的软件工作产品主要是文档，如测试需求分析阶段，就是测试软件需求分析过程的工作产品《需求规格说明书》，进而提炼出测试需求。</p><ol start="31"><li>黑盒测试</li></ol><p>黑盒测试又称为不透明盒测试，它给我们的更多启示是它的思考方式，即不考虑（主观上屏蔽）或者不需要（客观条件限制）知道被测对象的内部实现细节，只关心输入输出。在运用黑盒测试方法进行软件测试时，它并不关心软件的内部逻辑结构和实现方法，而是站在使用者的角度，主要测试软件的功能指标，即测试系统的功能模型。黑盒测试的依据是软件的行为描述，是面向功能的穷举输入测试。从理论上讲，只有把所有可能的行为都作为测试用例输入，才能完成黑盒测试工作。黑盒测试的对象可以是软件单元、软件模块、软件组件、软件子系统和软件系统，也可以是发散思维到软件文档，软件管理文档等软件生命周期中的任何可测试对象。</p><p>黑盒测试用例设计方法：</p><p>（1）     等价类划分法</p><p>（2）     边界值分析法</p><p>（3）     错误推测法</p><p>（4）     因果图分析法</p><p>（5）     场景分析法</p><ol start="32"><li>白盒测试</li></ol><p>白盒测试又称为透明盒测试，要求测试人员必须清楚被测对象的内部实现细节。白盒测试方法的测定依据是《详细设计说明书》。理论上讲，面向程序执行路径进行穷举代码测试，直至覆盖所有路径，才算完成了白盒测试。白盒测试的测试对象，侧重于软件单元，模块和构件等小规模对象，绝对不适合软件项目或产品的等大规模测试对象。</p><p>实用的白盒测试覆盖技术有4种，即语句覆盖，条件覆盖，分支覆盖和组合覆盖。覆盖的主要思想，是从不同角度尽可能提高代码的测试覆盖率。为了减少测试工作量，应该使每一个测试用例满足多个覆盖条件。</p><ol start="33"><li>等价类</li></ol><p>等价类划分的具体做法是：把所有可能的输入数据，即软件的输入域，划分成若干部分（子集），使每部分内的数据都是等效的（对于软件而言，等效可以理解为对数据的处理过程以及处理结果都完全一致），然后从每一个子集中选取少数具有代表性的数据，作为测试用例。</p><p>每一个等价类又可以划分为两种不同类别：有效等价类和无效等价类。</p><ol start="34"><li>边界值</li></ol><p>边界值分析方法是对等价类划分方法的补充。</p><p>测试工作者已经总结出经验：大量的错误常常发生在输入或输出范围的边界上，因此针对各种边界情况设计测试用例，可以查出更多的错误。</p><p>使用边界值分析方法设计测试用例使，首先参考等价类划分法确定边界情况，除了在等价类中选取典型代表数据外，通常还要着重测试边界值情况，应当选取正好等于、刚刚大于、或刚刚小于边界的值作为测试数据。</p><ol start="35"><li>测试需求</li></ol><p>它指软件测试员站在与用户相同角度上理解的需求，主要是确保需求的可测试性。同时找出软件需求和用户需求的偏差，并确保认可的偏差修改后体现在软件需求中，因为测试工作以《软件需求说明书》为基准，测试人员需要尽量保证《软件需求说明书》可以满足测试工作。</p><ol start="36"><li>Bug</li></ol><p>即软件缺陷，如错误，失效，失败等。</p><ol start="37"><li>CMMI</li></ol><p>软件能力成熟度模型CMMI，是由美国卡内基-梅隆大学软件工程研究所退出的评估软件能力与成熟度等级的一套标准。该标准基于众多软件专家的实践经验，侧重于软件开发过程管理能力的提高，是软件生产过程改进的标准和软件企业成熟度等级评估的标准。由于该标准不涉及具体的软件开发方法和技术，所以它具有广泛性、通用性和持久性。</p><p>CMMI的作用：概括地讲，过程能力成熟度模型集成CMMI的作用，主要是软件组织的能力评估和过程改进，它的应用领域具体体现在三个方面：</p><p>软件组织，用它来不断改进自身的软件过程管理能力</p><p>评估机构，用它来评估某软件组织当前软件能力成熟度级别</p><p>客户，用它来评价某承包商（软件外包商）的软件能力</p><p>CMMI的实质：</p><p>为了真正达到持续改进软件过程能力的目的，并以尽量低的成本获得高的效益，首先要弄清楚“过程”、“项目”、“组织”、“度量”等五个基本概念。</p><p>以“过程”为核心，抓软件组织的管理，即软件“组织”的过程改进</p><p>以“项目”为手段，抓团队开发过程的“活动”，即落实过程改进的措施</p><p>以“活动”记录为基础，抓软件过程的“度量”，即“度量”软件组织改进的情况</p><ol start="38"><li>软件配置管理</li></ol><p>软件配置管理SCM，是对软件开发过程中配置项的一组追踪和控制活动，它开始于软件开发之初，结束于软件淘汰之时。软件配置管理在软件过程管理中，占有特殊得到地位，也是项目管理的重要内容。无论是ISO9001、CMMI，还是软件企业文化，都非常强调配置管理。在大中型软件企业内部设置专职的配置管理员，在各个项目组内部设置兼职的配置管理员，引进配置管理电子工具，开展配置管理的日常工作。</p><ol start="39"><li>CMMI阶段的成熟度等级</li></ol><p>阶段模型的5个等级，称为成熟度等级ML，从ML1级到ML5级。</p><table><thead><tr><th>CMMI的等级</th><th>PA数目</th><th>管理特点</th></tr></thead><tbody><tr><td>ML1:Initial（初始级）</td><td>0</td><td>过程不可预测且缺乏控制</td></tr><tr><td>ML2：Managed（已管理级）</td><td>7</td><td>过程为项目服务，即项目级管理</td></tr><tr><td>ML3：Defined（以定义级）</td><td>11</td><td>过程为组织服务，即组织级管理</td></tr><tr><td>ML4:Quantitatively Managed(定量管理级)</td><td>2</td><td>过程已度量和控制，即定量级管理</td></tr><tr><td>ML5：Optimizing（优化级）</td><td>2</td><td>集中于过程改进，即优化级管理</td></tr></tbody></table><ol start="40"><li>极限编程</li></ol><p>极限编程（即XP）是一个周密而严谨的软件开发流程。XP从4个基本方面对软件项目进行改善：交流、简单、反馈和进取。</p><p>XP程序员与客户交流、与同事交流；</p><p>他们的设计简单而干净；</p><p>他们通过测试来得到反馈；</p><p>他们根据变化修改代码，并争取尽可能早地将软件交付给客户。</p><p>在此基础上，XP程序员能够勇于面对需求变化和技术变化，“船小好调头”，对需求变化和技术变化做出敏捷反应，把那个取得成功，是敏捷文化的特色和本质。</p><ol start="41"><li>软件质量管理的三大支柱</li></ol><p>软件质量保证SQA是一个过程，是CMMI和ISO9001的重要议题，是微软公司和IBM公司的重点课题，同样也是项目管理的重要内容。</p><p>软件质量：是供方提供的软件产品满足用户明确和隐含需求的能力特性的总和。</p><p>通常，人们将“质量标准”、“配置管理”、“质量测试”作为质量管理的三大支柱。</p><p>而将”SQA计划”、“SQA进度”、“SQA评审和审计”作为质量管理三大要素。</p><p>软件质量保证是一个质量管理过程，基本思想是“以事先预防为主，以事后纠偏为辅”，采取标本兼治的方法。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;软件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般认为，程序是计算机为完成特定任务而执行的指令的有效集合。站在应用的角度可以通俗地理解为：&lt;/p&gt;
&lt;p&gt;面向过程的程序=算法+数据结构&lt;/p&gt;
&lt;p&gt;面向对象的程序=对象+消息&lt;/p&gt;
&lt;p&gt;面向构件的程序=构件+构架&lt;/
      
    
    </summary>
    
      <category term="软件工程" scheme="http://wanqbin.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="软件工程名词解释" scheme="http://wanqbin.xyz/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络体系结构</title>
    <link href="http://wanqbin.xyz/2019/06/10/%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>http://wanqbin.xyz/2019/06/10/算机网络体系结构/</id>
    <published>2019-06-09T16:45:00.000Z</published>
    <updated>2019-06-15T12:22:44.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、计算机网络分层结构"><a href="#一、计算机网络分层结构" class="headerlink" title="一、计算机网络分层结构"></a>一、计算机网络分层结构</h2><p>两个系统中实体间的通信是一个很复杂的过程，为了降低协议设计和调试过程的复杂性，也为了便于对网络进行研究、实现和维护，促进标准化工作，通常对及时算计网络的体系结构以分层的形式进行建模。</p><p>我们将计算机网络的各层及其协议的集合称为网络的体系结构。</p><p>网络设计者以分层的方式组织协议以及实现这些协议的网络硬件和软件，每个协议就属于这些层次之一。某层向它的上一层提供服务，即所谓每一层的服务模型。例如，第n层提供的服务可能包括报文从网络的一边到另一边的可靠传送。这可能是通过使用第n-1层的边缘到边缘的不可靠报文传送，加上第n层的检测和重传丢失报文的功能来实现的。</p><p>计算机网络的体系结构通常都具有可分层的特性，它将复杂的大系统分为若干个较容易实现的层次。分层的基本原则如下：</p><ol><li>每次都实现一种相对独立的功能，降低大系统的复杂度</li><li>各层之间界面自然清晰，易于理解，相互交流尽可能少</li><li>各层功能的精确定义独立于具体的实现方法，可以采用合适的技术来实现</li><li>整个分层结构应该促进标准化工作</li></ol><p>在计算机网路的分层结构中，第n层中的活动元素通常被称为n层实体。具体来说，<strong>实体指任何可发送或接受信息的硬件或软件进程，通常是一个特定的软件模块</strong>。不同机器上的同一层称为对等层，同一层的实体称为对等实体。</p><p>在计算机网络体系结构的各个层次中，每个报文都分为两部分：一是数据部分，即SDU；二是控制信息部分，即PCI，它们共同组成PDU。</p><p>服务数据单元（SDU）：为完成用户所要求的功能而应传送的是数据。第n层的服务数据单元记为n-SDU。</p><p>协议控制信息（PCI）：控制协议操作的信息。第n层的协议控制信息记为n-PCI。</p><p>协议数据单元（PDU）：对等层次之间传送的数据单位称为该层的PDU。第n层的协议数据记为n-PDU。在实际的网络中，每层的协议数据单元都有一个通俗的名称，如物理层的PDU称为比特，链路层的PDU称为帧，网络层的PDU称为分组，传输层的PDU称为报文。</p><p>在各层间传输数据时，把从第n+1层收到的PDU作为第n层的SDU，加上第n层的PCI，变成了第n层的PDU，交给第n-1层后作为SDU发送，接收方接收时做相反处理。故可知三者的关系是n-SDU+n-PCI=n-PDU=(n-1)-SDU.</p><h2 id="二、协议、接口、服务"><a href="#二、协议、接口、服务" class="headerlink" title="二、协议、接口、服务"></a>二、协议、接口、服务</h2><ol><li><p>协议</p><p>协议，就是规则的集合。在网络中要做到有条不紊地交换数据，就必须遵循一些事先约定好的规则，这些规则明规定了所交换的数据的格式及有关的同步问题。这些为进行网络中的数据交换而建立的规则、标准或约定称为网络协议。它是控制两个（或多个）对等实体进行通信的规则的集合，是水平的。不对等的实体之间没有协议。</p></li><li><p>接口</p><p>接口是同一结点内相邻两层之间交换信息的连接点，是一个系统内部的规定。每层只能为紧邻的层次之间定义接口，不能跨层定义接口。在典型的接口上，同一结点相邻两层的实体通过服务访问点（SAP）进行交互。服务是通过SAP提供给上层使用的，第n层的SAP就是第n+1层可以访问第n层服务的地方。</p></li><li><p>服务</p><p>服务是指下层为紧邻的上层提供的功能调用，它是垂直的。</p><p>上层使用下层所提供的服务时必须与下层交换一些命令，这些命令在OSI中称为服务原语。OSI将原语划分为4类：<br>1）请求：由服务用户发往服务提供者，请求完成某项工作</p><p>2）指示：由服务提供者发往服务用户，提示用户做某件事</p><p>3）相应：由服务用户发往服务提供者，作为对指示的响应</p><p>4）证实：由服务提供者发往服务用户，作为对请求的证实</p></li></ol><p>   并非在一层内完成的全部功能都称为服务，只有那些能够被高一层实体“看得见”的功能才称为服务。</p><p>   计算机网络提供的服务可按以下三种方式分类：</p><p>   （1）面向连接服务于无连接服务</p><p>   在面向连接服务中，通信前双方必须先建立连接，分配相应的资源，以保证通信能正常进行，传输结束后释放连接和所占用的资源。因此这种服务可分为建立连接、数据传输和释放连接三个阶段。TCP就是一种面向连接服务的协议。</p><p>   在无连接服务中，通信前双方不需要先建立连接，需要发送数据时可直接发送，把每个带有目的地址的包传送到线路上，由系统选定路线进行传输。这是一种不可靠的服务，这种服务常被描述为“尽最大可能交付”，它不能保证通信的可靠性。例如IP、UDP就是一种无连接服务的协议。</p><p>   （2）可靠服务与不可靠服务</p><p>   可靠服务是网络具有检错、纠错、应答机制，能保证数据正确、可靠地传送到目的地。</p><p>   不可靠服务是指网络只是尽量正确、可靠地传送，而不能保证数据正确、可靠地传送到目的地，是一种尽力而为的服务。</p><p>   （3）有应答服务和无应答服务</p><p>   有应答服务是指接收方在收到数据后向发送方给出相应的应答，该应答由传输系统同内部自动实现，而不由用户实现。所发送的应答既可以是可乐定应答，也可以是否定应答，通常在接收到数据有错误时发送否定应答。文件传输服务就是一种有应答服务。</p><p>   无应答服务是指接收方收到数据后不自动给出应答。若需要应答，则由高层实现。例如，对于WWW服务，客户端收到服务器发送的页面文件不给出应答。</p><h2 id="三、ISO-OSI参考模型和TCP-IP模型"><a href="#三、ISO-OSI参考模型和TCP-IP模型" class="headerlink" title="三、ISO/OSI参考模型和TCP/IP模型"></a>三、ISO/OSI参考模型和TCP/IP模型</h2><ol><li><p>OSI参考模型</p><p>国际标准化组织（ISO）提出的网络体系结构模型，称为开放系统互联参考模型。通常简称为OSI模型。OSI有7层，自下而上依次是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p><p>低三层称为通信子网，它是为了联网而附加的通信设备，完成数据的传输功能；高三层统称为资源子网，它相当于计算机系统，完成数据的处理等功能。</p><p>1）物理层</p><p>物理层的传输单位是比特，任务是透明的传输比特流，功能是在物理媒体上为数据端设备透明地提供传输原始比特流。</p><p>物理层主要定义数据终端设备(DTE)和数据通信设备（DCE）的物理与逻辑连接方法，所以物理层协议也称为物理层接口标准，也称为规程。</p><p>2）数据链路层</p><p>数据链路层的传输单位是帧，任务是将网络层传来的IP数据报组装成帧。数据链路层的功能可以概括为成帧、差错控制、流量控制和传输管理。</p><p>典型的数据链路层协议有SDLC、HDLC、PPP、STP和帧中继等。</p><p>3）网络层</p><p>网络层的传输单位是数据报，它关心的是通信子网的运行控制，主要任务是把网络层的协议数据单元（分组）从源端传送到目的端，为分组交换网上的不同主机提供通信服务。关键问题是对分组进行路由选择，并实现流量控制、拥塞控制、差错控制和网际互联等功能。</p><p>网络层的协议有IP、IPX、ICMP、IGMP、ARP 、RARP、OSPF等</p><p>4）传输层</p><p>传输层也称为运输层，传输大单位是报文段（TCP）或用户数据报（UDP），传输层负责主机中两个进程之间的通信，功能是为端到端连接提供可靠的传输服务，为端到端连接提供流量控制、差错控制、服务质量、数据传输管理等服务。</p><p>数据链路层提供的是点对点的通信，传输层提供的是端到端的通信。</p><p>传输层的协议有TCP、UDP</p><p>5）会话层</p><p>会话层允许不同的主机上的各个进程之间进行通信。会话层利用传输层提供的端到端的服务向表示层提供它的增值服务。这种服务主要为表示层实体或用户进程建立连接并在连接上有序地传输数据，这就是会话，也称为建立同步(SYN)。</p><p>会话层负责管理主机间的会话进程，包括建立、管理及终止进程间的会话。会话层可以使用校验点使通信会话在通信失效时从校验点继续恢复通信，实现数据同步。</p><p>6）表示层</p><p>表示层主要用于处理在两个通信系统中交换信息的表示形式。不同机器采用的编码和表示方法不同，使用的数据结构也不同。为了使不同表示方法的数据和信息之间能互相交流，表示层采用抽象的标准方法定义数据结构，并采用标准的编码形式。数据压缩、加密和解密也是表示层可提供的数据表示交换功能。</p><p>7）应用层</p><p>应用层是OIS模型的最高层，是用户与网络的界面。应用层为特定类型的网络应用提供访问OSI环境的手段。因为用户的实际应用多种多样，这就要求应用层采用不同的应用协议来解决不同类型的应用要求，因此应用层是最复杂的一层，使用的协议也最多。</p><p>典型的应用层协议有用于文件传输的FTP、用于电子邮件的SMTP、用于万维网的HTTP等。</p></li><li><p>TCP/IP模型</p><p>TCP/IP模型从低到高依次是网络接口层（对应OSI参考模型中的物理层和数据链路层）、网际层、传输层和应用层（对应OSI模型的会话层、表示层、应用层）。</p><p>1）网络接口层</p><p>网络接口层的功能类似于OSI的物理层和数据链路层。它表示与物理网络的接口，但实际上TCP/IP本身并未真正描述这一部分，只是指出主机必须使用某种协议和网络连接，以便在其上传递IP分组。</p><p>2）网际层</p><p>网际层（主机-主机）是TCP/IP体系结构的关键部分。它和OSI网络层在功能上是非常相似的。网际层将分组发往任何网络，并为之独立地选择合适的路由，但它不保证各个分组有序地到达，各个分组的有序交付由高层负责。</p><p>3）传输层</p><p>传输层（应用-应用或进程-进程）的功能同样与OSI中的传输层类似，使得发送端和目的端主机的对等实体进行会话。传输层主要使用以下两种协议：<br>（1） 传输控制协议（Transmission Control Protocol，TCP）。它是面向连接的，数据传输的单位是报文段，能够提供可靠的交付。</p><p>（2）用户数据报协议（User Datagram Protocol，UDP）。它是无连接的，数据传输的单位是用户数据报，不能保证提供可靠的交付，只能提供“尽最大努力交付”。</p><p>4）应用层（用户-用户）包含所有的高层协议。IP协议是因特网中的核心协议；TCP/IP可以为各种各样的应用提供服务，同时TCP/IP也允许在由各种网络构成的互联网上运行。</p></li><li><p>TCP/IP模型与OSI模型的比较</p><p>1）二者都采用分层的体系结构，分层的功能也大体相似</p><p>2）二者都基于独立的协议栈概念</p><p>3）二者都可以解决异构网络的互联，实现世界上不同厂家生产的计算机之间的通信</p><p>4）OSI模型最大的贡献是精确地定义了三个主要的概念：服务，协议和接口，与现代的面向对象程序设计思想非常吻合。而TCP/IP模型在这三个概念上却没有明确区分，不符合软件工程的思想</p><p>5）OSI模型产生在协议之前，没有偏向于任何特定的协议，通用性良好。TCP/IP模型产生于协议之后，实际是对协议的描述</p><p>6）TCP/IP在设计之初就考虑了多种异构网的互联问题，并将网际协议（IP）作为一个单独的重要层次。OSI模型最初只考虑到用一种标准的公用数据网络将不同的系统互联。OSI模型认识到网际协议IP的重要性后，只好在网络层中划分出一个子层来完成类似于TCP/IP模型中的IP功能</p><p>7）<strong>OSI模型在网络层支持无连接和面向连接的通信，但在传输层仅有面向连接的通信。而TCP/IP模型认为可靠性是端到端的问题，因此它在网际层仅有一种无连接的通信模式，但传输层支持无连接和面向连接两种模式</strong>。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、计算机网络分层结构&quot;&gt;&lt;a href=&quot;#一、计算机网络分层结构&quot; class=&quot;headerlink&quot; title=&quot;一、计算机网络分层结构&quot;&gt;&lt;/a&gt;一、计算机网络分层结构&lt;/h2&gt;&lt;p&gt;两个系统中实体间的通信是一个很复杂的过程，为了降低协议设计和调试过程
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://wanqbin.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络体系结构" scheme="http://wanqbin.xyz/tags/%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>通信基础</title>
    <link href="http://wanqbin.xyz/2019/06/10/%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://wanqbin.xyz/2019/06/10/通信基础/</id>
    <published>2019-06-09T16:42:00.000Z</published>
    <updated>2019-06-13T16:43:00.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面</p></blockquote><p>物理层协议的主要任务就是确定与传输媒体的接口有关的一些特性，如下所述：</p><ol><li>机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等。</li><li>电气特性：指明在接口电缆的各条线上出现的电压范围1.</li><li>功能特性：指明某条线上出现的某一电平代表何种意义。</li><li>过程特性：指明对于不同功能的各种可能事件的出现顺序。</li></ol><h2 id="一、数据通信的模型"><a href="#一、数据通信的模型" class="headerlink" title="一、数据通信的模型"></a>一、数据通信的模型</h2><p>一个数据通信系统可划分为三大部分，即源系统（或发送端，发送方）、传输系统（或传输网络）和目的系统（或接收方、接收端）。</p><p>源系统一般包括两部分：</p><ol><li>源点：源点设备产生要传输的数据。</li><li>发送器：通常源点生成的数字比特流要通过发送器编码之后才能在传输系统中进行传输。</li></ol><p>目的系统一般包括两部分：</p><ol><li>接收器：接收传输系统传送过来的信号，并把它转换为能够被目的设备处理的信息。</li><li>终点：终点设备从接收器获取传送来的数字比特流，然后进行信息输出。终点又称为目的站或信宿。</li></ol><p>在源系统和目的系统之间的传输系统可以是简单的传输线路，也可以是连接在源系统和目的系统之间的复杂网络系统。</p><p>通信的目的是传送<strong>消息</strong>。</p><p><strong>数据</strong>是消息的实体。</p><p><strong>信号</strong>是数据的电器或电磁表现。根据信号中代表的消息的参数的取值方式不同，信号可分为两类：</p><ol><li>模拟信号（或连续信号）——消息的参数的取值时连续的</li><li>数字信号（或离散信号）——消息的参数的取值时离散的。在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形就称为<strong>码元</strong>。在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态。</li></ol><p><strong>速率、波特与带宽</strong></p><p>速率也称为数据率，指的是数据的传输速率，表示单位之间内传输的数据量。可以用码元传输速率和信息传输速率表示。</p><ol><li>码元传输速率。又称码元速率，波形速率等，它表示单位时间内数字通信系统所传输的码元个数，单位是波特（Baud）。1波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，但码元速率与进制数无关。</li><li>信息传输速率。又称信息速率，比特率等。它表示单位时间内数字通信系统传输的二进制码元数（即比特数），单位是比特/秒（b/s).</li></ol><h2 id="二、编码与调制"><a href="#二、编码与调制" class="headerlink" title="二、编码与调制"></a>二、编码与调制</h2><ol><li><p>常用编码方式</p><p>要利用信道传输数据，必须将数据转换为能在传输媒体媒体上传送的信号。信道可以分为传送模拟信号的<strong>模拟信道</strong>和传送数字信号的<strong>数字信道</strong>两大类。</p><p>将数字数据转换为数字信号的过程称为<strong>编码</strong>。</p><p>将数字信号转换为模拟信号的过程称为<strong>调制</strong>。</p><p><img src="https://i.imgur.com/nvmtArH.png" alt></p></li></ol><p>   归零制：正脉冲代表1，负脉冲代表0；</p><p>   不归零制：正电平代表1，负电平代表0；</p><p>   曼彻斯特编码：位周期中心的是上跳变代表0，位周期中心的下跳变代表1；</p><p>   差分曼彻斯特编码：在每一位的中心处始终有跳变。位开始边界有跳变代表0，而位边界没有跳变代表1；</p><ol start="2"><li><p>基本的调制方法</p><p>矩形脉冲波形的数字信号包含从直流开始的低频分量，被称为<strong>基带信号</strong></p><p>在数字信道上直接传输基带信号的方法称为<strong>基带传输</strong></p><p>基带信号往往包含较多的低频成分，甚至直流成分。而许多模拟信道仅能通过某一频率范围的信号，不能直接传输这种基带信号。因此必须对基带信号进行<strong>调制</strong>，使它能够在模拟信道中传输。</p><p>在很多情况下，需要使用<strong>载波</strong>进行调制，把基带信号的频率范围搬移到较高的频段以便在信道中传输。经过载波调制后的信号称为<strong>带通信号</strong>，而使用载波的调制称为<strong>带通调制</strong>。</p><p>最基本的带通调制的方法有：<br>1）调幅（AM），即载波的增幅随基带数字信号而变化。</p><p>2）调频（FM），即载波的频率随着基带数字信号的变化而变化。</p><p>3）调相（PM），即载波的初始相位随基带数字信号而变化。</p><p>在数字通信中，调幅、调频和调相相应地称为<strong>幅移键控</strong>、<strong>频移键控</strong>和<strong>相移键控</strong>。实现调制和解调功能的设备称为<strong>调制解调器</strong>。</p></li></ol><h2 id="三、奈奎斯特定理与香农定理"><a href="#三、奈奎斯特定理与香农定理" class="headerlink" title="三、奈奎斯特定理与香农定理"></a>三、奈奎斯特定理与香农定理</h2><ol><li><p>奈奎斯特定理</p><p>奈奎斯特定理又称<strong>奈氏准则</strong>。它指出在理想低通（没有噪声、带宽有限）的信道中，极限码元速率为2W波特，其中W是理想低通信道的带宽，单位是Hz。若用V表示每个码元离散电平的数目（码元的离散电平数目是指有多少种不同的码元，比如有16种不同的码元，则需要有4位二进制位，因此数据传输率是码元传输率的4倍），则极限速率为</p><p>​                                理想低通信道下的极限数据传输率=$2Wlog_2V$（单位为b/s)</p><p>对于奈氏准则，可以得出以下结论：</p><p>1）在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限，就会出现严重的码间串扰问题，使得接收端不可能完全正确地识别码元。</p><p>2）信道的频带越宽(即通过的信号高频分量越多)，就可用更高的速率进行码元的有效传输。</p><p>3）奈氏准则给出了码元传输速率的限制，但是并未对信息传输速率给出限制，即未对一个码元可以对应多少个二进制位给出限制。</p><p>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元携带更多个比特的信息量，此时就需要多元制的调制方法。</p></li><li><p>香农定理</p><p>香农定理给出了带宽受限且有高斯白噪声干扰的信道的极限数据传输率，当用此速率进行传输时，可以做到不产生误差。香农定理定义为：</p><p>​    信道的极限数据传输率=$Wlog_2(1+S/N)$ 单位为b/s</p><p>式中，W为信道带宽，S为信道所传输信号的平均功率，N为信道内部的高斯噪声功率，$S/N$为信噪比，即信号的平均功率与噪声的平均功率之比。</p><p>对于香农定理，可以得出以下的结论：<br>1）信道的带宽或信道中的信噪比越大，信息的极限传输速率越高。</p><p>2）对一定的传输带宽和一定的信噪比，信息传输速率的上限是确定的。</p><p>3）只要信息的传输速率低于信道的极限传输速率，就能找到某种方法来实现无差错的传输。</p><p>4）香农定理得出的是极限信息传输速率，实际信道能达到的传输速率比它低不少。</p><p>从香农定理可以看出，若信道带宽W或信噪比S/N没有上限，则信道的极限信息传输速率也没有上限。</p><p>奈氏准则只考虑了带宽与极限码元速率的关系，而香农定义不仅考虑了带宽，而且考虑到了信噪比。这从另一个侧面表明，一个码元对应的二进制位数是有限的。</p><h2 id="四、传输方式"><a href="#四、传输方式" class="headerlink" title="四、传输方式"></a>四、传输方式</h2><ol><li><p>并行传输与串行传输</p><p>并行传输，是指一次发送n个比特而不是一个比特，为此，在发送端和接收端之间需要有n条传输线路。</p><p>串行传输，是指数据是一个比特一个比特发送的，为此，发送端和接收端之间只需要一条传输线路。</p></li><li><p>异步传输与同步传输</p><p>异步传输以字节为独立的传输单位，字节之间的时间间隔不是固定的，接收端仅在每个字节的起始处对字节内的比特实现同步。为此，通常需要在每个字节前后分别加上起始位和结束位，这里的异步是指在字节级上的异步，但是字节中的每个比特仍然要同步，它们的持续时间是相同的。</p><p>采用同步传输方式时，数据块以稳定的比特流形式传输，字节之间没有间隔，也没有起始位和结束位。由于不同设备的时钟频率存在一定差异，为避免在传输大量数据的过程中累积误差所导致的错误，要采取技术使得收发双方的时钟保持同步。实现收发双方时钟同步的方法有两种，即外同步和内同步。</p><p><strong>外同步</strong>，是在发送端和接收端之间提供一条单独的时钟线，发送端在发送数据信号的同时，另外发送一条时钟同步信号。接收端根据接收到的时钟同步信号来校正时间基准，实现收发双方之间的同步。</p><p><strong>内同步</strong>，是发送端将时钟同步信号编码到发送数据中一起传输，如曼彻斯特编码与差分曼彻斯特编码都含有时钟编码，具有自同步能力。</p></li><li><p>单工、半双工、全双工</p><p>1）单向通信，又称为单工通信，即只能有一个方向的通信而没有反方向的交互。如广播等。</p><p>2）双向交替通信，又称半双工通信，即通信的双方都可以发送信息，但不能双方同时发送。这种通信方式是一方发送另一方接收，过一段时间再反回来。</p><p>3）双向同时通信，又称为全双工通信，即通信的双方可以同时发送和接收信息。</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;写在前面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;物理层协议的主要任务就是确定与传输媒体的接口有关的一些特性，如下所述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等。&lt;/li&gt;
&lt;li&gt;电
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://wanqbin.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="通信" scheme="http://wanqbin.xyz/tags/%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络概述</title>
    <link href="http://wanqbin.xyz/2019/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
    <id>http://wanqbin.xyz/2019/06/10/计算机网络概述/</id>
    <published>2019-06-09T16:40:00.000Z</published>
    <updated>2019-06-13T16:41:26.557Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>一般认为，计算机网路是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接在一起，由功能完善的软件实现资源共享和信息传递的系统。简言之，计算机网络就是一些互联的、自治的计算机系统的集合。 </p><h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><p>在计算机的不同发展阶段，网络有不同的定义，这些定义反映了当时网络技术的发展水平。分为三类：</p><ol><li><p>广义观点</p><p>广义观点认为，只要是能实现远程信息处理的系统或能进一步达到资源共享的系统，，都是计算机网络。</p></li><li><p>资源共享观点</p><p>资源共享观点认为，计算机网络是“以能够相互共享资源的方式互联起来的自治计算机系统的集合”。这个定义符合目前计算机网络的基本特征。</p></li><li><p>用户透明性观点</p><p>这种观点认为，存在一个能为用户自动管理资源的网络操作系统。它能够调用用户所需要的资源，而整个网络就像是一个大的计算机系统一样对用户是透明的。用户透明性观点的定义描述了一个分布式系统，它是网络未来发展追求的目标。</p></li></ol><h2 id="二、计算机网络的组成"><a href="#二、计算机网络的组成" class="headerlink" title="二、计算机网络的组成"></a>二、计算机网络的组成</h2><p>从不同的角度，可以将计算机网路的组成分为以下几类：</p><ol><li>从组成部分上来看，一个完整的计算机网络主要由硬件、软件、协议散发部分组成。<strong>硬件</strong>主要由主机（端系统）、通信链路（如双绞线、光纤）、交换设备（如交换机、路由器）和通信处理机（如网卡）等组成。<strong>软件</strong>主要包括各种实现资源共享的软件和方便用户使用的各种工具软件。软件部分多属于应用层。<strong>协议</strong>是计算机网络的核心。</li><li>从工作方式看，计算机网络可分为边缘部分和核心部分。边缘部分由所有连接到因特网上、供用户使用的端系统组成，用来进行通信和资源共享。核心部分由大量的网络和连接这些网络的路由器组成，为边缘部分提供连通性和交换服务。</li><li>从功能组成上看，计算机网络由通信子网和资源子网构成。通信子网由各种传输介质、通信设备和相应的网络协议组成，它使网络具有数据传输、交换、控制和存储的能力，实现联网计算机之间的数据通信。资源子网是实现资源共享功能的设备及其软件的集合，向用户提供共享其他其他计算机上的硬件资源、软件资源和数据资源的服务。</li></ol><h2 id="三、计算机网络的功能"><a href="#三、计算机网络的功能" class="headerlink" title="三、计算机网络的功能"></a>三、计算机网络的功能</h2><p>计算机网路的功能很多，现如今的很多应用都与网络有关。主要有下面5个部分。</p><ol><li><p>数据通信</p><p>它是计算机网络最基本也是最重要的功能，用来实现联网计算机之间的各种信息的传输，并将分散在不同地理位置的计算机联系起来，进行统一的调配、控制和管理。</p></li><li><p>资源共享</p><p>资源共享可以是软件共享、数据共享，也可以是硬件共享。使计算机网络中的资源互通有无，分工协作，从而极大地提高了硬件资源、软件资源和数据资源的利用率</p></li><li><p>分布式处理</p><p>当计算机网络中的某个计算机负荷过重时，可以将其处理的某个复杂的任务分配给网络中的其他计算机系统，从而利用空闲资源以提高整个系统的利用率</p></li><li><p>提高可靠性</p><p>计算机网络中的各台计算机通过网络互为替代机</p></li><li><p>负载均衡</p><p>将工作任务均衡地分配给计算机网络中的各台计算机。</p></li></ol><h2 id="四、计算机网络的分类"><a href="#四、计算机网络的分类" class="headerlink" title="四、计算机网络的分类"></a>四、计算机网络的分类</h2><ol><li><p>按分布范围分：</p><p>1) 广域网（WAN）。任务是提供长距离通信，运送主机所发送的数据。</p><p>2）城域网（MAN）。城域网的覆盖范围可以跨越几个街区甚至几个城市，大多采用以太网技术。</p><p>3）局域网（LAN）。局域网一般用微机或工作站通过高速线路相连，覆盖范围较小。传统上，局域网使用广播技术，而广域网使用交换技术。</p><p>4）个人局域网（PAN）。在个人工作的地方将消费电子设备用无线技术连接起来的网络。</p></li><li><p>按传输技术分：</p><p>1）广播式网络。所有联网计算机都共享一个公共通信信道。当一台计算机利用共享通信信道发送报文分组时，所有其他的计算机都会“收听”到这个分组。接收到该分组的计算机将通过检查目的地址来决定是否接收该分组。</p><p>局域网基本上都采用广播式通信技术，广域网中的无线，卫星通信网络也采用广播式通信技术。</p><p>2）点对点网络。每条物理线路连接一对计算机。如果通信的两台计算机之间没有直接连接线路，那么它们之间的分组传输就要通过中间结点的接收、存储和转发，直至目的结点。</p><p>是否采用分组存储转发与路由选择机制是点对点网络与广播式网络的重要区别，广域网基本都属于点对点网络。</p></li><li><p>按拓扑结构分:</p><p>网络拓扑结构是指由网中结点（路由器、主机等）与通信线路（网线）之间的几何关系表示的网络结构，主要指通信子网的拓扑结构。</p><p>按网络的拓扑结构，主要分为星形、总线形、环形和网状形网络等。星形、总线形和环形网络多用于局域网，网状网络多用于广域网。</p><p>1）星形网络。每个终端或计算机都以单独的线路与中央设备相连。中央设备早期是计算机，现在一般是交换机或路由器。星形网络便于集中控制和管理，因为端用户之间的通信必须通过中间设备。缺点是成本高，中心节点对故障敏感。</p><p>2）总线形网络。用单根传输线将计算机连接起来。总线形网络的优点是建网容易，增减节点方便，节省线路。缺点是重负载时通信效率不高，总线任意一处对故障敏感。</p><p>3）环形网络。所有计算机接口设备连接成一个环。环形网络最典型的例子是令牌环局域网。环可以是单环，也可以是双环，环中信号是单向传输的。</p><p>4）网状网络。一般情况下，每个结点至少有两条路径与其他节点相连，多用于广域网中。有规则型和非规则型。其优点是可靠性高，缺点是控制复杂，线路成本高。</p></li><li><p>按使用者分:</p><p>1）公用网。指电信公司出资建造的大型网络。</p><p>2）专用网。指某个部门为了满足本单位特殊业务的需要而建造的网络，这种网络不对单位以外的人开放。</p></li><li><p>按交换技术分：</p><p>1）电路交换网络。在源结点和目的结点之间建立一条专用的通路用于传送数据，包括建立连接、传输数据和断开连接三个阶段。最典型的电路交换网络是传统电话网络。</p><p>该类网络的主要特点是整个报文的比特流连续地从源点直达终点，好像是在一条管道中传送。优点是数据直接传送，时延小。缺点是线路利用率低、不能充分利用线路容量，不便于进行差错控制。</p><p>2）报文交换网络。用户数据加上源地址、目的地址、校验码等辅助信息，然后封装成报文。整个报文传送到相邻结点全部存储后，再转发到下一个结点，重复这一过程直到到达目的结点。每个报文可以单独选择到达目的结点的路径。</p><p>报文交换网络也称存储-转发网络，主要特点是整个报文先传送到相邻结点，全部存储后查找转发表，转发到下一个结点。优点是可以较为充分的利用线路容量，可以实现不同链路之间不同数据率的转换，可以实现格式转换，可以实现一对多，多对一的访问，可以实现差错控制。缺点是增大了资源开销，增加了缓冲时延，需要额外的控制机制来保证多个报文的顺序不乱序，缓冲区难以管理。</p><p>3）分组交换网络。也称包交换网络。其原理是将数据分为较短的固定长度的数据块，在每个数据块中加上目的地址、源地址等辅助信息组成分组（包），以存储-转发方式传输。</p><p>其主要特点是单个分组传送到相邻结点，存储后查找转发表，转发到下一个结点。除具备报文交换网络的优点外，分组交换网络还具有自身的优点：缓冲易于管理；包的平均时延更小，网络占用的平均缓冲更少；易于标准化；更适合应用。现在的主流网络基本上都可视为分组交换网络。</p></li><li><p>按传输介质分：</p><p>传输介质可分为有线和无线两大类，故网络可分为有线网络和无线网络。有线网络又分为双绞线网络，同轴电缆网络等。无线网络可分为蓝牙、微波、无线电等。</p></li></ol><h2 id="五、计算机网络的的性能指标"><a href="#五、计算机网络的的性能指标" class="headerlink" title="五、计算机网络的的性能指标"></a>五、计算机网络的的性能指标</h2><p>性能指标从不同的方面来度量计算机网络的性能。</p><ol><li><p>速率</p><p>速率是数据的传送速率，它也称为数据率或比特率。</p></li><li><p>带宽</p><p>本来表示某个信号具有的频带宽度，单位是赫兹（Hz），而在计算机网络分钟，带宽用来表示网络的通信线路所能传送数据的能力，单位是比特/秒（b/s）</p></li><li><p>吞吐量</p><p>也称为吞吐率，表示单位时间内通过某个网络（或信道、接口）的数据量。</p></li><li><p>时延</p><p>时延是指一个数据（一个报文或分组，甚至比特）从网路（或链路）的一端传送到另一端所需要的时间。时延有时称为延迟或迟延。</p><p>1）发送时延，是主机或路由器将分组发送到通信线路上所需要的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送时延=分组长度/发送速率</span><br></pre></td></tr></table></figure><p>2）传播时延，是电磁波在信道中传播需要一定的距离而花费的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传播时延=信道长度/电磁波在信道上的传播速率</span><br></pre></td></tr></table></figure><p>3）处理时延，主机或路由器收到分组时要花费一定的时间进行处理，例如，分析分组的首部、从分组中提取数据部分、进行差错检验或查找适当的路由等，这就产生了处理时延。</p><p>4）排队时延，分组在进入路由器后要先在输入队列在排队等待处理。路由器确定转发端口后，还要在输出队列中排队等待转发，这就产生了排队时延。</p><p>这样，分组从一个结点转发到另一个结点转发到另一个结点所经历的时延就是以上4种时延之和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总时延=发送时延+传播时延+处理时延+排队时延</span><br></pre></td></tr></table></figure></li><li><p>丢包率</p><p>即分组丢失率，是指在一定的时间范围内，分组在传输过程中丢失的分组数量和总的分组数量的比率。</p><p>分组丢失的两种情况：一是因为传输过程中出现比特级差错被结点丢弃。二是因为分组交换机队列溢出。</p></li><li><p>利用率</p><p>令D0表示网络空闲时的时延，D表示网络当前时延，那么在适当的假定条件下，利用率可表示为：D=D0/1-U。</p><p>信道或网络利用率过高会产生非常大的时延。</p></li><li><p>时延带宽积</p><p>指发送端连续发送数据且发送的第一个比特即将到达终点时，发送端已经发出的比特数，即时延带宽积=传播时延*信道带宽。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;一般认为，计算机网路是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接在一起，由功能完善的软件实现资源共享和信
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://wanqbin.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>单链表的实现</title>
    <link href="http://wanqbin.xyz/2019/03/27/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wanqbin.xyz/2019/03/27/单链表的实现/</id>
    <published>2019-03-26T16:51:00.000Z</published>
    <updated>2019-06-13T16:51:59.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;链式存储结构是计算机中另一种最基本和最主要的数据存储结构。和顺序存储结构不同，初始化时链式存储结构为空链，每当有新的元素需要存储时用户向系统动态申请所需的存储空间插入链中。所有高级程序设计语言都为用户提供了向系统动态申请和动态释放存储空间的办法。C++提供了<code>new</code><br>和<code>delete</code>运算符，分别用于向系统动态申请所需存储空间和动态释放用new申请的存储空间。new能自动计算要分配的类型大小并自动返回正确的指针类型。delete能自动释放由new分配的存储空间。<br>&emsp;&emsp;在顺序存储结构中，用户向系统申请一块地址连续的有限空间用于存储数据元素，这样任意两个在逻辑上相邻的数据元素在物理上也必然相邻。但在链式存储结构中，由于它在初始化时为空链，每当有新的数据元素需要存储时用户才向系统动态申请所需的存储空间插入链中，而这些在不同时刻向系统动态申请的存储空间在内存上很可能是不连续的。因此，在链式存储结构中，任意两个在逻辑上相邻的数据元素在物理上不一定相邻，数据元素的逻辑次序是通过链中的指针连接实现的。<br> &emsp;&emsp;链式存储结构存储线性结构数据元素集合的方法是用节点（Node)构造链。线性结构数据元素的特点是：除第一个和最后一个元素外，每个元素只有一个唯一的前驱和一个唯一的后继。链式结构中每个节点除数据域外，还有一个或两个以上的指针域，数据域用来存放数据元素，指针域用来构造数据元素之间的关系。</p><blockquote><h1 id="1-单链表"><a href="#1-单链表" class="headerlink" title="1.单链表"></a>1.单链表</h1></blockquote><p>&emsp;单链表简称链表（linked list)，是表数据元素的单链结构存储。链表使用一个一个的节点链接构成的。<br>&emsp;&emsp;表要求允许在任意位置进行插入和删除。当选用带头节点的单链表时，在第一个位置插入节点和在其他位置插入节点一样不会改变头指针<code>head</code>的值，此时改变的是<code>head-&gt;next</code>的值。<br>&emsp;在第一个位置删除节点和在其他位置删除节点一样也不会改变头指针<code>head</code>的值，此时改变的也是<code>head-&gt;next</code>的值。  </p><blockquote><h1 id="2-节点类的定义和实现"><a href="#2-节点类的定义和实现" class="headerlink" title="2.节点类的定义和实现"></a>2.节点类的定义和实现</h1></blockquote><p>&emsp;在单链表中，每个节点构成包括数据域和指针域两部分。每个节点的基本操作包括构造一个节点对象、建立一个新节点、给出当前节点的下一个节点指针等。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">LinList</span>&lt;T&gt;;</span><span class="comment">//声明友元类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T data;<span class="comment">//数据域</span></span><br><span class="line">ListNode(ListNode&lt;T&gt; *ptrNext = <span class="literal">NULL</span>);<span class="comment">//构造函数，用于构造头节点，头节点没有data参数</span></span><br><span class="line">ListNode(<span class="keyword">const</span> T &amp;item, ListNode&lt;T&gt; *ptrNext = <span class="literal">NULL</span>);<span class="comment">//构造函数，主要用于构造非头节点的节点</span></span><br><span class="line">~ListNode() &#123;&#125;;<span class="comment">//析构函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ListNode&lt;T&gt; *next;<span class="comment">//指向下一节点的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ListNode</span>&lt;T&gt;:</span>:ListNode(ListNode&lt;T&gt;* ptrNext):next(ptrNext)</span><br><span class="line">&#123;&#125;<span class="comment">//构造函数，用于构造头节点，头节点没有值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ListNode</span>&lt;T&gt;:</span>:ListNode(<span class="keyword">const</span> T &amp; item, ListNode&lt;T&gt;* ptrNext)</span><br><span class="line">&#123;<span class="comment">//构造函数，用于构造非头节点的节点</span></span><br><span class="line">data = item;</span><br><span class="line">next = ptrNext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;节点类的成员有<code>data</code>域和<code>next</code>域。data域中存放了该节点的数据值，由于应用问题中需要使用链表中的data值，所以定义为公有数据成员方便使用；next域定义为私有数据成员。节点类的成员函数由两个不同参数的构造函数和空的析构函数。析构函数为空是因为节点类中没有用new函数向系统申请空间，而节点对象本身分配的空间，系统可自动识别释放。  </p><br><blockquote><h1 id="3-单链表类的定义"><a href="#3-单链表类的定义" class="headerlink" title="3.单链表类的定义"></a>3.单链表类的定义</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">LinList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LinList();<span class="comment">//构造函数</span></span><br><span class="line">~LinList();<span class="comment">//析构函数</span></span><br><span class="line"><span class="comment">//表操作成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listsize</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">//返回链表中元素的个数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">listempty</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">//链表是否为空</span></span><br><span class="line">ListNode&lt;T&gt; *index(<span class="keyword">int</span> pos);<span class="comment">//返回指向第pos个节点的指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> T&amp; item, <span class="keyword">int</span> pos)</span></span>;<span class="comment">//在pos节点前插入一个data域为item的元素</span></span><br><span class="line"><span class="function">T <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;<span class="comment">//删除第pos个节点并返回被删除节点的data域</span></span><br><span class="line"><span class="function">T <span class="title">getdata</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;<span class="comment">//返回第pos个节点的data值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearlist</span><span class="params">()</span></span>;<span class="comment">//清空表为初始化状态</span></span><br><span class="line"><span class="comment">//遍历链表的成员函数</span></span><br><span class="line">ListNode&lt;T&gt; *Reset(<span class="keyword">int</span> pos = <span class="number">0</span>);<span class="comment">//currPtr指向节点pos并返回currPtr</span></span><br><span class="line">ListNode&lt;T&gt; *Next();<span class="comment">//currPtr指向下一个节点并返回currPtr</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">endOfList</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">//currPtr==head？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ListNode&lt;T&gt; *head;<span class="comment">//指向头节点的指针</span></span><br><span class="line">ListNode&lt;T&gt; *currPtr;<span class="comment">//当前指针</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//单链表中元素的个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&emsp;单链表类的数据成员有头指针、元素个数和当前节点指针。头指针指向头结点，任何对单链表中节点的操作都要从头指针进入。初始化状态下，节点个数为0.当前节点指针是遍历链表成员函数使用的数据成员，遍历链表成员函数通过控制当前节点指针来遍历链表。<br>&emsp;&emsp;单链表类的成员函数由三组：构造函数和析构函数、表操作的成员函数和遍历链表的成员函数。由于单链表类中的节点是通过new函数向系统申请的，在释放单链表类对象的时候，系统无法自行释放这些空间，所以析构函数不能为空，析构函数必须用delete函数逐个释放这些空间。表操作成员函数时对表操作的基本成员函数，这与顺序表类中对表进行操作的成员函数意义相同，但是实现方法不同。链表的遍历操作是每次寻找当前节点的下一个节点，由于每次对链表类中节点的操作都要从头指针进入后寻找到相应的节点后才可完成，这样的单链表类遍历操作的时间复杂度返回大大增加，在单链表中增加一组遍历链表的成员函数可使单链表遍历操作的时间复杂度不增加。<br><br></p><blockquote><h1 id="4-单链表类的实现"><a href="#4-单链表类的实现" class="headerlink" title="4.单链表类的实现"></a>4.单链表类的实现</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">LinList</span>&lt;T&gt;:</span>:LinList()</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="keyword">new</span> ListNode&lt;T&gt;();<span class="comment">//头指针指向头结点</span></span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">LinList</span>&lt;T&gt;:</span>:~LinList()</span><br><span class="line">&#123;</span><br><span class="line">clearlist();</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">int</span> <span class="title">LinList</span>&lt;T&gt;:</span>:listsize() <span class="keyword">const</span><span class="comment">//返回单链表中元素的个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">LinList</span>&lt;T&gt;:</span>:listempty() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ListNode</span>&lt;T&gt;* <span class="title">LinList</span>&lt;T&gt;:</span>:index(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"><span class="keyword">if</span> (pos&lt;<span class="number">0</span> || pos&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"illegal operator"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode&lt;T&gt; *p = head-&gt;next;<span class="comment">//p指向第一个节点</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i &lt; pos)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">LinList</span>&lt;T&gt;:</span>:insert(<span class="keyword">const</span> T &amp; item, <span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">ListNode&lt;T&gt; *p = index(pos - <span class="number">1</span>);</span><br><span class="line">ListNode&lt;T&gt; *newnode = <span class="keyword">new</span> ListNode&lt;T&gt;(item, p-&gt;next);</span><br><span class="line">p-&gt;next = newnode;</span><br><span class="line">size++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">LinList</span>&lt;T&gt;:</span>:Delete(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list is empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ListNode&lt;T&gt;*q, *p = index(pos - <span class="number">1</span>);<span class="comment">//p为指向第pos-1个节点的指针</span></span><br><span class="line">q = p-&gt;next;<span class="comment">//q指向要删除节点</span></span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;<span class="comment">//p指向要删除节点的后一节点</span></span><br><span class="line">T data = q-&gt;data;  <span class="comment">//data保存要删除节点值</span></span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">LinList</span>&lt;T&gt;:</span>:getdata(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">ListNode&lt;T&gt; *p = index(pos);<span class="comment">//指针p指向第pos个节点</span></span><br><span class="line"><span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">LinList</span>&lt;T&gt;:</span>:clearlist()</span><br><span class="line">&#123;</span><br><span class="line">ListNode&lt;T&gt; *p, *p1;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;<span class="comment">//delete所有new出来的空间</span></span><br><span class="line">p1 = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ListNode</span>&lt;T&gt;* <span class="title">LinList</span>&lt;T&gt;:</span>:Reset(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">-1</span> || pos&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"mistake"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">currPtr = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">currPtr = head-&gt;next;</span><br><span class="line">ListNode&lt;T&gt; prevPtr = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">prevPtr = currPtr;</span><br><span class="line">currPtr = currPtr-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> currPtr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">ListNode</span>&lt;T&gt;* <span class="title">LinList</span>&lt;T&gt;:</span>:Next()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (currPtr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">currPtr = currPtr-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> currPtr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">bool</span> <span class="title">LinList</span>&lt;T&gt;:</span>:endOfList() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> currPtr == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这些成员函数基本上实现了单链表所需的基本操作。   </p><blockquote><h1 id="5-主函数测试"><a href="#5-主函数测试" class="headerlink" title="5.主函数测试"></a>5.主函数测试</h1></blockquote><p>测试主函数如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinList&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"单链表中的元素个数为："</span>&lt;&lt;<span class="built_in">list</span>.listsize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">list</span>.insert(<span class="number">15</span> * i, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"单链表中的元素个数为："</span> &lt;&lt; <span class="built_in">list</span>.listsize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"5号为："</span> &lt;&lt; <span class="built_in">list</span>.getdata(<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">list</span>.Delete(<span class="number">5</span>)&lt;&lt;<span class="string">"已被删除"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"5号为："</span> &lt;&lt; <span class="built_in">list</span>.getdata(<span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">ListNode&lt;<span class="keyword">int</span>&gt; *p = <span class="built_in">list</span>.Reset();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.endOfList())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = <span class="built_in">list</span>.Next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/3UiALqf.png" alt>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;链式存储结构是计算机中另一种最基本和最主要的数据存储结构。和顺序存储结构不同，初始化时链式存储结构为空链，每当有
      
    
    </summary>
    
      <category term="数据结构" scheme="http://wanqbin.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="单链表" scheme="http://wanqbin.xyz/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="http://wanqbin.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>友元</title>
    <link href="http://wanqbin.xyz/2019/03/23/%E5%8F%8B%E5%85%83/"/>
    <id>http://wanqbin.xyz/2019/03/23/友元/</id>
    <published>2019-03-23T12:30:00.000Z</published>
    <updated>2019-06-15T12:32:02.377Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1></blockquote><p>&emsp;&emsp;类的主要特点之一就是数据隐藏，即类的私有成员无法在类的外部（作用域之外）访问。但是，有时候需要在类的外部访问类的私有数据成员，怎么办呢？<br>&emsp;&emsp;解决办法是使用友元函数，友元函数时一种特权函数c，C++允许这个特权函数访问私有成员。这一点我们可以用生活中的例子来看：<br>&emsp;&emsp;比如你的家有客厅，有卧室，客厅是public的，所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去，但是，你可以允许你的好朋友进去。<br>&emsp;&emsp;程序员可以把一个全局函数、某个类中的成员函数、甚至整个类声明为友元。  </p><blockquote><h1 id="1-全局函数做友元函数"><a href="#1-全局函数做友元函数" class="headerlink" title="1.全局函数做友元函数"></a>1.全局函数做友元函数</h1></blockquote><p><strong>友元语法</strong>  </p><ul><li><code>friend</code>关键字只出现在声明处</li><li>其他类、类成员函数、全局函数都可以声明为友元</li><li>友元函数不是类的成员，不带this指针</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Home *home)</span></span>;</span><br><span class="line">Home()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;bedroom = <span class="string">"卧室"</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;sittingroom = <span class="string">"客厅"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> sittingroom;<span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> bedroom;<span class="comment">//卧室</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(Home *home)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"你的好友正在访问"</span> &lt;&lt; home-&gt;sittingroom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"你的好友正在访问"</span> &lt;&lt; home-&gt;bedroom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Home *home=<span class="keyword">new</span> Home;</span><br><span class="line">test(home);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/7zOVDCG.png" alt>  </p><p>从输出结果可以看出，当全局函数作为声明为友元函数之后，全局函数也可以访问类的私有成员。   </p><blockquote><h1 id="2-整个类做友元类"><a href="#2-整个类做友元类" class="headerlink" title="2.整个类做友元类"></a>2.整个类做友元类</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Good_Friend</span>;</span></span><br><span class="line">Home()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;bedroom = <span class="string">"卧室"</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;sittingroom = <span class="string">"客厅"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> sittingroom;<span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> bedroom;<span class="comment">//卧室</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Good_Friend</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Good_Friend(<span class="built_in">string</span> name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"好友"</span>&lt;&lt;<span class="keyword">this</span>-&gt;name&lt;&lt;<span class="string">"正在拜访"</span> &lt;&lt; <span class="keyword">this</span>-&gt;home.sittingroom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"好友"</span>&lt;&lt;<span class="keyword">this</span>-&gt;name&lt;&lt;<span class="string">"正在拜访"</span> &lt;&lt; <span class="keyword">this</span>-&gt;home.bedroom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Home home;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Good_Friend <span class="title">frend</span><span class="params">(<span class="string">"Aoki"</span>)</span></span>;</span><br><span class="line">frend.visit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;输出结果如下：<br><img src="https://i.imgur.com/qst1rZx.png" alt><br>&emsp;&emsp;将好友类声明为友元类之后，好友类的对象可以访问Home类的私有成员。<br>&emsp;&emsp;在友元类中我们应当注意：  </p><ol><li>友元关系不能被继承</li><li>友元关系是单向的</li><li>友元关系不具有传递性</li></ol><blockquote><p><strong>C++是纯面向对象的吗？</strong><br>&emsp;&emsp;如果一个类被声明为friend<br>，意味着它不是这个类的成员函数，却可以是修改这个类的私有成员，而且必须列在类的定义中，因此它是一个特权函数。C++不是完全的面向对象语言，而是一个混合产品。增加friend关键字只是用来解决一些实际问题，这也说明这种语言是不纯的。毕竟C++设计的目的是为了实用性，而不是追求理想的抽象。<br>                          -———《Think in C++》  </p></blockquote><br><blockquote><h1 id="3-成员函数做友元函数"><a href="#3-成员函数做友元函数" class="headerlink" title="3.成员函数做友元函数"></a>3.成员函数做友元函数</h1></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Good_Friend</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Good_Friend(<span class="built_in">string</span> name);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Home *home;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span>  Good_Friend::visit();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Home();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> sittingroom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> bedroom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Good_Friend::Good_Friend(<span class="built_in">string</span> name)</span><br><span class="line">&#123;</span><br><span class="line">home = <span class="keyword">new</span> Home;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Good_Friend::visit()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"你的好友"</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">"正在访问"</span> &lt;&lt; <span class="keyword">this</span>-&gt;home-&gt;sittingroom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"你的好友"</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">"正在访问"</span> &lt;&lt; <span class="keyword">this</span>-&gt;home-&gt;bedroom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Good_Friend::visit2()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"你的好友"</span>&lt;&lt;<span class="keyword">this</span>-&gt;name&lt;&lt;<span class="string">"正在访问"</span> &lt;&lt; <span class="keyword">this</span>-&gt;home-&gt;sittingroom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "你的好友" &lt;&lt; this-&gt;name &lt;&lt; "正在访问" &lt;&lt; this-&gt;home-&gt;bedroom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Home::Home()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;sittingroom = <span class="string">"客厅"</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;bedroom = <span class="string">"卧室"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Good_Friend <span class="title">frien</span><span class="params">(<span class="string">"Aoki"</span>)</span></span>;</span><br><span class="line">frien.visit();</span><br><span class="line">frien.visit2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;当我们试图使用一个没有声明为Home类友元的成员函数去访问Home的私有成员时，编译器报错如下：<br><img src="https://i.imgur.com/MzXVr8v.png" alt><br>正确是输出结果如下：<br><img src="https://i.imgur.com/6PyL0Yq.png" alt><br>&emsp;&emsp;虽然我现在将<code>visit()</code>函数定义为Home类的友元，但是事情并没有这么简单地结束，因为当我第一次定义友元函数时，编译器莫名其妙地报错。那么，编译器报错的原因是什么呢？<br>&emsp;&emsp;当我尝试着把成员函数的声明与定义分开的时候，编译器显示没有错误。这也就告诉我们，在声明成员函数的时候，将声明与定义分开放，编译器会更好地处理。   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;类的主要特点之一就是数据隐藏，即类的私有成员无
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="友元函数" scheme="http://wanqbin.xyz/tags/%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0/"/>
    
      <category term="友元类" scheme="http://wanqbin.xyz/tags/%E5%8F%8B%E5%85%83%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++对象模型初探</title>
    <link href="http://wanqbin.xyz/2019/03/23/C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%88%9D%E6%8E%A2/"/>
    <id>http://wanqbin.xyz/2019/03/23/C-对象模型初探/</id>
    <published>2019-03-23T12:28:00.000Z</published>
    <updated>2019-06-15T12:29:29.982Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="1-成员变量和函数的存储"><a href="#1-成员变量和函数的存储" class="headerlink" title="1.成员变量和函数的存储"></a>1.成员变量和函数的存储</h1></blockquote><p>在C语言中，分开来声明，也就说，语言本身并没有支持“数据”和“函数”之间的关联性，我们把这种程序方法称为“程序性的”，由一组“分布在各个以功能为导向的函数中的算法驱动，它们处理的是共同的外部数据。<br>C++实现了“封装”，那么数据（成员属性）和操作（成员函数）是什么样的呢？<br>“数据”和“处理数据的操作（函数）”是分开存储的。  </p><ul><li>C++中的非静态数据成员直接内含在类对象中，就像C struct一样</li><li>成员函数（member function）虽然内含正在class声明之内，却不出现在对象中  </li><li>每一个非内联成员函数只会的诞生一份函数实例  </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"001"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"002"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass4</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"003"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"004"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Myclass myclass;</span><br><span class="line">Myclass1 myclass1;</span><br><span class="line">Myclass2 myclass2;</span><br><span class="line">Myclass3 myclass3;</span><br><span class="line">Myclass4 myclass4;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myclass:"</span> &lt;&lt; <span class="keyword">sizeof</span>(myclass) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myclass1:"</span> &lt;&lt; <span class="keyword">sizeof</span>(myclass1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myclass2:"</span> &lt;&lt; <span class="keyword">sizeof</span>(myclass2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myclass3:"</span> &lt;&lt; <span class="keyword">sizeof</span>(myclass3) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size of myclass4:"</span> &lt;&lt; <span class="keyword">sizeof</span>(myclass4) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/dESLtUw.png" alt><br>从输出结果我们可以看出，C++中成员变量和成员属性是分开存储的。 而且，只有非静态成员才属于对象身上。   </p><blockquote><h1 id="2-this指针"><a href="#2-this指针" class="headerlink" title="2.this指针"></a>2.this指针</h1></blockquote><p>通过上面的例子我们知道，C++的数据和操作时分开存储的，并且每个非内联成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码。<br>那么问题是，这块代码是如何区分是哪个对象调用自己的呢？<br>C++通过提供特殊的对象指针，this指针，来解决上述问题。this指针指向被调用的成员函数所属的对象。<br>C++规定，this指针是隐含在对象成员函数内的一种指针。当一个对象被创建后，它的每一个成员函数都含有一个系统自动生成的隐含指针this，用以保存这个对象的地址。也就是说，虽然我们没有写上this指针，编译器在编译的时候也会加上的。因此，this指针也被称为“指向本对象的指针”，this指针不并不是对象的一部分，并不会影响sizeof（对象）对的结果。<br>this指针是C++实现封装的一种机制，它将对象和该对象调用的非成员函数连接在一起，在外部看来，每个对象都拥有自己的成员函数。一般情况下，并不写this，而是让系统进行默认设置。<br>this指针永远指向当前对象。 成员函数通过this指针即可知道操作的是哪个对象的数据。this指针是一种隐含指针，它隐含于每个类的非静态成员函数中，this指针无须定义，直接使用即可。<br>静态成员函数内部没有this指针，静态成员函数不能操作非静态成员变量。  </p><blockquote><h1 id="3-this指针的使用"><a href="#3-this指针的使用" class="headerlink" title="3.this指针的使用"></a>3.this指针的使用</h1></blockquote><ul><li>当形参和成员变量同名时，可用this指针区分 </li><li>在类的非静态成员函数中返回对象本身，可用return *this  </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;<span class="comment">//当形参与成员变量名相同时，可以使用this指针来区分</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">Person_Plus</span><span class="params">(Person &amp;person)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> newname = <span class="keyword">this</span>-&gt;name + person.name;</span><br><span class="line"><span class="keyword">int</span> newage = <span class="keyword">this</span>-&gt;age + person.age;</span><br><span class="line"><span class="function">Person <span class="title">newperson</span><span class="params">(newname, newage)</span></span>;</span><br><span class="line"><span class="keyword">return</span> newperson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Name:"</span> &lt;&lt; name &lt;&lt; <span class="string">",Age:"</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">person</span><span class="params">(<span class="string">"Aoki"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">person.show();</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"Aoki"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"青木"</span>, <span class="number">15</span>)</span></span>;</span><br><span class="line">Person p3 = p1.Person_Plus(p2);</span><br><span class="line">p3.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/SvzytWe.png" alt>  </p><blockquote><h1 id="4-const修饰成员函数（常函数）"><a href="#4-const修饰成员函数（常函数）" class="headerlink" title="4.const修饰成员函数（常函数）"></a>4.const修饰成员函数（常函数）</h1></blockquote><ul><li>用const修饰成员函数时，const修饰this指针指向的内存区域，成员函数体内不可以修改本类中的任何普通变量  </li><li>当成员变量类型符前面用mutable修饰时例外  </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_A = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_B = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">showinfor</span> <span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//this-&gt;m_B = 10;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_A=<span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_A="</span> &lt;&lt;m_A&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_B="</span> &lt;&lt; m_B&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> m_A;<span class="comment">//如果需要使用常函数修改变量，加mutable关键字</span></span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.showinfor();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们试图使用常函数对成员变量进行修改时，编译器会报错。报错结果如下图：<br><img src="https://i.imgur.com/VhrnaBY.png" alt><br>由此可知，常函数不能修改this指针指向的值。<br>那么，当我们需要使用常函数对成员变量进行修改时呢？那么，我们可以在变量前面加mutable关键字。输出结果如下：<br><img src="https://i.imgur.com/ZiiG7GV.png" alt>  </p><blockquote><h1 id="5-const修饰对象（常对象）"><a href="#5-const修饰对象（常对象）" class="headerlink" title="5.const修饰对象（常对象）"></a>5.const修饰对象（常对象）</h1></blockquote><ul><li>常对象只能调用const的成员函数</li><li>常对象可访问const或非const数据成员，但是不能修改，除非成员用mutable修饰  </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_A = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_B = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">showinfor</span> <span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//this-&gt;m_B = 10;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_A = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_A="</span> &lt;&lt;m_A&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_B="</span> &lt;&lt; m_B&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_A="</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_B="</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> m_A;<span class="comment">//如果需要使用常函数修改变量，加mutable关键字</span></span><br><span class="line"><span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> Person p1;</span><br><span class="line">Person p2;</span><br><span class="line">p2.show();</span><br><span class="line">p2.showinfor();</span><br><span class="line">p1.showinfor();</span><br><span class="line"><span class="comment">//p1.m_B = 100;</span></span><br><span class="line">p1.m_A = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//p1.show();</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_A="</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"m_B="</span> &lt;&lt; p1.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我试图使用常对象来对成员变量进行修改时，编译器报错如下：<br><img src="https://i.imgur.com/MOxKaHQ.png" alt><br>常对象不能修改没有关键字mutable修饰的成员变量，也就是说，如果一个变量被关键字mutable修改时，那么常对象可以对其进行修改。<br>当我试图使用常对象来访问普通成员函数时，编译器报错如下：<br><img src="https://i.imgur.com/JWTSZCv.png" alt><br>也就说，常对象不能调用普通成员函数，它只能调用常函数。<br>最终输出结果如下所示：<br><img src="https://i.imgur.com/8vSrvny.png" alt>  </p><blockquote><h1 id="5-常函数与常对象的总结"><a href="#5-常函数与常对象的总结" class="headerlink" title="5.常函数与常对象的总结"></a>5.常函数与常对象的总结</h1></blockquote><ol><li>常函数<ul><li>常函数格式：返回类型 函数名（）const{}</li><li>常函数不能修改this指针指向的值</li><li>如果需要修改，就必须用关键字mutable来修饰成员变量</li></ul></li><li>常对象 <ul><li>常对象就是在对象前加上const修饰符，如 const Person p1</li><li>常对象不可以调用普通成员函数</li><li>常对象可以调用常函数</li><li>常对象可以修改用mutable关键字修饰的成员变量  </li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;1-成员变量和函数的存储&quot;&gt;&lt;a href=&quot;#1-成员变量和函数的存储&quot; class=&quot;headerlink&quot; title=&quot;1.成员变量和函数的存储&quot;&gt;&lt;/a&gt;1.成员变量和函数的存储&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;在C语
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="this指针" scheme="http://wanqbin.xyz/tags/this%E6%8C%87%E9%92%88/"/>
    
      <category term="常函数" scheme="http://wanqbin.xyz/tags/%E5%B8%B8%E5%87%BD%E6%95%B0/"/>
    
      <category term="常对象" scheme="http://wanqbin.xyz/tags/%E5%B8%B8%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>静态成员</title>
    <link href="http://wanqbin.xyz/2019/03/21/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/"/>
    <id>http://wanqbin.xyz/2019/03/21/静态成员/</id>
    <published>2019-03-21T12:27:00.000Z</published>
    <updated>2019-06-15T12:28:04.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1></blockquote><p>在类定义中，它的成员（包括成员变量和成员函数），这些成员可以用关键字<code>static</code>声明为静态的，称为静态成员。<br>不管这个类创建了多少个对象，静态成员只有一个拷贝，这个拷贝被所有属于这个类的对象共享。  </p><blockquote><h1 id="1-静态成员变量"><a href="#1-静态成员变量" class="headerlink" title="1.静态成员变量"></a>1.静态成员变量</h1></blockquote><p>在一个类中，若将一个成员变量声明为<code>static</code>，这种成员变量称为静态成员变量。与一般的数据成员不同，无论建立多少个对象，都只有一个静态数据的拷贝。静态成员变量，属于某个类，所有对象共享。<br>静态变量，是在编译阶段就分配空间，对象还没创建，就已经分配空间。  </p><ul><li>静态成员变量必须在类中声明，在类外定义</li><li>静态数据成员不属于某个对象，在为对象分配空间中不包括静态成员所占的空间  </li><li>静态数据成员可以通过类名或者对象名来引用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_Age;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_other;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::m_Age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> Person::m_other = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">p1.m_Age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"p1="</span> &lt;&lt; p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"p1的地址为："</span> &lt;&lt; &amp;p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Person p2;</span><br><span class="line">p2.m_Age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"p1="</span> &lt;&lt; p1.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"p2="</span> &lt;&lt; p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"p2的地址为："</span> &lt;&lt; &amp;p2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图：<br><img src="https://i.imgur.com/0bA1W2G.png" alt><br>通过输出结果我们可以很清除地看到，静态成员变量是所有对象共享的。任何一个对象都可以改变静态变量的值，但是静态变量不属于任何一个对象。<br>下面我们看一下对象的大小，以此来说明静态数据成员不属于某个对象，在为对象分配的空间中不包括静态成员所占的空间。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_Age;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_other;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::m_Age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> Person::m_other = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p.m_Age) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图：<br><img src="https://i.imgur.com/3AEOJuk.png" alt><br>我们可以看出，对象的大小为1，而静态成员佰利联的大小为4。<br>当我们尝试去访问m_other时，编译器会报错，因为它是一个私有数据成员，这也说明了静态成员变量是有权限控制机制的。  </p><blockquote><h1 id="2-静态成员变量"><a href="#2-静态成员变量" class="headerlink" title="2.静态成员变量"></a>2.静态成员变量</h1></blockquote><p>在类定义中，前面有<code>static</code>说明的成员函数称为静态成员函数。静态成员函数使用方式和静态变量一样，同样在对象没有创建前创建，即可他通过类名调用。静态成员函数主要为了访问静态变量，但是不能访问普通成员变量。<br>静态成员函数的意义，不在于信息共享，数据沟通，而在于管理静态数据成员，完成对静态数据成员的封装。  </p><ul><li>静态成员函数只能访问静态变量，不能访问普通成员变量</li><li>静态成员函数的使用和静态成员变量一样</li><li>静态成员函数也有访问权限</li><li>普通成员函数可以访问静态成员变量，也可以访问非静态变量</li></ul><p><img src="https://i.imgur.com/a7XcCCs.png" alt><br>如上图所示，当我们使用静态成员函数试图访问非静态成员变量时，编译器会报错，提示信息如上图所示。<br><img src="https://i.imgur.com/jdx1QUC.png" alt><br>在上图中，我试图使用类名来访问私有的静态成员函数，编译器报错，因为静态成员函数也有自己的权限。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span><span class="comment">//静态成员函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_Age = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//m_A = 20;//作用域</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"静态成员函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_Age;</span><br><span class="line"><span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m_other;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"静态成员函数func2调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::m_Age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> Person::m_other = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">Person p2;</span><br><span class="line">p1.func();</span><br><span class="line">p2.func();</span><br><span class="line">Person::func();</span><br><span class="line"><span class="comment">//Person::func01();//作用域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图：<br><img src="https://i.imgur.com/KrYrT4D.png" alt>  </p><blockquote><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1></blockquote><ol><li>静态成员变量  <ul><li>编译阶段分配内存</li><li>所有对象共享数据</li><li>通过对象访问，通过类名访问</li><li>有权限控制</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>可以访问静态成员变量，不可以访问普通成员变量</li><li>普通成员函数都可以访问</li><li>静态成员函数也有权限</li><li>可以通过对象访问，也可以通过类名访问  </li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;在类定义中，它的成员（包括成员变量和成员函数），这些成员可以用关键字&lt;
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="静态成员变量" scheme="http://wanqbin.xyz/tags/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/"/>
    
      <category term="静态成员函数" scheme="http://wanqbin.xyz/tags/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>拷贝构造函数</title>
    <link href="http://wanqbin.xyz/2019/03/21/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://wanqbin.xyz/2019/03/21/拷贝构造函数/</id>
    <published>2019-03-21T12:26:00.000Z</published>
    <updated>2019-06-15T12:26:50.336Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1></blockquote><hr><ul><li>默认情况下，C++编译器至少会为我们写的类增加三个函数  <ul><li>默认构造函数（无参，函数体为空）  </li><li>默认析构函数（无参，函数体为空）  </li><li>默认拷贝构造函数，对类中非静态成员属性进行简单的值拷贝  </li></ul></li><li>如果用户定义了拷贝构造函数，C++不会再提供任何默认的构造函数</li><li>如果用户定义了普通构造函数（非拷贝），C++不再提提供默认无参构造，但是会提供默认拷贝构造。  </li></ul><p>在之前的博文中，我介绍了构造函数和析构函数，这一篇里面，我会对拷贝构造函数单独进行介绍，并介绍深拷贝、浅拷贝等。</p><blockquote><h1 id="1-拷贝构造函数的调用时机"><a href="#1-拷贝构造函数的调用时机" class="headerlink" title="1.拷贝构造函数的调用时机"></a>1.拷贝构造函数的调用时机</h1></blockquote><hr><p>拷贝构造函数的调用时机如下：  </p><ul><li>用一个对象初始化另一个对象  </li><li>对象以值传递的方式给函数参数</li><li>函数局部对象以值传递的方式从函数返回</li></ul><p>下面，我举例说明：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyClass()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"默认构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"有参构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">MyClass(<span class="keyword">const</span> MyClass &amp;m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~MyClass()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ak;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass m1;</span><br><span class="line">m1.ak = <span class="number">10</span>;</span><br><span class="line"><span class="function">MyClass <span class="title">m2</span><span class="params">(m1)</span></span>;<span class="comment">//用已经创建好的对象来初始化新的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图:<br><img src="https://i.imgur.com/5ZDHQlX.png" alt><br>在上面的例子中，我使用了一个已经创建好的对象来初始化一个新的对象。 这也就是拷贝构造函数对的第一个调用时机。<br>下面是第二个调用时机，即对象以值传递的方式给函数参数。   </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyClass()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"默认构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"有参构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">MyClass(<span class="keyword">const</span> MyClass &amp;m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~MyClass()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ak;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dowork</span><span class="params">(MyClass m)</span><span class="comment">//以值传递方式给函数传参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass m1;</span><br><span class="line">m1.ak = <span class="number">10</span>;</span><br><span class="line">dowork(m1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图:<br><img src="https://i.imgur.com/Xmjr9iY.png" alt>  </p><p>最后，是函数局部对象以值传递的方式从函数返回。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyClass()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"默认构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"有参构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">MyClass(<span class="keyword">const</span> MyClass &amp;m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~MyClass()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ak;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">MyClass <span class="title">dowork</span><span class="params">()</span><span class="comment">//函数局部对象以值传递的方式从函数返回</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass m1;</span><br><span class="line"><span class="keyword">return</span>  m1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass m = dowork();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/Hrn2aVo.png" alt>  </p><blockquote><h1 id="2-浅拷贝和深拷贝"><a href="#2-浅拷贝和深拷贝" class="headerlink" title="2.浅拷贝和深拷贝"></a>2.浅拷贝和深拷贝</h1></blockquote><hr><p><strong>浅拷贝</strong><br>同一个类型的对象之间可以赋值，使得两个对象的成员变量的值相同，两个对象仍然是独立的两个对象，这种情况被称为浅拷贝。<br>一般情况下，浅拷贝没有任何副作用，但是当类中有指针，并且指针指向动态内存分配的内存空间，析构函数做了动态内存释放的处理，会导致内存问题。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">Name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(name) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span> (Name, name);</span><br><span class="line">Age = age;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (Name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(Name);</span><br><span class="line">Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//系统提供默认拷贝构造函数</span></span><br><span class="line"><span class="keyword">char</span> *Name;</span><br><span class="line"><span class="keyword">int</span> Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"Aoki"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/tG0IHEL.png" alt><br>我们可以看到，错误提示信息中提到了heap.cpp。此外，输出结果中出现了两次析构函数的调用。下面，我尝试尽可能地解释清楚原因。<br>我们创建了一个对象p1，它有两个属性，一个存放在堆区，一个在栈区，当编译器进行简单的值拷贝时，只是将堆区内容的地址给了新对象p2，接着调用析构函数，释放p1的空间，而存放在堆区的数据也就消失了，紧接着，对象p2也调用析构函数来进行释放。那么，堆区的同一个地址就被释放了两次，引发了异常。图示如下：<br><img src="https://i.imgur.com/Crz339Q.png" alt><br>这时候，我们就要用到深拷贝了。<br><strong>深拷贝</strong><br>当类中有指针，并且此指针有动态分配空间，析构函数做了释放处理，往往需要自定义拷贝构造函数，自行给指针动态分配空间，深拷贝。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">Name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(name) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span> (Name, name);</span><br><span class="line">Age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">const</span> Person &amp;p)<span class="comment">//深拷贝</span></span><br><span class="line">&#123;</span><br><span class="line">Age = p.Age;</span><br><span class="line">Name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(p.Name) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(Name, p.Name);</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (Name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(Name);</span><br><span class="line">Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *Name;</span><br><span class="line"><span class="keyword">int</span> Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"Aoki"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/edu2Qqc.png" alt>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，C++编译器至少会为我们写的类增加三
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="拷贝构造函数" scheme="http://wanqbin.xyz/tags/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="深拷贝" scheme="http://wanqbin.xyz/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="浅拷贝" scheme="http://wanqbin.xyz/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>函数重载</title>
    <link href="http://wanqbin.xyz/2019/03/21/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    <id>http://wanqbin.xyz/2019/03/21/函数重载/</id>
    <published>2019-03-21T12:24:00.000Z</published>
    <updated>2019-06-15T12:25:30.803Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2></blockquote><p>如果同一个作用域内的几个函数名字相同，但是形参列表不同，我们称之为重载函数。<br>实现函数重载的条件：  </p><ul><li>同一个作用域</li><li>参数个数不同</li><li>参数类型不同</li><li>参数顺序不同</li></ul><p>函数的名字仅仅是让编译器知道它调用的是哪个函数，而函数重载在一定程度上可以减轻程序员起名字、记名字的负担。   </p><blockquote><h2 id="1-定义重载函数"><a href="#1-定义重载函数" class="headerlink" title="1.定义重载函数"></a>1.定义重载函数</h2></blockquote><p>下面是一个函数重载的例子。函数重载使得我们可以定义一组函数，名字都为func。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"没有参数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="string">"  b="</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">string</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="string">"  b="</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A::func();</span><br><span class="line">A::func(<span class="number">15</span>);</span><br><span class="line">A::func(<span class="string">"Aoki"</span>);</span><br><span class="line">A::func(<span class="number">12</span>, <span class="number">3.12</span>);</span><br><span class="line">A::func(<span class="string">"Aoki"</span>, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/3VcHYjM.png" alt><br>虽然我们定义的是五个函数各不相同，但是它们都有同一个名字。编译器根据实参的类型来决定应该调用哪一个函数。<br>对于重载的函数来说，它们应该在形参数量或形参类型上有所不同。<br>对于函数的重载，我们不能以函数的返回值作为重载的条件，这是为什么呢？<br>当编译器能从上下文中确定唯一的函数时，如int ret=func(),这样就不会有问题。但是我们在编写程序的过程中还可以忽略它的返回值，那么这个时候，一个函数为 void fun(int x),另一个为 int func(int x),当我们直接调用func(10)，这时候编译器就不确定该调用哪个函数。所以，在C++中禁止使用返回值作为重载的条件。  </p><p>对于函数重载，我们还应当注意避免二义性。举例如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">string</span> a, <span class="keyword">int</span> b=<span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="string">"  b="</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A::func("Aoki");//出现二义性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误提示如下：<br><img src="https://i.imgur.com/7vIm1G8.png" alt><br>在使用函数重载的同时，我们应该注意避免这种情况出现。  </p><blockquote><h2 id="2-调用重载的函数"><a href="#2-调用重载的函数" class="headerlink" title="2.调用重载的函数"></a>2.调用重载的函数</h2></blockquote><p>定义了一组重载函数之后，我们需要以合理的实参来调用它们。<strong>函数匹配</strong>是指一个过程，在这个过程中我们把函数调用与一组重载函数中的某一个关联起来，函数匹配也叫<strong>重载确定</strong>。编译器首先将调用的实参与重载集合中对的每一个函数的形参进行比较，然后根据比较的结果决定到底调用哪个函数。<br>在很多情况下，我们很容易判断某次调用是不是合法对的，以及当调用合法时该调用哪个函数。通常，重载集中的函数区别明显，它们要不然是参数的数量不同，要不然就是参数类型毫无关系。此时，确定调用哪个函数比较容易。但是在另外一些情况下要想选择函数就比较困难了。比如当两个重载函数参数数量相同，且参数类型可以相互转换。<br>当调用重载函数时有三种可能的结果：  </p><ul><li>编译器找到一个与实参最佳匹配的函数，并生成了调用该函数的代码。  </li><li>找不到任何一个函数与调用的实参匹配，此时编译器发出无匹配的错误信息。</li><li>有多于一个函数可以匹配，但是每一个都不是明显的最佳选择。此时也发生错误，称为二义性调用。  </li></ul><blockquote><h2 id="3-函数重载实现原理"><a href="#3-函数重载实现原理" class="headerlink" title="3.函数重载实现原理"></a>3.函数重载实现原理</h2></blockquote><p>编译器为了实现函数重载，为我们做了一些幕后的工作，编译器用不同的参数类型来修饰不同的函数名，比如 <code>void func()</code>;编译器可能会将函数名修饰成<code>—func</code>，当编译器碰到<code>void func(int x)</code>，编译器可能会将函数名修饰为<code>_func_int</code>,当编译器碰到<code>void func(int x,char c)</code>，编译器可能会将函数名修饰为<code>_func_int_char</code>，这里使用可能，是因为编译器如何修饰重载的函数名称并没有一个统一的标准，所以不同的编译器可能会产生不同的内部名。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;如果同一个作用域内的几个函数名字相同，但是形参列表不同，我们称之为重载
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="函数重载" scheme="http://wanqbin.xyz/tags/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>构造函数和析构函数</title>
    <link href="http://wanqbin.xyz/2019/03/20/%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>http://wanqbin.xyz/2019/03/20/函数和析构函数/</id>
    <published>2019-03-20T12:23:00.000Z</published>
    <updated>2019-06-15T12:26:12.947Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><h1 id="1-初始化和清理"><a href="#1-初始化和清理" class="headerlink" title="1.初始化和清理"></a>1.初始化和清理</h1></blockquote><hr><p>C++中OO思想也是来源于现实，是对现实事物的抽象模拟，具体来说，当我们常见对象的时候，这个对象应该有一个初始状态，当对象销毁之前应该销毁自己创建的一些数据。<br>对象的初始化和清理也是两个非常重要的安全问题，一个对象或者变量没有初始化时，对其使用后果是未知的，同样的使用完一个变量，，没有及时清理，也会造成一定的安全问题。C++为了给我们提供这种问题的解决方案，构造函数和析构函数。这两个函数将会被编译器自动调用，完成对象初始化和对象清理工作。<br>无论我们是否喜欢这种方式，对象的初始化和清理工作是编译器强制我们必须要做的事情，即使我们不提供初始化操作和清理操作，编译器也会给我们增加默认对的操作，只是这个默认初始化操作不会做任何事，所以编写类就应该顺便提供初始化函数。<br>为什么初始化操作时自动调用而不是手动调用？既然是必然操作，那么自动调用会更好，如果靠我们自觉，那么就会存在遗漏初始化的情况出现。  </p><blockquote><h1 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h1></blockquote><hr><p>构造函数主要作用在于创建时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。<br><strong>构造函数语法：</strong>  </p><ul><li>构造函数函数名和类名相同，没有返回值，不能有void，但可以有参数。  </li><li><code>ClassName(){}</code></li></ul><blockquote><h1 id="3-析构函数"><a href="#3-析构函数" class="headerlink" title="3.析构函数"></a>3.析构函数</h1></blockquote><hr><p>析构函数主要用于对象销毁前系统自动调用，执行一些清理工作。<br><strong>析构函数语法：</strong>  </p><ul><li>析构函数函数名是类名前面加”~”组成，没有返回值，不能有void，不能有参数，不能重载。  </li><li>~ClassName（）{}  </li></ul><p>下面我举例说明构造函数与析构函数。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/scjw1sV.png" alt><br>从输出结果我们可以看出，在创建对象时，构造函数调用。当对象销毁之前，又调用了析构函数。</p><blockquote><h1 id="4-构造函数的分类及调用"><a href="#4-构造函数的分类及调用" class="headerlink" title="4.构造函数的分类及调用"></a>4.构造函数的分类及调用</h1></blockquote><hr><ul><li>按参数类型：分为无参构造函数和有参构造函数  </li><li>按类型分类：分为普通构造函数和拷贝构造函数（复制构造函数）  </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()<span class="comment">//默认，无参构造函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"默认构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person(<span class="keyword">int</span> a)<span class="comment">//有参构造函数调用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"有参构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">Person(<span class="keyword">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">m_age = p.m_age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"析构函数调用"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">long</span>  m_age;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">int</span> n_age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n_age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//有参拷贝构造函数调用</span></span><br><span class="line">p1.m_age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"p1的年龄为："</span> &lt;&lt; p1.m_age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;<span class="comment">//拷贝构造函数调用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"p2的年龄为："</span> &lt;&lt; p2.m_age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Person(<span class="number">100</span>);<span class="comment">//匿名对象，当本行代码执行完毕就释放对象</span></span><br><span class="line">Person p3 = <span class="number">100</span>;<span class="comment">//隐式类型转换，相当于调用了Person p7=Person(100)</span></span><br><span class="line">Person p4 = p3;<span class="comment">//拷贝构造函数调用，相当于Person p4=Person(p3)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/p5CGt8x.png" alt><br>这里，我们需要注意的是，析构函数和构造函数必须写在public下才可以调用。<br>同时，对于无参构造函数（默认构造）、有参构造函数在创建对象时的调用应当注意。当我们我们没有定义构造函数时，系统会给我们提供一个空的默认构造函数，但是当我们定义了无参构造函数时，系统使用我们的构造函数。除此之外，当我们定义了一个有参构造函数，但是并没有提供无参构造函数时，在创建对象的时候必须使用有参构造。原因是，当我们声明一个有参构造函数之后，系统不再提供默认构造函数。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;1-初始化和清理&quot;&gt;&lt;a href=&quot;#1-初始化和清理&quot; class=&quot;headerlink&quot; title=&quot;1.初始化和清理&quot;&gt;&lt;/a&gt;1.初始化和清理&lt;/h1&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;C++中OO思想也
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="析构函数" scheme="http://wanqbin.xyz/tags/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    
      <category term="构造函数" scheme="http://wanqbin.xyz/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于C语言下的封装和C++语言封装的区别</title>
    <link href="http://wanqbin.xyz/2019/03/19/C%E8%AF%AD%E8%A8%80%E4%B8%8B%E7%9A%84%E5%B0%81%E8%A3%85%E5%92%8CC-%E8%AF%AD%E8%A8%80%E5%B0%81%E8%A3%85%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://wanqbin.xyz/2019/03/19/C语言下的封装和C-语言封装的区别/</id>
    <published>2019-03-19T12:19:00.000Z</published>
    <updated>2019-06-15T12:23:56.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h1></blockquote><hr><p>我们编写程序来解决现实中的问题，而这些问题的是由各种事物组成的。我们解决这个问题的前提就是将事和物抽象得到计算机程序中，也就是用程序语言表示现实的事物。<br>现实世界的事物所具有的共性就是每个事物都具有自身的属性和行为，所以如果我们能把这些事物的属性和行为表示出来，那么就可以抽象出这个事物。<br>属性和行为应该放在一起，一起来表示一个具有属性和行为的对象。为什么需要这样做呢？我稍后解释。<br>假如某对象的某项属性不想被外界获知，比如女孩子的体重，那么对于体重这个属性，就应该是只有女孩自己知道的属性，或者女孩的某些行为，比如暗恋某个男生，不想让外界知道，只能让自己知道，那么在这种情况下，封装应该提供一种机制，能够给属性和行为的访问权限控制住。<br>所以说封装特性包含两方面，一个是属性和变量合成一个整体，一个是给属性和函数增加访问权限。  </p><p><strong>封装</strong>  </p><ul><li>把变量（属性）和函数（操作）合成一个整体，封装在一个类中。  </li><li>对变量和函数进行访问控制。  </li></ul><p><strong>访问权限</strong>  </p><ul><li>在类的内部（作用域范围之内），没有访问权限之分，所有成员可以相互访问。  </li><li>在类的外部（作用域范围外），访问权限才有意义：public,private,protected</li><li>在类的外部，只有public修饰的成员才能被访问，在没有涉及继承和派生时，private和protected是同等级的，外界不可以访问。   </li></ul><table><thead><tr><th>访问属性</th><th>属性</th><th>对象内部</th><th>对象外部</th></tr></thead><tbody><tr><td>public</td><td>公有</td><td>可访问</td><td>可访问</td></tr><tr><td>protected</td><td>保护</td><td>可访问</td><td>不可访问</td></tr><tr><td>private</td><td>私有</td><td>可访问</td><td>不可访问</td></tr></tbody></table><p>其中，potected为保护权限，类内部可以访问，当前类的子类可以访问，类外部不可以。而private是对象的私有数据，子类和类外部都不可以访问。  </p><p>下面，我们对比以下C语言下的封装和C++语言下封装的区别。  </p><blockquote><h1 id="2-C语言下的封装"><a href="#2-C语言下的封装" class="headerlink" title="2.C语言下的封装"></a>2.C语言下的封装</h1></blockquote><hr><p>在C语言中我们可以定义一个结构体来表示一个对象所包含的属性，函数用来表示出来一个事物，在C语言中，结构体中不能定义函数，所以行为和定义方式分开的，也就是说吃饭这个属性不属于某个对象，而属于所有的共同数据。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PersonEat</span><span class="params">(struct person *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s在吃饭\n"</span>, p-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DogEat</span><span class="params">(struct Dog *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s在狗粮\n"</span>, d-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span><span class="title">Dog</span> <span class="title">one</span>;</span></span><br><span class="line"><span class="built_in">strcpy</span>(one.name, <span class="string">"旺财"</span>);</span><br><span class="line">DogEat(&amp;one);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">two</span>;</span></span><br><span class="line"><span class="built_in">strcpy</span>(two.name, <span class="string">"Aoki"</span>);</span><br><span class="line">DogEat(&amp;two);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/LqNK5AT.png" alt><br>从输出结果我们可以看出，小狗旺财和Aoki这个人正在一块吃狗粮，但是正常情况下，Aoki怎么可能吃狗粮呢？<br>从这里，我们可以看出在C中封装一个对象造成了什么样的后果。那么，在C++中的封装呢？  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PersonEat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"在吃饭"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DogEat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"在吃狗粮"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person one;</span><br><span class="line"><span class="built_in">strcpy</span>(one.name, <span class="string">"Aoki"</span>);</span><br><span class="line">one.PersonEat();</span><br><span class="line"><span class="comment">//one.DogEat();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚开始，我尝试了使用one这个对象来调用DogEat这个函数，编译器报错，不允许我们使用它，因为DogEat并不是Person的成员函数。编译器报错如下：<br><img src="https://i.imgur.com/lbG3AkV.png" alt><br>在注释掉报错语句之后，正确输出结果如下：<br><img src="https://i.imgur.com/qpibb78.png" alt><br>从上面的例子中，我们可以看到，C++中的封装，有着严格的类型转换检测，C++让属性和行为绑定在一起。属性和行为作为一个整体来表示生活中的事物。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;1-封装&quot;&gt;&lt;a href=&quot;#1-封装&quot; class=&quot;headerlink&quot; title=&quot;1.封装&quot;&gt;&lt;/a&gt;1.封装&lt;/h1&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;我们编写程序来解决现实中的问题，而这些问题的是由各种事物组成
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="封装" scheme="http://wanqbin.xyz/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>宏缺陷和内联函数</title>
    <link href="http://wanqbin.xyz/2019/03/18/%E5%AE%8F%E7%BC%BA%E9%99%B7%E5%92%8C%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
    <id>http://wanqbin.xyz/2019/03/18/宏缺陷和内联函数/</id>
    <published>2019-03-18T15:17:00.000Z</published>
    <updated>2019-06-13T16:20:08.373Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2></blockquote><p>C++从C中继承的一个重要特征就是效率。  </p><p>在C中我们经常把一些短并且执行频繁的计算写成宏，而不是函数，这样做的理由方式为了执行效率，宏可以避免函数调用的开销，这些都由预处理来完成。  </p><p>但是在C++出现以后，使用宏处理会出现两个问题：  </p><ul><li>第一个在C中也会出现，宏看起来像是一个函数调用，但是会隐藏一些难以发现的错误。  </li><li>第二个问题是C++特有的，预处理器不允许访问类的成员，也就是说预处理器宏不能用作类的成员的函数。  </li></ul><p>为了保持预处理宏的效率又增加安全性，而且能像一般成员函数那样在类里访问自如，C++引入了内联函数。  </p><p>内联函数为了继承宏函数的效率，没有函数调用的开销，然后又可以像普通函数那样，可以进行参数、返回值类型的安全检查，又可以作为成员函数。  </p><hr><blockquote><h1 id="1-预处理宏的缺陷"><a href="#1-预处理宏的缺陷" class="headerlink" title="1.预处理宏的缺陷"></a>1.预处理宏的缺陷</h1></blockquote><hr><p>预处理器宏存在问题的关键是我们可能认为预处理器的行为和编译器时一样的。当然也是由于宏函数调用和函数调用在外表看起来是一样的，因此也容易混淆。但是其中会有一些微妙的问题出现。  </p><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD(x,y) x+y</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = ADD(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret0 = ADD(<span class="number">10</span>, <span class="number">10</span>) * <span class="number">10</span>;<span class="comment">//预期结果为200</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ret="</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ret0="</span> &lt;&lt; ret0 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><p><img src="https://i.imgur.com/4R0ff3I.png" alt>  </p><p>在输出结果里，我们可以看到，实际输出结果为110，并不是我们想要的结果。它实际进行运算时，运算式应该是：10+10*10。  </p><p>对于这个微小的问题，我们可以通过加括号的方式来解决它。源代码和输出结果如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD(x,y) ((x)+(y))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = ADD(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret0 = ADD(<span class="number">10</span>, <span class="number">10</span>) * <span class="number">10</span>;<span class="comment">//预期结果为200</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ret="</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ret0="</span> &lt;&lt; ret0 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><p><img src="https://i.imgur.com/pk7Yv4A.png" alt>  </p><p>我们可以看到，加括号之后，输出结果和预期相同。  </p><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>为了防止出现例1中的问题，这次，我特意对三目运算符加了括号。代码如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> compare(a,b) ((a)&lt;(b))?(a):(b)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = compare(a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ret="</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret0 = compare(++a, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ret0="</span> &lt;&lt; ret0 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下:  </p><p><img src="https://i.imgur.com/sTiAySo.png" alt>  </p><p>这次出现的问题让人有点摸不到头脑，因此++运算符表示在进行运算之前加1，但是输出结果中，实际输出为12，相当于加了两次。  </p><p>除此之外，我们还应当注意的是，预定义宏函数没有作用域概念，无法作为一个类的成员函数，也就是说，预定义宏没办法表示类的范围。  </p><hr><blockquote><h1 id="2-内联函数"><a href="#2-内联函数" class="headerlink" title="2.内联函数"></a>2.内联函数</h1></blockquote><hr><p>在C++中，预定义宏额概念是用内联函数来实现的，而内联函数本身也是一个真正的函数。内联函数具有普通函数的所有行为。唯一不同之处在于内联函数会在适当得到地方像预定义宏一样展开，所以不需要函数调用的开销。因此应该不使用宏，使用内联函数。   </p><p>普通函数（非成员函数）函数前面加上inline关键字使之成为内联函数。但是必须注意函数体和声明结合在一起，否则编译器会把它当成普通函数对待。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>上面的这种写法没有任何效果，仅仅是声明函数，应该像下面这样的方式来定义。   </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：编译器将会检查函数参数列表使用是否正确，并返回值（进行必要的转换）。这些事预处理器是无法完成的。  </p><p>内联函数的确占用空间，但是内联函数相对于普通函数的优势只是省去了函数调用是否的压栈、跳转、返回的开销。我们可以理解为内联函数是以空间换时间。  </p><p>内联说明只是向编译器发出一个请求，编译器可以选择忽略这个请求。  </p><p>一般来说，内联机制用于优化规模较小、流程直接、频繁调用的函数。很多编译器都不支持内联函数递归函数，而且一个75行的函数也不太可能在调用点内联地展开。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;C++从C中继承的一个重要特征就是效率。  &lt;/p&gt;
&lt;p&gt;在C中我们
      
    
    </summary>
    
    
      <category term="宏缺陷" scheme="http://wanqbin.xyz/tags/%E5%AE%8F%E7%BC%BA%E9%99%B7/"/>
    
      <category term="内联函数" scheme="http://wanqbin.xyz/tags/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>函数默认参数及占位参数</title>
    <link href="http://wanqbin.xyz/2019/03/18/%E5%87%BD%E6%95%B0%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%8F%8A%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0/"/>
    <id>http://wanqbin.xyz/2019/03/18/函数默认参数及占位参数/</id>
    <published>2019-03-17T16:33:00.000Z</published>
    <updated>2019-06-13T16:34:31.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-函数默认参数"><a href="#1-函数默认参数" class="headerlink" title="1.函数默认参数"></a>1.函数默认参数</h1><p>C++在声明函数原型时可为一个或多个参数指定默认（缺省）的参数值，当函数调用的时候如果没有指定这个值，编译器会自动用默认值代替。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func01</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>, <span class="keyword">int</span> b = <span class="number">100</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a+b="</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func02</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">12</span>, <span class="keyword">int</span> c = <span class="number">11</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="string">",b="</span> &lt;&lt; b &lt;&lt; <span class="string">",c="</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func03</span><span class="params">(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func03</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="string">",b="</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    func01();<span class="comment">//使用默认参数</span></span><br><span class="line"></span><br><span class="line">    func01(<span class="number">100</span>, <span class="number">100</span>);<span class="comment">//使用现在传入的参数</span></span><br><span class="line"></span><br><span class="line">    func01(<span class="number">110</span>);<span class="comment">//只传入一个参数，第二个参数使用默认参数</span></span><br><span class="line"></span><br><span class="line">    func02(<span class="number">12</span>);<span class="comment">//b，c使用默认参数</span></span><br><span class="line"></span><br><span class="line">    func03();<span class="comment">//没有传参数，使用默认参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><p><img src="https://i.imgur.com/WiQCfY9.png" alt></p><p>注意点：  </p><ul><li>函数的默认常数函数从左往右，如果一个参数设置了默认参数，那么这个参数之后的参数都必须设置默认参数。  </li><li>如果函数声明和函数定义分开写，函数声明与函数定义不能同时设置默认参数。  </li></ul><blockquote><h1 id="2-函数的占位符"><a href="#2-函数的占位符" class="headerlink" title="2.函数的占位符"></a>2.函数的占位符</h1></blockquote><p>C++在声明函数时，可以使用占位参数。占位参数只有类型声明，而没有参数名声明。一般情况下，在函数体内无法使用占位参数。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func01</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span>)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数内部无法使用占位参数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func02</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无法使用占位参数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    func01(<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    func02(<span class="number">10</span>, <span class="number">25</span>);<span class="comment">//占位参数使用默认参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><p><img src="https://i.imgur.com/n9NYDzY.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-函数默认参数&quot;&gt;&lt;a href=&quot;#1-函数默认参数&quot; class=&quot;headerlink&quot; title=&quot;1.函数默认参数&quot;&gt;&lt;/a&gt;1.函数默认参数&lt;/h1&gt;&lt;p&gt;C++在声明函数原型时可为一个或多个参数指定默认（缺省）的参数值，当函数调用的时候如果没有指
      
    
    </summary>
    
    
      <category term="默认参数" scheme="http://wanqbin.xyz/tags/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0/"/>
    
      <category term="占位参数" scheme="http://wanqbin.xyz/tags/%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++命名空间及using的使用</title>
    <link href="http://wanqbin.xyz/2019/03/16/C-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E5%8F%8Ausing%E7%9A%84%E4%BD%BF%E7%94%A8-1/"/>
    <id>http://wanqbin.xyz/2019/03/16/C-命名空间及using的使用-1/</id>
    <published>2019-03-15T16:22:00.000Z</published>
    <updated>2019-06-13T16:32:28.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、C-命名空间"><a href="#一、C-命名空间" class="headerlink" title="一、C++命名空间"></a>一、C++命名空间</h2><p>&emsp;在C++中，名称（name）可以是符号常量、变量、函数、结构、枚举、类和对象。工程越大，名称相互冲突性的可能性越大。另外，在使用多个厂商的类库时，也可能导致名称冲突。为了避免冲突，在大规模的设计中，以及程序员使用1各种各样的C++库时，这些标识符的命名发生冲突，标准C++引入关键字namesapce（命名空间/名字空间/名称空间），可以更好的控制标识符得到作用域。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> study</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> learn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"命名空间study的a="</span>&lt;&lt;study::a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"命名空间learn的a="</span>&lt;&lt; learn::a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果输出：  </p><p><img src="https://i.imgur.com/O4Nndw8.png" alt></p><p>在命名空间下，可以定义函数，变量、结构体、类；除此之外，对于命名空间的定义还应当注意，它必须定义在全局作用域下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> study</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> A</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sayhi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"hi,Aoki"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> learn</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout &lt;&lt; "命名空间study的a="&lt;&lt;study::a &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout &lt;&lt;"命名空间learn的a="&lt;&lt; learn::a &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    study::A::sayhi();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"作用域A下的a="</span> &lt;&lt; study::A::a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：  </p><p><img src="https://i.imgur.com/tRE7n6i.png" alt></p><p>下面是对命名空间错误定义的举例：  </p><p><img src="https://i.imgur.com/MrAHU0c.png" alt></p><p>对于命名空间，我们还可以定义无名命名空间，意味着命名空间中的标识符只能在本文件中访问，相当于给这个标识符加上了static，使得其可以作为内部连接。  </p><p>除此之外，还有就是给命名空间起别名，我们为命名空间A起别名为b，源码如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">namespace</span> b = A;<span class="comment">//给命名空间起别名为b</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"A作用域内a="</span>&lt;&lt; b::a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="comment">//无名（匿名）命名空间</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c="</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"d="</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    A::test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图：  </p><p><img src="https://i.imgur.com/Ckyfiq4.png" alt></p><p>下面对命名空间namespace的用法总结如下：  </p><ul><li>命名空间的用途：解决名称冲突问题</li><li>命名空间下可以定义函数、变量、结构、类</li><li>命名空间必须定义在全局作用域下</li><li>命名空间可以嵌套命名空间</li><li>命名空间是开放的，可以随时给原先的命名空间添加内容</li><li>定义另个名字相同的命名空间时，两个命名空间会合并，但是不会覆盖</li><li>当我们定义了无名空间时，相当于写了<code>static intc=15，static int d=16</code>，只能在当前文件内使用</li></ul><h2 id="二、using声明"><a href="#二、using声明" class="headerlink" title="二、using声明"></a>二、using声明</h2><p>using声明可使得指定的标识符可用  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> One</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> test = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> test = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> One::test;<span class="comment">//using声明</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"test="</span> &lt;&lt; test &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处我们使用了using声明，但是编译却发生了错误。因为在test()中我们定义了一个整型数test，并赋予了初值。当我们使用using声明时，编译器有就近原则，它会选择输出test中定义的整型数，但是又发现有using声明，出现二义性问题，编译器不知道怎么处理，所有报错。报错信息如下：   </p><p><img src="https://i.imgur.com/42iUVR6.png" alt></p><p>所以，在using声明中，我们应当注意避免二义性问题。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> One</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> test = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> test = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//using One::test;//using声明</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"test="</span> &lt;&lt; test &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图：  </p><p><img src="https://i.imgur.com/A4Emcx6.png" alt></p><p>using声明的一个例子：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> One</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> test = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hi,Aoki!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello,Aoki!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"test="</span> &lt;&lt; One::a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//using声明</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> One::a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> One::func1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> One::func;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a="</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    func1();</span><br><span class="line"></span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图：  </p><p><img src="https://i.imgur.com/BS4Q4PE.png" alt></p><p>下面是using声明遇到函数重载的一个例子： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Two</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Nothing!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"x="</span> &lt;&lt; x ;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">",y="</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> Two::func;</span><br><span class="line"></span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    func(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    func(<span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test1();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图：  </p><p><img src="https://i.imgur.com/kcu5chb.png" alt></p><p>如果命名空间包含一组用相同名字重载的函数，using声明就声明了这个重载函数的所有集合。  </p><h2 id="三、using编译指令"><a href="#三、using编译指令" class="headerlink" title="三、using编译指令"></a>三、using编译指令</h2><p>using编译指令使整个命名空间标识符可用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> One</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hi,Aoki!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello,Aoki!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> One;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    func1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;<span class="comment">//没有产生二义性</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Two</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生二义性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> One;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Two;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们像上面一样使用using编译指令时，会出现二义性问题，编译器无法通过编译。错误信息如下：  </p><p><img src="https://i.imgur.com/5w2NjKa.png" alt></p><p>当我们使用using声明或using编译指令时，会增加命名冲突的可能性。也就是说，如果有命名空间，并在代码中使用作用域解析运算符，则不会出现二义性问题。  </p><p>例子如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> One</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hi,Aoki!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello,Aoki!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> One;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    func1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Two</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> One;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> Two;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">    test1();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：  </p><p><img src="https://i.imgur.com/SFV0e2y.png" alt></p><p>当我们引入一个全局的using编译指令时，就为该文件打开了命名空间，它不会影响其他的文件，所以可以再每一个实现文件中调整对命名空间的控制。比如，如果发现某一个实现文件中有太多using指令而产生命名冲突，就要对该文件做个简单的改变，通过明确限定或者using声明来消除名字冲突，这样不需要修改其他实现文件。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、C-命名空间&quot;&gt;&lt;a href=&quot;#一、C-命名空间&quot; class=&quot;headerlink&quot; title=&quot;一、C++命名空间&quot;&gt;&lt;/a&gt;一、C++命名空间&lt;/h2&gt;&lt;p&gt;&amp;emsp;在C++中，名称（name）可以是符号常量、变量、函数、结构、枚举、类和对象
      
    
    </summary>
    
    
      <category term="命名空间" scheme="http://wanqbin.xyz/tags/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
      <category term="using的使用" scheme="http://wanqbin.xyz/tags/using%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于const限定符的一些总结</title>
    <link href="http://wanqbin.xyz/2019/03/11/const%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    <id>http://wanqbin.xyz/2019/03/11/const限定符/</id>
    <published>2019-03-11T10:31:00.000Z</published>
    <updated>2019-06-11T10:36:12.688Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1></blockquote><hr><p>有时候我们希望定义这样一种变量，它的值不能被改变。例如，用一个变量表示缓冲区的大小。使用变量的好处是我们觉得缓冲区不再合适的时候，很容易对其进行调整。另一方面，也应随时警惕，防止程序一不小心修改了这个值。为了满足这一要求，可以用关键词const对变量的类型加以限定。</p><p>在C++中，一个const不必创建内存空间，而在C中，const总是需要一块内存空间。在C++中，是否为const常量分配内存空间依赖于如何使用。一般来说，如果一个const仅仅用来把一个名字用一个值来代替，那么该存储空间就不必创建。</p><p>在存储空间没有分配内存的话，在进行完数据类型检查后，为了代码更加有效，值也许会折叠到代码中。<br>不过取一个const地址，或者把它定义为extern，则会为该const创建内存空间。  </p><p>在C++中，出现在所有函数之外的const作用于整个文件（也就是说它在该文件外部不可见，默认为内部连接，C++中其他标识符一般默认为外部连接。  </p><h2 id><a href="#" class="headerlink" title></a><br></h2><blockquote><h1 id="1-初始化和const"><a href="#1-初始化和const" class="headerlink" title="1.初始化和const"></a>1.初始化和const</h1></blockquote><hr><p><br><br><br>const类型的对象能完成非const类型所能完成的大部分操作，但是对于const类型对象的主要限制就是只能在const类型对的对象上执行不改变其内容的操作。</p><p>在不改变const对象的操作中还有一种是初始化，如果利用一个对象去初始化另外一个对象，则它们是不是const都无关紧要。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = i;<span class="comment">//i的值拷贝给了ci</span></span><br><span class="line"><span class="keyword">int</span> j = ci;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ci="</span> &lt;&lt; ci &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"j="</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>输出结果如下：  ![](https://i.imgur.com/RpcPLLp.png)  <p><br><br></p><hr><blockquote><h1 id="2-const引用"><a href="#2-const引用" class="headerlink" title="2.const引用"></a>2.const引用</h1></blockquote><hr><br>可以把引用绑定到const对象上，就像绑定到其他对象上一样，我们称之为——常量引用。  <p>与普通引用不同的是，对常量的引用不能被用作修改它所绑定的对象。  </p><p>错误示范如下：<br><img src="https://i.imgur.com/ajppGmY.png" alt></p><hr><blockquote><h1 id="3-初始化和对const的引用"><a href="#3-初始化和对const的引用" class="headerlink" title="3.初始化和对const的引用"></a>3.初始化和对const的引用</h1></blockquote><hr><br>引用的类型必须与其所引用对象的类型一致，但是有两个情况例外。第一个例外情况就是在初始化常量引用时，允许用任意表达式作为初始值，只要该表达式的结果能转化成引用的类型即可。  <p>允许一个常量引用绑定非常量的对象、字面值、甚至是一般表达式。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = i;<span class="comment">//允许将const int &amp;绑定到一个普通int对象上</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">42</span>;<span class="comment">//r1是一个常量引用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r3 = r1 * <span class="number">2</span>;<span class="comment">//r3是一个常量引用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r1="</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r2="</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r3="</span> &lt;&lt; r3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/MkT10uV.png" alt></p><p><br><br></p><hr><blockquote><h1 id="4-对cons的引用可能引用一个并非const的对象"><a href="#4-对cons的引用可能引用一个并非const的对象" class="headerlink" title="4.对cons的引用可能引用一个并非const的对象"></a>4.对cons的引用可能引用一个并非const的对象</h1></blockquote><hr><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;r1 = i;<span class="comment">//引用r1绑定对象i</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i;<span class="comment">//常量引用r2绑定i，但是r2不能修改i的值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r1="</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r2="</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">r1 = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r1="</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r2="</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//r2 = 5;//此处报错，因为r2是一个常量引用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/96S3r6f.png" alt><br><br><br></p><p>对于常量引用来说，一般情况下是没有办法来对它进行修改的，但是可以使用下面的方法来尝试对常量引用进行修改。代码图如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ref = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ref="</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)&amp;ref;</span><br><span class="line">*p = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ref="</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/d4EB8c7.png" alt><br><br><br><br>这里我们使用了一个指针来对常量引用进行修改。首先，我们要知道的是，常量引用不是一个对象，编译器并没有给它分配内存空间。当我们使用指针指向常量引用时，编译器会给常量引用临时开辟一块内存空间。代码示意如下：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tmp=ref;<span class="comment">//tmp有内存</span></span><br><span class="line"><span class="keyword">int</span> *p=(<span class="keyword">int</span> *)&amp;ref;<span class="comment">//*p指向的是那块临时空间，临时空间看不到</span></span><br></pre></td></tr></table></figure><p><br><br></p><hr><blockquote><h1 id="5-指针和const"><a href="#5-指针和const" class="headerlink" title="5.指针和const"></a>5.指针和const</h1></blockquote><hr><br>与引用一样，也可以令指针指向常量或非常量。类似于常量引用，指向常量的指针不能改变其所指对象的值。要想存放常量对象的地址，只能使用指向常量的指针。  实例代码如下：  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int *r1 = &amp;i;//报错，r1是一个普通指针，并不能指向一个常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *r2 = &amp;i;<span class="comment">//常量指针指向常量</span></span><br><span class="line"><span class="comment">//常量指针可以指向常量，但是并不能修改常量的值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"常量i的地址为："</span> &lt;&lt; &amp;i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r2指向的地址为："</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r2="</span> &lt;&lt; *r2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/d24xVwj.png" alt><br><br><br></p><hr><blockquote><h1 id="6-const指针"><a href="#6-const指针" class="headerlink" title="6.const指针"></a>6.const指针</h1></blockquote><hr><br>指针是对象而引用不是，就像其他对象类型一样，允许把指针本身定义为常量。常量指针必须初始化，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能再修改。把*放在const关键字之前用以说明指针是一个常量。这样书写的意味着，不变的是指针本身的值，而不是指向的那个值。  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> r1 = &amp;i;<span class="comment">//r1将一直指向i</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i1 = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> r2 = &amp;i1;<span class="comment">//r2是指向常量的常量指针</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i=10时地址为："</span> &lt;&lt; &amp;i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"常量指针r1指向的地址为："</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">i = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i=100时地址为："</span> &lt;&lt; &amp;i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"常量指针r1指向的地址为："</span> &lt;&lt; r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/SsAFLUA.png" alt></p><h2 id="-1"><a href="#-1" class="headerlink" title></a><br><br></h2><blockquote><h1 id="7-顶层const"><a href="#7-顶层const" class="headerlink" title="7.顶层const"></a>7.顶层const</h1></blockquote><hr><br>指针本身就是一个对象，它又可以指向1另外一个对象。因此指针本身是不是常量，以及指针指向的对象是不是一个常量是两个独立的问题。  <p>顶层const表示指针本身是一个常量。  </p><p>底层const表示指针所指的对象时一个常量。  </p><p>更一般地，顶层const可以表示任意的对象时常量，这一点对任何数据类型都适用，如算术类型、类、指针等。底层const则与指针和引用等符合类型的基本类型有关。比较特殊的是，指针类型既可以是顶层const，也可以是底层const。  </p><h2 id="-2"><a href="#-2" class="headerlink" title></a><br><br></h2><blockquote><h1 id="8-尽量使用const代替-define"><a href="#8-尽量使用const代替-define" class="headerlink" title="8.尽量使用const代替#define"></a>8.尽量使用const代替#define</h1></blockquote><hr><br>在旧版本的C中，如果想建立一个常量，必须使用预处理器。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1024;</span></span><br></pre></td></tr></table></figure><p>这里我们定义的宏MAX从未被编译器看到过，因为在预处理阶段，所有的MAX已经全部被替换成了1024，于是MAX并没有将其加入符号表中。但是我们使用这个常量获得一个编译错误信息时，可能会带来一些困扰，因为这个信息可能会提到1024，但是并没有提到MAX。如果MAX被定义在一个不是我们自己写的头文件中，我们可能并不知道1024代表着什么，也许解决这个问题需要很长的时间。<br>解决这个问题的办法就是用一个常量来替换掉上面的宏：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1024</span>；</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> A <span class="comment">//卸载宏常量A</span></span></span><br></pre></td></tr></table></figure><p>###const和#define的区别  </p><ul><li>const有类型，可进行编译器类型安全检查，#define无类型，不可进行类型检查</li><li>const有作用域，而#define不重视作用域，默认定义处到文件末尾，如果定义在指定作用域下有效的常量，那么#define就不能用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;有时候我们希望定义这样一种变量，它的值不能被改变。例如，用一
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="限定符" scheme="http://wanqbin.xyz/tags/%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>C++复合类型</title>
    <link href="http://wanqbin.xyz/2019/03/09/C-%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
    <id>http://wanqbin.xyz/2019/03/09/C-复合类型/</id>
    <published>2019-03-09T00:26:00.000Z</published>
    <updated>2019-06-11T10:40:07.439Z</updated>
    
    <content type="html"><![CDATA[<p>复合类型是指基于其他类型定义的类型。C++有几种复合类型，下面主要是<code>引用</code>和<code>指针</code>。  定义复合类型的变量复杂很多，通用的描述为：一条声明语句由一个<code>基本数据类型</code>和紧随其后的一个<code>声明符</code>列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型。  </p><hr><blockquote><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1></blockquote><hr><p>C++11中新增加了一种引用，为<code>右值引用</code>，主要用于内置类。这里，我们使用<code>引用</code>时，指的是<code>左值引用</code>。  引用为对象起了另外一个名字，引用类型引用另外一种类型。通过将声明符写成<code>&amp;d</code>的形式来定义引用类型，其中d是声明的变量名。<br>引用即别名，并非对象，它只是为一个已经存在的对象所起的另外一个名字。<br>下面是引用的一个例子。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> vale = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;vale00 = vale; <span class="comment">//注意：引用必须进行初始化</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vale的值为："</span> &lt;&lt; vale &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vale00的值为："</span> &lt;&lt; vale00 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vale00是vale的引用。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/VPKK9Rk.png" alt><br><br><br>定义了一个引用之后，对其进行的所有操作都是在与之绑定的对象上进行的。<br>为引用赋值，实际上是把值赋给了与引用绑定的对象。获取引用的值，实际上是获取到了与之绑定的对象的值。同理，以引用作为初始值，实际上是以引用绑定的对象作为初始值。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">"青木"</span>;</span><br><span class="line"><span class="built_in">string</span> &amp;name_ = name;</span><br><span class="line"><span class="built_in">string</span> name0 = <span class="string">"Aoki"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我的名字是"</span> &lt;&lt; name_ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我是"</span> &lt;&lt; name0 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">name0 = name_;<span class="comment">//为引用赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我现在是"</span> &lt;&lt; name0 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<br><img src="https://i.imgur.com/yxB0y8I.png" alt><br><br></p><hr><blockquote><h1 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h1></blockquote><hr><p><code>指针</code>是指向另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问，但是指针与引用也有很多不同点，如下：  </p><ul><li>指针本身就是个对象，允许对指针赋值和拷贝，在指针的生命周期内，它可以先后指向几个不同的对象  </li><li>指针无须在定义时赋初值。和其他内置类型一样，在块作用域内定义的指针如果没有定义，也将拥有一个不确定的值。  <br>>## 获取对象的地址</li></ul><p>指针存放某个对象的地址，要向获取该地址，就要使用<code>取地址符</code>（&amp;）。<br>在声明语句中，指针的类型实际上被用于它所指向的对象的类型，所以二者必须匹配。如果指针指向了一个其他类型的对象，对该对象的操作将会发生错误。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">"青木"</span>;</span><br><span class="line"><span class="built_in">string</span>* name_=&amp;name;<span class="comment">//name_存放变量name的地址，或者说name_是指向变量name的指针</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我的名字是"</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"name的地址为:"</span> &lt;&lt; name_ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我的名字是"</span> &lt;&lt; name_ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<br><img src="https://i.imgur.com/Rp1QNpE.png" alt><br><br><br><br></p><blockquote><h2 id="指针值"><a href="#指针值" class="headerlink" title="指针值"></a>指针值</h2></blockquote><p>指针的值（即地址）应属于下列4中状态之一：  </p><ol><li>指向一个对象 </li><li>指向紧邻对象所占空间的下一个位置</li><li>空指针，意味着指针没有指向任何值</li><li>无效指针，就是上述状态之外的其他值。</li></ol><p>对于无效指针，试图拷贝或以其他方式访问无效指针的值都将引发错误。  </p><br>>## 利用指针访问对象<p>如果一个指针指向了一个对象，则允许使用<code>解引用符</code>（*）来访问该对象。<br>对指针解引用会得到所指的对象，因此如果给解引用的结果赋值，实际上也就是给指针所指的内容赋值。  </p><blockquote><p>注意：解引用操作仅适用于那些确实指向了某个对象的有效指针。  </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">"青木"</span>;</span><br><span class="line"><span class="built_in">string</span> name0 = <span class="string">"Aoki"</span>;</span><br><span class="line"><span class="built_in">string</span>* name_=&amp;name;<span class="comment">//name_存放变量name的地址，或者说name_是指向变量name的指针</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我的名字是"</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"name的地址为:"</span> &lt;&lt; name_ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我的名字是"</span> &lt;&lt; *name_ &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//指针解引用，获取对象的值</span></span><br><span class="line">*name_ = name0;<span class="comment">//经由指针为name赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我的名字是"</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我的名字是"</span> &lt;&lt; *name_ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>![](https://i.imgur.com/lno4Q9r.png)<br><blockquote><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2></blockquote><p>空指针不指向任何对象，在试图使用一个指针之前，代码可以首先检查它是否为空。<br>生成空指针的方法：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p1=<span class="literal">nullptr</span>;<span class="comment">//等价于int* ptr=0</span></span><br><span class="line"><span class="keyword">int</span>* p2=<span class="number">0</span>;<span class="comment">//直接将p2初始化为字面常量0</span></span><br></pre></td></tr></table></figure><p>得到空指针最直接的办法是使用字面值nullptr来初始化指针。nullptr是一种特殊的指针，它可以被转换成任意其他指针类型。<br><br><br><br></p><blockquote><h2 id="赋值和指针"><a href="#赋值和指针" class="headerlink" title="赋值和指针"></a>赋值和指针</h2></blockquote><p>指针额引用都能够提供对其他的对象的间接访问，但是在具体的实现细节上两者有很大不同，其中最主要的又掉了是引用本身并不是一个对象。<br>指针和它存放的地址之间没有这种限制。和其他任何变量一样，给指针赋值就是令它存放一个新地址，从而指向一个新对象。<br>对于指针的赋值，前文已经给出。  </p><blockquote><h2 id="其他指针操作"><a href="#其他指针操作" class="headerlink" title="其他指针操作"></a>其他指针操作</h2></blockquote><p>只要指针拥有一个合法值，就能将它用在条件表达式中。和采用算术值作为条件遵循的规则一样，如果指针的值是0，条件取false。<br>对于两个类型相同的合法指针，可以用相等操作符或不相等操作符来比较它们，比较的结果是布尔类型。<br>两个指针存放的地址值相同（两个指针相等），有三种可能：  </p><ul><li>它们都为空</li><li>都指向同一个对象</li><li>都指向同一个对象的下一个地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">"青木"</span>;</span><br><span class="line"><span class="built_in">string</span>* name_=&amp;name;<span class="comment">//name_存放变量name的地址，或者说name_是指向变量name的指针</span></span><br><span class="line"><span class="keyword">int</span>* a = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">if</span> (name_&amp;&amp;a) <span class="comment">//与运算，一真一假为假</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我是指向"</span> &lt;&lt; name &lt;&lt; <span class="string">"的指针，我不为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"大家好，我是空指针a，我的地址是"</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><img src="https://i.imgur.com/VW47tJO.png" alt></p><p><br><br><br>最后是void*指针。</p><blockquote><h2 id="void-指针"><a href="#void-指针" class="headerlink" title="void* 指针"></a>void* 指针</h2></blockquote><p>void* 指针是一种特殊的指针类型，可用于存放任意对象的指针，一个void<em>指针存放着一个地址。<br>利用void</em>指针可以做的事有：  </p><ul><li>拿它和别的指针比较</li><li>作为函数的输入和输出</li><li>赋值给另外一个void*指针</li></ul><p>但是我们不能直接操作void* 指针，因为它的类型未知。以void*的视角来看内存空间也仅仅是内存空间，没办法访问内存空间中所存的对象。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>  a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>* name_=&amp;a;<span class="comment">//name_存放变量a的地址，或者说name_是指向变量a的指针</span></span><br><span class="line"><span class="keyword">void</span>* names;</span><br><span class="line">names = name_;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"name_指向的值为："</span> &lt;&lt; *name_ &lt;&lt;<span class="string">",地址为："</span>&lt;&lt;name_&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"names地址为："</span> &lt;&lt; names &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://i.imgur.com/UaoQ4BV.png" alt></p><br><br><br><br>对于void* 指针，我还有许多不解的地方，在网上搜索之后发现了一个比较详细解释void* 指针的博文——[void及void指针含义的深刻解析](https://blog.csdn.net/geekcome/article/details/6249151?reload)<br><br><br><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复合类型是指基于其他类型定义的类型。C++有几种复合类型，下面主要是&lt;code&gt;引用&lt;/code&gt;和&lt;code&gt;指针&lt;/code&gt;。  
定义复合类型的变量复杂很多，通用的描述为：一条声明语句由一个&lt;code&gt;基本数据类型&lt;/code&gt;和紧随其后的一个&lt;code&gt;声明符&lt;/
      
    
    </summary>
    
      <category term="C++" scheme="http://wanqbin.xyz/categories/C/"/>
    
    
      <category term="引用" scheme="http://wanqbin.xyz/tags/%E5%BC%95%E7%94%A8/"/>
    
      <category term="指针" scheme="http://wanqbin.xyz/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="复合类型" scheme="http://wanqbin.xyz/tags/%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
